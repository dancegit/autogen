Page: modal.com_files/modal.com/docs/guide/job-queue.html
----------------------------------------
   [1]Modal logo
   [2]Guide [3]Examples [4]Reference [5]Playground
   [6]Log In [7]Sign Up
   (BUTTON)
   [8]Introduction[9]Custom container images [10]Custom
   containers[11]Private registries[12]GPUs and other resources [13]GPU
   acceleration[14]Using CUDA on Modal[15]Reserving CPU and
   memory[16]Scaling out [17]Scaling out[18]Dicts and queues[19]Job
   processing[20]Concurrent inputs on a single container (beta)[21]Dynamic
   batching (beta)[22]Scheduling and cron jobs[23]Deployment [24]Apps,
   Stubs, and entrypoints[25]Managing deployments[26]Invoke deployed
   functions[27]Continuous deployment[28]Secrets and environment variables
   [29]Secrets[30]Environment variables[31]Web endpoints [32]Web
   endpoints[33]Streaming endpoints[34]Web endpoint URLs[35]Request
   timeouts[36]Networking [37]Tunnels (beta)[38]Proxies (beta)[39]Data
   sharing and storage [40]Passing local data[41]Volumes[42]Mounting local
   files and directories[43]Storing model weights[44]Dataset
   ingestion[45]Cloud bucket mounts[46]Network file systems
   (superseded)[47]Sandboxes [48]Sandboxes[49]Running
   commands[50]Networking and security[51]File access[52]Performance
   [53]Cold start performance[54]Memory Snapshot (beta)[55]Geographic
   latency[56]Reliability and robustness [57]Failures and
   retries[58]Preemption[59]Timeouts[60]Troubleshooting[61]Security and
   privacy[62]Integrations [63]Connecting Modal to your Vercel
   account[64]Connecting Modal to your Datadog account[65]Connecting Modal
   to your OpenTelemetry provider[66]Okta SSO[67]Slack notifications
   (beta)[68]Other topics [69]File and project structure[70]Developing and
   debugging[71]Modal user account
   setup[72]Workspaces[73]Environments[74]Jupyter
   notebooks[75]Asynchronous API usage[76]Global variables[77]Region
   selection[78]Container lifecycle hooks[79]Parameterized functions[80]S3
   Gateway endpoints
     __________________________________________________________________

Job processing

   Modal can be used as a scalable job queue to handle asynchronous tasks
   submitted from a web app or any other Python application. This allows
   you to offload long-running or resource-intensive tasks to Modal, while
   your main application remains responsive.

Basic pattern

   The basic pattern for using Modal as a job queue involves three key
   steps:
       deploy.
       [82]modal.functions.FunctionCall.get()

   Here's a simple example that you can run with modal run
   my_job_queue.py:
# my_job_queue.py
import modal

app = modal.App("my-job-queue")

@app.function()
def process_job(data):
    # Perform the job processing here
    return {"result": data}

def submit_job(data):
    # Since the `process_job` function is deployed, need to first look it up
    process_job = modal.Function.lookup("my-job-queue", "process_job")
    call = process_job.spawn(data)
    return call.object_id

def get_job_result(call_id):
    function_call = modal.functions.FunctionCall.from_id(call_id)
    try:
        result = function_call.get(timeout=5)
    except modal.exception.OutputExpiredError:
        result = {"result": "expired"}
    except TimeoutError:
        result = {"result": "pending"}
    return result

@app.local_entrypoint()
def main():
    data = "my-data"

    # Submit the job to Modal
    call_id = submit_job(data)
    print(get_job_result(call_id))

   (BUTTON) Copy

   In this example:
     * process_job is the Modal function that performs the actual job
       processing. To deploy the process_job function on Modal, run modal
       deploy my_job_queue.py.
     * submit_job submits a new job by first looking up the deployed
       process_job function, then calling .spawn() with the job data. It
       returns the unique ID of the spawned function call.
     * get_job_result attempts to retrieve the result of a previously
       submitted job using [83]FunctionCall.from_id() and
       [84]FunctionCall.get(). [85]FunctionCall.get() waits indefinitely
       by default. It takes an optional timeout argument that specifies
       the maximum number of seconds to wait, which can be set to 0 to
       poll for an output immediately. Here, if the job hasn't completed
       yet, we return a pending response.
     * The results of a .spawn() are accessible via FunctionCall.get() for
       up to 1 hour after completion. After this period, we return an
       expired response.

   [86]Document OCR Web App is an example that uses this pattern.

Integration with web frameworks

   You can easily integrate the job queue pattern with web frameworks like
   FastAPI. Here's an example, assuming that you have already deployed
   process_job on Modal with modal deploy as above. This example won't
   work if you haven't deployed your app yet.
# my_job_queue_endpoint.py
import fastapi
import modal
from modal.functions import FunctionCall

image = modal.Image.debian_slim().pip_install("fastapi[standard]")
app = modal.App("fastapi-modal", image=image)
web_app = fastapi.FastAPI()


@app.function()
@modal.asgi_app()
def fastapi_app():
    return web_app


@web_app.post("/submit")
async def submit_job_endpoint(data):
    process_job = modal.Function.lookup("my-job-queue", "process_job")

    call = process_job.spawn(data)
    return {"call_id": call.object_id}


@web_app.get("/result/{call_id}")
async def get_job_result_endpoint(call_id: str):
    function_call = FunctionCall.from_id(call_id)
    try:
        result = function_call.get(timeout=0)
    except modal.exception.OutputExpiredError:
        return fastapi.responses.JSONResponse(content="", status_code=404)
    except TimeoutError:
        return fastapi.responses.JSONResponse(content="", status_code=202)

    return result

   (BUTTON) Copy

   In this example:
     * The /submit endpoint accepts job data, submits a new job using
       process_job.spawn(), and returns the job's ID to the client.
     * The /result/{call_id} endpoint allows the client to poll for the
       job's result using the job ID. If the job hasn't completed yet, it
       returns a 202 status code to indicate that the job is still being
       processed. If the job has expired, it returns a 404 status code to
       indicate that the job is not found.

   You can try this app by serving it with modal serve:
modal serve my_job_queue_endpoint.py

   (BUTTON) Copy

   Then interact with its endpoints with curl:
# Make a POST request to your app endpoint with.
$ curl -X POST $YOUR_APP_ENDPOINT/submit?data=data
{"call_id":"fc-XXX"}

# Use the call_id value from above.
$ curl -X GET $YOUR_APP_ENDPOINT/result/fc-XXX

   (BUTTON) Copy

Scaling and reliability

   Modal automatically scales the job queue based on the workload,
   spinning up new instances as needed to process jobs concurrently. It
   also provides built-in reliability features like automatic retries and
   timeout handling.

   You can customize the behavior of the job queue by configuring the
   @app.function() decorator with options like [87]retries, [88]timeout,
   and [89]concurrency_limit.
   [90]Job processing [91]Basic pattern [92]Integration with web
   frameworks [93]Scaling and reliability
   Modal logo Â© 2024
   [94]About [95]Status [96]Changelog [97]Documentation [98]Slack
   Community [99]Pricing [100]Examples

