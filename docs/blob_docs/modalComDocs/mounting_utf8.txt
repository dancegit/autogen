Page: modal.com_files/modal.com/docs/guide/mounting.html
----------------------------------------
   [1]Modal logo
   [2]Guide [3]Examples [4]Reference [5]Playground
   [6]Log In [7]Sign Up
   (BUTTON)
   [8]Introduction[9]Custom container images [10]Custom
   containers[11]Private registries[12]GPUs and other resources [13]GPU
   acceleration[14]Using CUDA on Modal[15]Reserving CPU and
   memory[16]Scaling out [17]Scaling out[18]Dicts and queues[19]Job
   processing[20]Concurrent inputs on a single container (beta)[21]Dynamic
   batching (beta)[22]Scheduling and cron jobs[23]Deployment [24]Apps,
   Stubs, and entrypoints[25]Managing deployments[26]Invoke deployed
   functions[27]Continuous deployment[28]Secrets and environment variables
   [29]Secrets[30]Environment variables[31]Web endpoints [32]Web
   endpoints[33]Streaming endpoints[34]Web endpoint URLs[35]Request
   timeouts[36]Networking [37]Tunnels (beta)[38]Proxies (beta)[39]Data
   sharing and storage [40]Passing local data[41]Volumes[42]Mounting local
   files and directories[43]Storing model weights[44]Dataset
   ingestion[45]Cloud bucket mounts[46]Network file systems
   (superseded)[47]Sandboxes [48]Sandboxes[49]Running
   commands[50]Networking and security[51]File access[52]Performance
   [53]Cold start performance[54]Memory Snapshot (beta)[55]Geographic
   latency[56]Reliability and robustness [57]Failures and
   retries[58]Preemption[59]Timeouts[60]Troubleshooting[61]Security and
   privacy[62]Integrations [63]Connecting Modal to your Vercel
   account[64]Connecting Modal to your Datadog account[65]Connecting Modal
   to your OpenTelemetry provider[66]Okta SSO[67]Slack notifications
   (beta)[68]Other topics [69]File and project structure[70]Developing and
   debugging[71]Modal user account
   setup[72]Workspaces[73]Environments[74]Jupyter
   notebooks[75]Asynchronous API usage[76]Global variables[77]Region
   selection[78]Container lifecycle hooks[79]Parameterized functions[80]S3
   Gateway endpoints
     __________________________________________________________________

Mounting local files and directories

   When you run your code on Modal, it executes in a [81]containerized
   environment separate from your local machine.

   There are two ways to make local files available to your Modal app:
       directories accessible to your Modal function or application during
       runtime. Mounting is intended for files that change frequently
       during development. It allows you to modify your code locally and
       rerun it on Modal without needing to rebuild the container image
       each time. This can significantly speed up your development
       iteration cycle.
       often, you can add them directly to your Modal container image
       during the build process with [82]copy_local_file or
       [83]copy_local_dir. This is suitable for dependencies and static
       assets that remain relatively constant throughout your development
       process.

   This page is concerned with mounting. To use local files and packages
   within your Modal app via mounting, they either need to be automounted
   or explicitly mounted.

Automount

   By default, with [84]automount=True, Modal mounts local Python packages
   that you have used (imported) in your code but are not installed
   globally on your system (like those in site-packages, where globally
   installed packages reside).

   For example, if you have a local module deps.py that contains a
   function you would like to import, dependency. You import it as
   follows:
from deps import dependency

app = modal.App()

   (BUTTON) Copy

   Modal will automatically mount deps.py, and all of its dependencies not
   in site-packages.

   All Python packages that are installed in site-packages will be
   excluded from automounting. This includes packages installed in virtual
   environments.

   Non-Python files will be automounted only if they are located in the
   same directory or subdirectory of a Python package. Note that the
   directory where your Modal entrypoint is located is considered a
   package if it contains a __init__.py file and is being called as a
   package.

Editable-mode exclusion

   If local packages that you thought were installed in site-packages are
   being automounted, it's possible that those packages were installed in
   editable-mode.

   When you install a package in editable-mode (also known as "development
   mode"), instead of copying the package files to the site-packages
   directory, a link (symbolic link or .egg-link file) is placed there.
   This link points to the actual location of the package files, which are
   typically in your project directory or a separate source directory. As
   a result, they may be automounted.

Automounts take precedence over PyPI packages

   Automounts take precedence over PyPI packages, so in the case where you
   pip_install or otherwise include a package by building it into your
   image, the automount will still trigger and shadow the site-packages
   installed version. An example of when this would happen is if you have
   binary parts of local modules such that they need to be built as part
   of the image build.

Example #1: Simple directory structure

   Let's look at an example directory structure:
mountingexample1
+-- __init__.py
+-- data
|   +-- my_data.jsonl
+-- entrypoint.py

   (BUTTON) Copy

   And let's say your entrypoint.py code looks like this:
import modal

app = modal.App()


@app.function()
def app_function():
    print("app function")

   (BUTTON) Copy

   When you run modal run entrypoint.py from inside the mountingexample1
   directory, you will see the following items mounted:
X Created objects.
+-- ¨ Created mount /Users/yirenlu/modal-scrap/mountingexample1/entrypoint.py
+-- ¨ Created app_function.

   (BUTTON) Copy

   The data directory is not auto-mounted, because mountingexample1 is not
   being treated like a package in this case.

   Now, let's say you run cd .. && modal run mountingexample1.entrypoint.
   You should see the following items mounted:
X Created objects.
+-- ¨ Created mount PythonPackage:mountingexample1.entrypoint
+-- ¨ Created mount PythonPackage:mountingexample1
+-- ¨ Created app_function.

   (BUTTON) Copy

   The entire mountingexample1 package is mounted, including the data
   subdirectory.

   This is because the mountingexample1 directory is being treated as a
   package.

Example #2: Global scope imports

   Oftentimes when you are building on Modal, you will be migrating an
   existing codebase that is spread across multiple files and packages.
   Let's say your directory looks like this:
mountingexample2
+-- __init__.py
+-- data
|   +-- my_data.jsonl
+-- entrypoint.py
+-- package
    +-- __init__.py
    +-- package_data
    |   +-- library_data.jsonl
    +-- package_function.py

   (BUTTON) Copy

   And your entrypoint code looks like this:
import modal
from package.package_function import package_dependency

app = modal.App()


@app.function()
def app_function():
    package_dependency()

   (BUTTON) Copy

   When you run the entrypoint code with modal run
   mountingexample2.entrypoint, you will see the following items mounted:
X Created objects.
+-- ¨ Created mount PythonPackage:mountingexample2.entrypoint
+-- ¨ Created mount PythonPackage:mountingexample2
+-- ¨ Created app_function.

   (BUTTON) Copy

   The entire contents of mountingexample2 is mounted, including the /data
   directory and the package package inside of it.

   Finally, let's check what happens when you remove the package import
   from your entrypoint code and run it with modal run entrypoint.py.
X Created objects.
+-- ¨ Created mount /Users/yirenlu/modal-scrap/mountingexample2/entrypoint.py
+-- ¨ Created app_function.

   (BUTTON) Copy

   Only the entrypoint file is mounted, and nothing else.

Mounting files manually

   If something that you want to have mounted is not included in an
   automount, you have a few options:
       [86]Mount.from_local_python_packages().
       directories are automounted as part of packages.

   [87]Mounting local files and directories [88]Automount
   [89]Editable-mode exclusion [90]Automounts take precedence over PyPI
   packages [91]Example #1: Simple directory structure [92]Example #2:
   Global scope imports [93]Mounting files manually
   Modal logo © 2024
   [94]About [95]Status [96]Changelog [97]Documentation [98]Slack
   Community [99]Pricing [100]Examples

