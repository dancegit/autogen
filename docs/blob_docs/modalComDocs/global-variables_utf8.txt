Page: modal.com_files/modal.com/docs/guide/global-variables.html
----------------------------------------
   [1]Modal logo
   [2]Guide [3]Examples [4]Reference [5]Playground
   [6]Log In [7]Sign Up
   (BUTTON)
   [8]Introduction[9]Custom container images [10]Custom
   containers[11]Private registries[12]GPUs and other resources [13]GPU
   acceleration[14]Using CUDA on Modal[15]Reserving CPU and
   memory[16]Scaling out [17]Scaling out[18]Dicts and queues[19]Job
   processing[20]Concurrent inputs on a single container (beta)[21]Dynamic
   batching (beta)[22]Scheduling and cron jobs[23]Deployment [24]Apps,
   Stubs, and entrypoints[25]Managing deployments[26]Invoke deployed
   functions[27]Continuous deployment[28]Secrets and environment variables
   [29]Secrets[30]Environment variables[31]Web endpoints [32]Web
   endpoints[33]Streaming endpoints[34]Web endpoint URLs[35]Request
   timeouts[36]Networking [37]Tunnels (beta)[38]Proxies (beta)[39]Data
   sharing and storage [40]Passing local data[41]Volumes[42]Mounting local
   files and directories[43]Storing model weights[44]Dataset
   ingestion[45]Cloud bucket mounts[46]Network file systems
   (superseded)[47]Sandboxes [48]Sandboxes[49]Running
   commands[50]Networking and security[51]File access[52]Performance
   [53]Cold start performance[54]Memory Snapshot (beta)[55]Geographic
   latency[56]Reliability and robustness [57]Failures and
   retries[58]Preemption[59]Timeouts[60]Troubleshooting[61]Security and
   privacy[62]Integrations [63]Connecting Modal to your Vercel
   account[64]Connecting Modal to your Datadog account[65]Connecting Modal
   to your OpenTelemetry provider[66]Okta SSO[67]Slack notifications
   (beta)[68]Other topics [69]File and project structure[70]Developing and
   debugging[71]Modal user account
   setup[72]Workspaces[73]Environments[74]Jupyter
   notebooks[75]Asynchronous API usage[76]Global variables[77]Region
   selection[78]Container lifecycle hooks[79]Parameterized functions[80]S3
   Gateway endpoints
     __________________________________________________________________

Global variables

   There are cases where you might want objects or data available in
   global scope. For example:
     * You need to use the data in a scheduled function (scheduled
       functions don't accept arguments)
     * You need to construct objects (e.g. Secrets) in global scope to use
       as function annotations
     * You don't want to clutter many function signatures with some common
       arguments they all use, and pass the same arguments through many
       layers of function calls.

   For these cases, you can use the modal.is_local function, which returns
   True if the app is running locally (initializing) or False if the app
   is executing in the cloud.

   For instance, to create a [81]modal.Secret that you can pass to your
   function decorators to create environment variables, you can run:
import os

if modal.is_local():
    pg_password = modal.Secret.from_dict({"PGPASS": os.environ["MY_LOCAL_PASSWOR
D"]})
else:
    pg_password = modal.Secret.from_dict({})


@app.function(secrets=[pg_password])
def get_secret_data():
    connection = psycopg2.connect(password=os.environ["PGPASS"])
    ...

   (BUTTON) Copy

Warning about regular module globals

   If you try to construct a global in module scope using some local data
   without using something like modal.is_local, it might have unexpected
   effects since your Python modules will be not only be loaded on your
   local machine, but also on the remote worker.

   E.g., this will typically not work:
# blob.json doesn't exist on the remote worker, so this will cause an error ther
e
data_blob = open("blob.json", "r").read()

@app.function()
def foo():
    print(data_blob)

   (BUTTON) Copy
   [82]Global variables [83]Warning about regular module globals
   Modal logo Â© 2024
   [84]About [85]Status [86]Changelog [87]Documentation [88]Slack
   Community [89]Pricing [90]Examples

