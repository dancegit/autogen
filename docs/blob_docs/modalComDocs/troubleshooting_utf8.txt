Page: modal.com_files/modal.com/docs/guide/troubleshooting.html
----------------------------------------
   [1]Modal logo
   [2]Guide [3]Examples [4]Reference [5]Playground
   [6]Log In [7]Sign Up
   (BUTTON)
   [8]Introduction[9]Custom container images [10]Custom
   containers[11]Private registries[12]GPUs and other resources [13]GPU
   acceleration[14]Using CUDA on Modal[15]Reserving CPU and
   memory[16]Scaling out [17]Scaling out[18]Dicts and queues[19]Job
   processing[20]Concurrent inputs on a single container (beta)[21]Dynamic
   batching (beta)[22]Scheduling and cron jobs[23]Deployment [24]Apps,
   Stubs, and entrypoints[25]Managing deployments[26]Invoke deployed
   functions[27]Continuous deployment[28]Secrets and environment variables
   [29]Secrets[30]Environment variables[31]Web endpoints [32]Web
   endpoints[33]Streaming endpoints[34]Web endpoint URLs[35]Request
   timeouts[36]Networking [37]Tunnels (beta)[38]Proxies (beta)[39]Data
   sharing and storage [40]Passing local data[41]Volumes[42]Mounting local
   files and directories[43]Storing model weights[44]Dataset
   ingestion[45]Cloud bucket mounts[46]Network file systems
   (superseded)[47]Sandboxes [48]Sandboxes[49]Running
   commands[50]Networking and security[51]File access[52]Performance
   [53]Cold start performance[54]Memory Snapshot (beta)[55]Geographic
   latency[56]Reliability and robustness [57]Failures and
   retries[58]Preemption[59]Timeouts[60]Troubleshooting[61]Security and
   privacy[62]Integrations [63]Connecting Modal to your Vercel
   account[64]Connecting Modal to your Datadog account[65]Connecting Modal
   to your OpenTelemetry provider[66]Okta SSO[67]Slack notifications
   (beta)[68]Other topics [69]File and project structure[70]Developing and
   debugging[71]Modal user account
   setup[72]Workspaces[73]Environments[74]Jupyter
   notebooks[75]Asynchronous API usage[76]Global variables[77]Region
   selection[78]Container lifecycle hooks[79]Parameterized functions[80]S3
   Gateway endpoints
     __________________________________________________________________

Troubleshooting

"Command not found" errors

   If you installed Modal but you're seeing an error like modal: command
   not found when trying to run the CLI, this means that the installation
   location of Python package executables ("binaries") are not present on
   your system path. This is a common problem; you need to reconfigure
   your system's environment variables to fix it.

   One workaround is to use python -m modal.cli instead of modal. However,
   this is just a patch. There's no single solution for the problem
   because Python installs dependencies on different locations depending
   on your environment. See this [81]popular StackOverflow question for
   pointers on how to resolve your system path issue.

Custom types defined in __main__

   Modal currently uses [82]cloudpickle to transfer objects returned or
   exceptions raised by functions that are executed in Modal. This gives a
   lot of flexibility and support for custom data types.

   However, any types that are declared in your Python entrypoint file
   (The one you call on the command line) will currently be redeclared if
   they are returned from Modal functions, and will therefore have the
   same structure and type name but not maintain class object identity
   with your local types. This means that you can't catch specific custom
   exception classes:
import modal
app = modal.App()

class MyException(Exception):
    pass

@app.function()
def raise_custom():
    raise MyException()

@app.local_entrypoint()
def main():
    try:
        raise_custom.remote()
    except MyException:  # this will not catch the remote exception
        pass
    except Exception:  # this will catch it instead, as it's still a subclass of
 Exception
        pass

   (BUTTON) Copy

   Nor can you do object equality checks on dataclasses, or isinstance
   checks:
import modal
import dataclasses

@dataclasses.dataclass
class MyType:
    foo: int

app = modal.App()

@app.function()
def return_custom():
    return MyType(foo=10)


@app.local_entrypoint()
def main():
    data = return_custom.remote()
    assert data == MyType(foo=10)  # false!
    assert data.foo == 10  # true!, the type still has the same fields etc.
    assert isinstance(data, MyType)  # false!

   (BUTTON) Copy

   If this is a problem for you, you can easily solve it by moving your
   custom type definitions to a separate Python file from the one you
   trigger to run your Modal code, and import that file instead.
# File: my_types.py
import dataclasses

@dataclasses.dataclass
class MyType:
    foo: int

   (BUTTON) Copy
# File: modal_script.py
import modal
from my_types import MyType

app = modal.App()

@app.function()
def return_custom():
    return MyType(foo=10)

@app.local_entrypoint()
def main():
    data = return_custom.remote()
    assert data == MyType(foo=10)  # true!
    assert isinstance(data, MyType)  # true!

   (BUTTON) Copy

Function side effects

   The same container can be reused for multiple invocations of the same
   function within an app. This means that if your function has side
   effects like modifying files on disk, they may or may not be present
   for subsequent calls to that function. You should not rely on the side
   effects to be present, but you might have to be careful so they don't
   cause problems.

   For example, if you create a disk-backed database using sqlite3:
import modal
import sqlite3

app = modal.App()

@app.function()
def db_op():
    db = sqlite3("db_file.sqlite3")
    db.execute("CREATE TABLE example (col_1 TEXT)")
    ...

   (BUTTON) Copy

   This function can (but will not necessarily) fail on the second
   invocation with an

   OperationalError: table foo already exists

   To get around this, take care to either clean up your side effects
   (e.g. deleting the db file at the end your function call above) or make
   your functions take them into consideration (e.g. adding an if
   os.path.exists("db_file.sqlite") condition or randomize the filename
   above).

413 Content Too Large errors

   If you receive a 413 Content Too Large error, this might be because you
   are hitting our gRPC payload size limits.

   The size limit is currently 100MB.

403 errors when connecting to GCP services.

   GCP will sometimes return 403 errors to Modal when connecting directly
   to GCP cloud services like Google Cloud Storage. This is a known issue.

   The workaround is to pin the cloud parameter in the [83]@app.function
   or [84]@app.cls.

   For example:
@app.function(cloud="gcp")
def f():
    ...

   (BUTTON) Copy
@app.cls(cloud="gcp")
class MyClass:
    ...

   (BUTTON) Copy
   [85]Troubleshooting [86]"Command not found" errors [87]Custom types
   defined in __main__ [88]Function side effects [89]413 Content Too Large
   errors [90]403 errors when connecting to GCP services.
   Modal logo Â© 2024
   [91]About [92]Status [93]Changelog [94]Documentation [95]Slack
   Community [96]Pricing [97]Examples

