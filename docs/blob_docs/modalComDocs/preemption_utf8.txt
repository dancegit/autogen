Page: modal.com_files/modal.com/docs/guide/preemption.html
----------------------------------------
   [1]Modal logo
   [2]Guide [3]Examples [4]Reference [5]Playground
   [6]Log In [7]Sign Up
   (BUTTON)
   [8]Introduction[9]Custom container images [10]Custom
   containers[11]Private registries[12]GPUs and other resources [13]GPU
   acceleration[14]Using CUDA on Modal[15]Reserving CPU and
   memory[16]Scaling out [17]Scaling out[18]Dicts and queues[19]Job
   processing[20]Concurrent inputs on a single container (beta)[21]Dynamic
   batching (beta)[22]Scheduling and cron jobs[23]Deployment [24]Apps,
   Stubs, and entrypoints[25]Managing deployments[26]Invoke deployed
   functions[27]Continuous deployment[28]Secrets and environment variables
   [29]Secrets[30]Environment variables[31]Web endpoints [32]Web
   endpoints[33]Streaming endpoints[34]Web endpoint URLs[35]Request
   timeouts[36]Networking [37]Tunnels (beta)[38]Proxies (beta)[39]Data
   sharing and storage [40]Passing local data[41]Volumes[42]Mounting local
   files and directories[43]Storing model weights[44]Dataset
   ingestion[45]Cloud bucket mounts[46]Network file systems
   (superseded)[47]Sandboxes [48]Sandboxes[49]Running
   commands[50]Networking and security[51]File access[52]Performance
   [53]Cold start performance[54]Memory Snapshot (beta)[55]Geographic
   latency[56]Reliability and robustness [57]Failures and
   retries[58]Preemption[59]Timeouts[60]Troubleshooting[61]Security and
   privacy[62]Integrations [63]Connecting Modal to your Vercel
   account[64]Connecting Modal to your Datadog account[65]Connecting Modal
   to your OpenTelemetry provider[66]Okta SSO[67]Slack notifications
   (beta)[68]Other topics [69]File and project structure[70]Developing and
   debugging[71]Modal user account
   setup[72]Workspaces[73]Environments[74]Jupyter
   notebooks[75]Asynchronous API usage[76]Global variables[77]Region
   selection[78]Container lifecycle hooks[79]Parameterized functions[80]S3
   Gateway endpoints
     __________________________________________________________________

Preemption

   All Modal Functions are subject to preemption. If a preemption event
   interrupts a running Function, Modal will gracefully terminate the
   Function and restart it on the same input.

   Preemptions are rare, but it is always possible that your Function is
   interrupted. Long-running Functions such as model training Functions
   should take particular care to tolerate interruptions, as likelihood of
   interruption increases with Function run duration.

Preparing for interruptions

   Design your applications to be fault and preemption tolerant. Modal
   will send an interrupt signal (SIGINT) to your application code when
   preemption occurs. In Python applications, this signal is by default
   propogated as a KeyboardInterrupt, which you can handle in your code to
   perform cleanup.

   Other best practices for handling preemptions include:
     * Divide long-running operations into small tasks or use checkpoints
       so that you can save your work frequently.
     * Ensure preemptible operations are safely retryable (ie.
       idempotent).

Running uninterruptible Functions

   We currently don't have a way for Functions to avoid the possibility of
   interruption, but it's a planned feature. If you require Functions
   guaranteed to run without interruption, please reach out!
   [81]Preemption [82]Preparing for interruptions [83]Running
   uninterruptible Functions
   Modal logo Â© 2024
   [84]About [85]Status [86]Changelog [87]Documentation [88]Slack
   Community [89]Pricing [90]Examples

