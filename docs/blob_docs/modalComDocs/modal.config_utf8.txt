Page: modal.com_files/modal.com/docs/reference/modal.config.html
----------------------------------------
   [1]Modal logo
   [2]Guide [3]Examples [4]Reference [5]Playground
   [6]Log In [7]Sign Up
   (BUTTON)
   [8]Changelog [9]API Reference
   [10]modal.App[11]modal.Client[12]modal.CloudBucketMount[13]modal.Cls[14
   ]modal.ContainerProcess[15]modal.Cron[16]modal.Dict[17]modal.Error[18]m
   odal.Function[19]modal.Image[20]modal.Mount[21]modal.NetworkFileSystem[
   22]modal.Period[23]modal.Proxy[24]modal.Queue[25]modal.Retries[26]modal
   .Sandbox[27]modal.Secret[28]modal.Stub[29]modal.Tunnel[30]modal.Volume[
   31]modal.asgi_app[32]modal.batched[33]modal.build[34]modal.call_graph[3
   5]modal.current_function_call_id[36]modal.current_input_id[37]modal.ena
   ble_output[38]modal.enter[39]modal.exit[40]modal.forward[41]modal.gpu[4
   2]modal.interact[43]modal.io_streams[44]modal.is_local[45]modal.method[
   46]modal.parameter[47]modal.runner[48]modal.web_endpoint[49]modal.web_s
   erver[50]modal.wsgi_app[51]modal.exception[52]modal.config [53]CLI
   Reference [54]modal app[55]modal config[56]modal container[57]modal
   deploy[58]modal dict[59]modal environment[60]modal launch[61]modal
   nfs[62]modal profile[63]modal queue[64]modal run[65]modal
   secret[66]modal serve[67]modal setup[68]modal shell[69]modal
   token[70]modal volume
     __________________________________________________________________

modal.config

   Modal intentionally keeps configurability to a minimum.

   The main configuration options are the API tokens: the token id and the
   token secret. These can be configured in two ways:
       .modal.toml file in your home directory.
       MODAL_TOKEN_SECRET. This takes precedence over the previous method.

.modal.toml

   The .modal.toml file is generally stored in your home directory. It
   should look like this::
token_id = "ak-12345..."
token_secret = "as-12345..."

   (BUTTON) Copy

   You can create this file manually, or you can run the modal token set
   ... command (see below).

Setting tokens using the CLI

   You can set a token by running the command::
modal token set \
  --token-id <token id> \
  --token-secret <token secret>

   (BUTTON) Copy

   This will write the token id and secret to .modal.toml.

   If the token id or secret is provided as the string - (a single dash),
   then it will be read in a secret way from stdin instead.

Other configuration options

   Other possible configuration options are:
     * loglevel (in the .toml file) / MODAL_LOGLEVEL (as an env var).
       Defaults to WARNING. Set this to DEBUG to see internal messages.
     * logs_timeout (in the .toml file) / MODAL_LOGS_TIMEOUT (as an env
       var). Defaults to 10. Number of seconds to wait for logs to drain
       when closing the session, before giving up.
     * automount (in the .toml file) / MODAL_AUTOMOUNT (as an env var).
       Defaults to True. By default, Modal automatically mounts modules
       imported in the current scope, that are deemed to be "local". This
       can be turned off by setting this to False.
     * force_build (in the .toml file) / MODAL_FORCE_BUILD (as an env
       var). Defaults to False. When set, ignores the Image cache and
       builds all Image layers. Note that this will break the cache for
       all images based on the rebuilt layers, so other images may rebuild
       on subsequent runs / deploys even if the config is reverted.
     * traceback (in the .toml file) / MODAL_TRACEBACK (as an env var).
       Defaults to False. Enables printing full tracebacks on unexpected
       CLI errors, which can be useful for debugging client issues.

Meta-configuration

   Some "meta-options" are set using environment variables only:
     * MODAL_CONFIG_PATH lets you override the location of the .toml file,
       by default ~/.modal.toml.
     * MODAL_PROFILE lets you use multiple sections in the .toml file and
       switch between them. It defaults to "default".

modal.config.Config

class Config(object)

   (BUTTON) Copy

   Singleton that holds configuration used by Modal internally.
def __init__(self):

   (BUTTON) Copy

get

def get(self, key, profile=None, use_env=True):

   (BUTTON) Copy

   Looks up a configuration value.

   Will check (in decreasing order of priority):
       True)

override_locally

def override_locally(self, key: str, value: str):
    # Override setting in this process by overriding environment variable for th
e setting
    #
    # Does NOT write back to settings file etc.

   (BUTTON) Copy

to_dict

def to_dict(self):

   (BUTTON) Copy

modal.config.config_profiles

def config_profiles():

   (BUTTON) Copy

   List the available modal profiles in the .modal.toml file.

modal.config.config_set_active_profile

def config_set_active_profile(env: str) -> None:

   (BUTTON) Copy

   Set the user's active modal profile by writing it to the .modal.toml
   file.
   [71]modal.config [72].modal.toml [73]Setting tokens using the CLI
   [74]Other configuration options [75]Meta-configuration
   [76]modal.config.Config [77]get [78]override_locally [79]to_dict
   [80]modal.config.config_profiles
   [81]modal.config.config_set_active_profile
   Modal logo Â© 2024
   [82]About [83]Status [84]Changelog [85]Documentation [86]Slack
   Community [87]Pricing [88]Examples

