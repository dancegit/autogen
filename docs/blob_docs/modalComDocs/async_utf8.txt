Page: modal.com_files/modal.com/docs/guide/async.html
----------------------------------------
   [1]Modal logo
   [2]Guide [3]Examples [4]Reference [5]Playground
   [6]Log In [7]Sign Up
   (BUTTON)
   [8]Introduction[9]Custom container images [10]Custom
   containers[11]Private registries[12]GPUs and other resources [13]GPU
   acceleration[14]Using CUDA on Modal[15]Reserving CPU and
   memory[16]Scaling out [17]Scaling out[18]Dicts and queues[19]Job
   processing[20]Concurrent inputs on a single container (beta)[21]Dynamic
   batching (beta)[22]Scheduling and cron jobs[23]Deployment [24]Apps,
   Stubs, and entrypoints[25]Managing deployments[26]Invoke deployed
   functions[27]Continuous deployment[28]Secrets and environment variables
   [29]Secrets[30]Environment variables[31]Web endpoints [32]Web
   endpoints[33]Streaming endpoints[34]Web endpoint URLs[35]Request
   timeouts[36]Networking [37]Tunnels (beta)[38]Proxies (beta)[39]Data
   sharing and storage [40]Passing local data[41]Volumes[42]Mounting local
   files and directories[43]Storing model weights[44]Dataset
   ingestion[45]Cloud bucket mounts[46]Network file systems
   (superseded)[47]Sandboxes [48]Sandboxes[49]Running
   commands[50]Networking and security[51]File access[52]Performance
   [53]Cold start performance[54]Memory Snapshot (beta)[55]Geographic
   latency[56]Reliability and robustness [57]Failures and
   retries[58]Preemption[59]Timeouts[60]Troubleshooting[61]Security and
   privacy[62]Integrations [63]Connecting Modal to your Vercel
   account[64]Connecting Modal to your Datadog account[65]Connecting Modal
   to your OpenTelemetry provider[66]Okta SSO[67]Slack notifications
   (beta)[68]Other topics [69]File and project structure[70]Developing and
   debugging[71]Modal user account
   setup[72]Workspaces[73]Environments[74]Jupyter
   notebooks[75]Asynchronous API usage[76]Global variables[77]Region
   selection[78]Container lifecycle hooks[79]Parameterized functions[80]S3
   Gateway endpoints
     __________________________________________________________________

Asynchronous API usage

   All of the functions in Modal are available in both standard (blocking)
   and asynchronous variants. The async interface can be accessed by
   appending .aio to any function in the Modal API.

   For example, instead of my_modal_funcion.remote("hello") in a blocking
   context, you can use await my_modal_function.remote.aio("hello") to get
   an asynchronous coroutine response, for use with Python's asyncio
   library.
import asyncio
import modal

app = modal.App()


@app.function()
async def myfunc():
    ...


@app.local_entrypoint()
async def main():
    # execute 100 remote calls to myfunc in parallel
    await asyncio.gather(*[myfunc.remote.aio() for i in range(100)])

   (BUTTON) Copy

   This is an advanced feature. If you are comfortable with asynchronous
   programming, you can use this to create arbitrary parallel execution
   patterns, with the added benefit that any Modal functions will be
   executed remotely.

Async functions

   Regardless if you use an async runtime (like asyncio) in your usage of
   Modal itself, you are free to define your app.function-decorated
   function bodies as either async or blocking. Both kinds of definitions
   will work for remote Modal function calls from both any context.

   An async function can call a blocking function, and vice versa.
@app.function()
def blocking_function():
    return 42


@app.function()
async def async_function():
    x = await blocking_function.remote.aio()
    return x * 10


@app.local_entrypoint()
def blocking_main():
    print(async_function.remote())  # => 420

   (BUTTON) Copy

   If a function is configured to support multiple concurrent inputs per
   container, the behavior varies slightly between blocking and async
   contexts:
     * In a blocking context, concurrent inputs will run on separate
       Python threads. These are subject to the GIL, but they can still
       lead to race conditions if used with non-threadsafe objects.
     * In an async context, concurrent inputs are simply scheduled as
       coroutines on the executor thread. Everything remains
       single-threaded.

   [81]Asynchronous API usage [82]Async functions
   Modal logo Â© 2024
   [83]About [84]Status [85]Changelog [86]Documentation [87]Slack
   Community [88]Pricing [89]Examples

