Page: modal.com_files/modal.com/docs/guide/webhook-urls.html
----------------------------------------
   [1]Modal logo
   [2]Guide [3]Examples [4]Reference [5]Playground
   [6]Log In [7]Sign Up
   (BUTTON)
   [8]Introduction[9]Custom container images [10]Custom
   containers[11]Private registries[12]GPUs and other resources [13]GPU
   acceleration[14]Using CUDA on Modal[15]Reserving CPU and
   memory[16]Scaling out [17]Scaling out[18]Dicts and queues[19]Job
   processing[20]Concurrent inputs on a single container (beta)[21]Dynamic
   batching (beta)[22]Scheduling and cron jobs[23]Deployment [24]Apps,
   Stubs, and entrypoints[25]Managing deployments[26]Invoke deployed
   functions[27]Continuous deployment[28]Secrets and environment variables
   [29]Secrets[30]Environment variables[31]Web endpoints [32]Web
   endpoints[33]Streaming endpoints[34]Web endpoint URLs[35]Request
   timeouts[36]Networking [37]Tunnels (beta)[38]Proxies (beta)[39]Data
   sharing and storage [40]Passing local data[41]Volumes[42]Mounting local
   files and directories[43]Storing model weights[44]Dataset
   ingestion[45]Cloud bucket mounts[46]Network file systems
   (superseded)[47]Sandboxes [48]Sandboxes[49]Running
   commands[50]Networking and security[51]File access[52]Performance
   [53]Cold start performance[54]Memory Snapshot (beta)[55]Geographic
   latency[56]Reliability and robustness [57]Failures and
   retries[58]Preemption[59]Timeouts[60]Troubleshooting[61]Security and
   privacy[62]Integrations [63]Connecting Modal to your Vercel
   account[64]Connecting Modal to your Datadog account[65]Connecting Modal
   to your OpenTelemetry provider[66]Okta SSO[67]Slack notifications
   (beta)[68]Other topics [69]File and project structure[70]Developing and
   debugging[71]Modal user account
   setup[72]Workspaces[73]Environments[74]Jupyter
   notebooks[75]Asynchronous API usage[76]Global variables[77]Region
   selection[78]Container lifecycle hooks[79]Parameterized functions[80]S3
   Gateway endpoints
     __________________________________________________________________

Web endpoint URLs

   Modal will automatically assign URLs for webhooks, but this can be
   configured in several different ways.

Auto-generated URLs

   By default, webhooks created by the [81]web_endpoint, [82]asgi_app or
   [83]wsgi_app decorators will be served from the modal.run domain. The
   full URL will be constructed from a number of pieces of information to
   uniquely identify the endpoint.

   At a high-level, web endpoint URLs for deployed applications have the
   following structure: https://<source>--<label>.modal.run.

   The source component represents the workspace and environment where the
   App is deployed. If your workspace has only a single environment, the
   source will just be the workspace name. Multiple environments are
   disambiguated by an [84]"environment suffix", so the full source would
   be <workspace>-<suffix>. However, one environment per workspace is
   allowed to have a null suffix, in which case the source would just be
   <workspace>.

   The label component represents the specific App and Function that the
   endpoint routes to. By default, these are concatenated with a hyphen,
   so the label would be <app>-<function>.

   These components are normalized to contain only lowercase letters,
   numerals, and dashes.

   To put this all together, consider the following example. If a member
   of the ECorp workspace uses the main environment (which has prod as its
   web suffix) to deploy the text_to_speech app with a webhook for the
   flask-app function, the URL will have the following components:
     * Source:
          + Workspace name slug: ECorp -> ecorp
          + Environment web suffix slug: main -> prod
     * Label:
          + App name slug: text_to_speech -> text-to-speech
          + Function name slug: flask_app -> flask-app

   The full URL will be
   https://ecorp-prod--text-to-speech-flask-app.modal.run.

User-specified labels

   It's also possible to customize the label used for each Function by
   passing a parameter to the relevant endpoint decorator:
import modal

image = modal.Image.debian_slim().pip_install("fastapi")
app = modal.App(name="text_to_speech", image=image)


@app.function()
@modal.web_endpoint(label="speechify")
def web_endpoint_handler():
    ...

   (BUTTON) Copy

   Building on the example above, this code would produce the following
   URL: https://ecorp-prod--speechify.modal.run.

   User-specified labels are not automatically normalized, but labels with
   invalid characters will be rejected.

Ephemeral apps

   To support development workflows, webhooks for ephemeral apps (i.e.,
   apps created with modal serve) will have a -dev suffix appended to
   their URL label (regardless of whether the label is auto-generated or
   user-specified). This prevents development work from interfering with
   deployed versions of the same app.

   If an emphemeral app is serving a webhook while another ephemeral
   webhook is created seeking the same web endpoint label, the new
   function will steal the running webhook's label.

   This ensures that the latest iteration of the ephemeral function is
   serving requests and that older ones stop recieving web traffic.

Truncation

   If a generated subdomain label is longer than 63 characters, it will be
   truncated.

   For example, the following subdomain label is too long, 67 characters:
   ecorp--text-to-speech-really-really-realllly-long-function-name-dev.

   The truncation happens by calculating a SHA-256 hash of the overlong
   label, then taking the first 6 characters of this hash. The overlong
   subdomain label is truncated to 56 characters, and then joined by a
   dash to the hash prefix. In the above example, the resulting URL would
   be ecorp--text-to-speech-really-really-rea-1b964b-dev.modal.run.

   The combination of the label hashing and truncation provides a unique
   list of 63 characters, complying with both DNS system limits and
   uniqueness requirements.

Custom domains

   Custom domains are available on our [85]Team and Enterprise plans.

   For more customization, you can use your own domain names with Modal
   web endpoints. If your [86]plan supports custom domains, visit the
   [87]Domains tab in your workspace settings to add a domain name to your
   workspace.

   You can use three kinds of domains with Modal:
     * Apex: root domain names like example.com
     * Subdomain: single subdomain entries such as my-app.example.com,
       api.example.com, etc.
     * Wildcard domain: either in a subdomain like *.example.com, or in a
       deeper level like *.modal.example.com

   You'll be asked to update your domain DNS records with your domain name
   registrar and then validate the configuration in Modal. Once the
   records have been properly updated and propagated, your custom domain
   will be ready to use.

   You can assign any Modal web endpoint to any registered domain in your
   workspace with the custom_domains argument.
import modal

app = modal.App("custom-domains-example")


@app.function()
@modal.web_endpoint(custom_domains=["api.example.com"])
def hello(message: str):
    return {"message": f"hello {message}"}

   (BUTTON) Copy

   You can then run modal deploy to put your web endpoint online, live.
$ curl -s https://api.example.com?message=world
{"message": "hello world"}

   (BUTTON) Copy

   Note that Modal automatically generates and renews TLS certificates for
   your custom domains. Since we do this when your domain is first
   accessed, there may be an additional 1-2s latency on the first request.
   Additional requests use a cached certificate.

   You can also register multiple domain names and associate them with the
   same web endpoint.
import modal

app = modal.App("custom-domains-example-2")


@app.function()
@modal.web_endpoint(custom_domains=["api.example.com", "api.example.net"])
def hello(message: str):
    return {"message": f"hello {message}"}

   (BUTTON) Copy

   For Wildcard domains, Modal will automatically resolve arbitrary custom
   endpoints (and issue TLS certificates). For example, if you add the
   wildcard domain *.example.com, then you can create any custom domains
   under example.com:
import random
import modal

app = modal.App("custom-domains-example-2")

random_domain_name = random.choice(range(10))


@app.function()
@modal.web_endpoint(custom_domains=[f"{random_domain_name}.example.com"])
def hello(message: str):
    return {"message": f"hello {message}"}

   (BUTTON) Copy

   Custom domains can also be used with [88]ASGI or [89]WSGI apps using
   the same custom_domains argument.
   [90]Web endpoint URLs [91]Auto-generated URLs [92]User-specified labels
   [93]Ephemeral apps [94]Truncation [95]Custom domains
   See it in action
   [96]Custom URL for LLM frontend
   Modal logo Â© 2024
   [97]About [98]Status [99]Changelog [100]Documentation [101]Slack
   Community [102]Pricing [103]Examples

