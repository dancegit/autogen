Page: modal.com_files/modal.com/docs/guide/sandbox-networking.html
----------------------------------------
   [1]Modal logo
   [2]Guide [3]Examples [4]Reference [5]Playground
   [6]Log In [7]Sign Up
   (BUTTON)
   [8]Introduction[9]Custom container images [10]Custom
   containers[11]Private registries[12]GPUs and other resources [13]GPU
   acceleration[14]Using CUDA on Modal[15]Reserving CPU and
   memory[16]Scaling out [17]Scaling out[18]Dicts and queues[19]Job
   processing[20]Concurrent inputs on a single container (beta)[21]Dynamic
   batching (beta)[22]Scheduling and cron jobs[23]Deployment [24]Apps,
   Stubs, and entrypoints[25]Managing deployments[26]Invoke deployed
   functions[27]Continuous deployment[28]Secrets and environment variables
   [29]Secrets[30]Environment variables[31]Web endpoints [32]Web
   endpoints[33]Streaming endpoints[34]Web endpoint URLs[35]Request
   timeouts[36]Networking [37]Tunnels (beta)[38]Proxies (beta)[39]Data
   sharing and storage [40]Passing local data[41]Volumes[42]Mounting local
   files and directories[43]Storing model weights[44]Dataset
   ingestion[45]Cloud bucket mounts[46]Network file systems
   (superseded)[47]Sandboxes [48]Sandboxes[49]Running
   commands[50]Networking and security[51]File access[52]Performance
   [53]Cold start performance[54]Memory Snapshot (beta)[55]Geographic
   latency[56]Reliability and robustness [57]Failures and
   retries[58]Preemption[59]Timeouts[60]Troubleshooting[61]Security and
   privacy[62]Integrations [63]Connecting Modal to your Vercel
   account[64]Connecting Modal to your Datadog account[65]Connecting Modal
   to your OpenTelemetry provider[66]Okta SSO[67]Slack notifications
   (beta)[68]Other topics [69]File and project structure[70]Developing and
   debugging[71]Modal user account
   setup[72]Workspaces[73]Environments[74]Jupyter
   notebooks[75]Asynchronous API usage[76]Global variables[77]Region
   selection[78]Container lifecycle hooks[79]Parameterized functions[80]S3
   Gateway endpoints
     __________________________________________________________________

Networking and security

   Sandboxes are built to be secure-by-default, meaning that a default
   Sandbox has no ability to accept incoming network connections or access
   your Modal resources.

Networking

   Since Sandboxes may run untrusted code, they have options to restrict
   their network access. To block all network access, set
   block_network=True on [81]Sandbox.create.

   For more fine-grained networking control, a Sandbox's outbound network
   access can be restricted using the cidr_allowlist parameter. This
   parameter takes a list of CIDR ranges that the Sandbox is allowed to
   access, blocking all other outbound traffic.

Forwarding ports

   Sandboxes can also expose TCP ports to the internet. This is useful if,
   for example, you want to connect to a web server running inside a
   Sandbox.

   Use the encrypted_ports and unencrypted_ports parameters of
   Sandbox.create to specify which ports to forward. You can then access
   the public URL of a tunnel using the [82]Sandbox.tunnels method:
import requests
import time

sb = modal.Sandbox.create(
    "python",
    "-m",
    "http.server",
    "12345",
    encrypted_ports=[12345],
    app=my_app,
)

tunnel = sb.tunnels()[12345]

time.sleep(1)  # Wait for server to start.

print(f"Connecting to {tunnel.url}...")
print(requests.get(tunnel.url, timeout=5).text)

   (BUTTON) Copy

   For more details on how tunnels work, see the [83]tunnels guide.

Security model

   In a typical Modal Function, the Function code can call other Modal
   APIs allowing it to spawn containers, create and destroy Volumes, read
   from Dicts and Queues, etc. Sandboxes, by contrast, are isolated from
   the main Modal workspace. They have no API access, meaning the blast
   radius of any malicious code is limited to the Sandbox environment.

   Sandboxes are built on top of [84]gVisor, a container runtime by Google
   that provides strong isolation properties. gVisor has custom logic to
   prevent Sandboxes from making malicious system calls, giving you
   stronger isolation than standard [85]runc containers.
   [86]Networking and security [87]Networking [88]Forwarding ports
   [89]Security model
   See it in action
   [90]Running a Jupyter notebook
   [91]Safe code execution
   Modal logo Â© 2024
   [92]About [93]Status [94]Changelog [95]Documentation [96]Slack
   Community [97]Pricing [98]Examples

