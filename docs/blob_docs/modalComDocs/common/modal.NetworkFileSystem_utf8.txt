Page: modal.com_files/modal.com/docs/reference/modal.NetworkFileSystem.html
----------------------------------------
   [1]Modal logo
   [2]Guide [3]Examples [4]Reference [5]Playground
   [6]Log In [7]Sign Up
   (BUTTON)
   [8]Changelog [9]API Reference
   [10]modal.App[11]modal.Client[12]modal.CloudBucketMount[13]modal.Cls[14
   ]modal.ContainerProcess[15]modal.Cron[16]modal.Dict[17]modal.Error[18]m
   odal.Function[19]modal.Image[20]modal.Mount[21]modal.NetworkFileSystem[
   22]modal.Period[23]modal.Proxy[24]modal.Queue[25]modal.Retries[26]modal
   .Sandbox[27]modal.Secret[28]modal.Stub[29]modal.Tunnel[30]modal.Volume[
   31]modal.asgi_app[32]modal.batched[33]modal.build[34]modal.call_graph[3
   5]modal.current_function_call_id[36]modal.current_input_id[37]modal.ena
   ble_output[38]modal.enter[39]modal.exit[40]modal.forward[41]modal.gpu[4
   2]modal.interact[43]modal.io_streams[44]modal.is_local[45]modal.method[
   46]modal.parameter[47]modal.runner[48]modal.web_endpoint[49]modal.web_s
   erver[50]modal.wsgi_app[51]modal.exception[52]modal.config [53]CLI
   Reference [54]modal app[55]modal config[56]modal container[57]modal
   deploy[58]modal dict[59]modal environment[60]modal launch[61]modal
   nfs[62]modal profile[63]modal queue[64]modal run[65]modal
   secret[66]modal serve[67]modal setup[68]modal shell[69]modal
   token[70]modal volume
     __________________________________________________________________

modal.NetworkFileSystem

class NetworkFileSystem(modal.object.Object)

   (BUTTON) Copy

   A shared, writable file system accessible by one or more Modal
   functions.

   By attaching this file system as a mount to one or more functions, they
   can share and persist data with each other.

   Usage
import modal

nfs = modal.NetworkFileSystem.from_name("my-nfs", create_if_missing=True)
app = modal.App()

@app.function(network_file_systems={"/root/foo": nfs})
def f():
    pass

@app.function(network_file_systems={"/root/goo": nfs})
def g():
    pass

   (BUTTON) Copy

   Also see the CLI methods for accessing network file systems:
modal nfs --help

   (BUTTON) Copy

   A NetworkFileSystem can also be useful for some local scripting
   scenarios, e.g.:
nfs = modal.NetworkFileSystem.lookup("my-network-file-system")
for chunk in nfs.read_file("my_db_dump.csv"):
    ...

   (BUTTON) Copy
def __init__(self, *args, **kwargs):

   (BUTTON) Copy

from_name

@staticmethod
def from_name(
    label: str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name: Optional[str] = None,
    create_if_missing: bool = False,
) -> "_NetworkFileSystem":

   (BUTTON) Copy

   Reference a NetworkFileSystem by its name, creating if necessary.

   In contrast to modal.NetworkFileSystem.lookup, this is a lazy method
   that defers hydrating the local object with metadata from Modal servers
   until the first time it is actually used.
nfs = NetworkFileSystem.from_name("my-nfs", create_if_missing=True)

@app.function(network_file_systems={"/data": nfs})
def f():
    pass

   (BUTTON) Copy

ephemeral

@classmethod
@contextmanager
def ephemeral(
    cls: Type["_NetworkFileSystem"],
    client: Optional[_Client] = None,
    environment_name: Optional[str] = None,
    _heartbeat_sleep: float = EPHEMERAL_OBJECT_HEARTBEAT_SLEEP,
) -> Iterator["_NetworkFileSystem"]:

   (BUTTON) Copy

   Creates a new ephemeral network filesystem within a context manager:

   Usage:
with NetworkFileSystem.ephemeral() as nfs:
    assert nfs.listdir() == []

async with NetworkFileSystem.ephemeral() as nfs:
    assert await nfs.listdir() == []

   (BUTTON) Copy

lookup

@staticmethod
def lookup(
    label: str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client: Optional[_Client] = None,
    environment_name: Optional[str] = None,
    create_if_missing: bool = False,
) -> "_NetworkFileSystem":

   (BUTTON) Copy

   Lookup a named NetworkFileSystem.

   In contrast to modal.NetworkFileSystem.from_name, this is an eager
   method that will hydrate the local object with metadata from Modal
   servers.
nfs = modal.NetworkFileSystem.lookup("my-nfs")
print(nfs.listdir("/"))

   (BUTTON) Copy

write_file

@live_method
def write_file(self, remote_path: str, fp: BinaryIO, progress_cb: Optional[Calla
ble[..., Any]] = None) -> int:

   (BUTTON) Copy

   Write from a file object to a path on the network file system,
   atomically.

   Will create any needed parent directories automatically.

   If remote_path ends with / it's assumed to be a directory and the file
   will be uploaded with its current name to that directory.

read_file

@live_method_gen
def read_file(self, path: str) -> Iterator[bytes]:

   (BUTTON) Copy

   Read a file from the network file system

iterdir

@live_method_gen
def iterdir(self, path: str) -> Iterator[FileEntry]:

   (BUTTON) Copy

   Iterate over all files in a directory in the network file system.
     * Passing a directory path lists all files in the directory (names
       are relative to the directory)
     * Passing a file path returns a list containing only that file's
       listing description
     * Passing a glob path (including at least one * or ** sequence)
       returns all files matching that glob path (using absolute paths)

add_local_file

@live_method
def add_local_file(
    self,
    local_path: Union[Path, str],
    remote_path: Optional[Union[str, PurePosixPath, None]] = None,
    progress_cb: Optional[Callable[..., Any]] = None,
):

   (BUTTON) Copy

add_local_dir

@live_method
def add_local_dir(
    self,
    local_path: Union[Path, str],
    remote_path: Optional[Union[str, PurePosixPath, None]] = None,
    progress_cb: Optional[Callable[..., Any]] = None,
):

   (BUTTON) Copy

listdir

@live_method
def listdir(self, path: str) -> List[FileEntry]:

   (BUTTON) Copy

   List all files in a directory in the network file system.
     * Passing a directory path lists all files in the directory (names
       are relative to the directory)
     * Passing a file path returns a list containing only that file's
       listing description
     * Passing a glob path (including at least one * or ** sequence)
       returns all files matching that glob path (using absolute paths)

remove_file

@live_method
def remove_file(self, path: str, recursive=False):

   (BUTTON) Copy

   Remove a file in a network file system.
   [71]modal.NetworkFileSystem [72]from_name [73]ephemeral [74]lookup
   [75]write_file [76]read_file [77]iterdir [78]add_local_file
   [79]add_local_dir [80]listdir [81]remove_file
   Modal logo Â© 2024
   [82]About [83]Status [84]Changelog [85]Documentation [86]Slack
   Community [87]Pricing [88]Examples

