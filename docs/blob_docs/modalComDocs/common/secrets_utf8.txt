Page: modal.com_files/modal.com/docs/guide/secrets.html
----------------------------------------
   [1]Modal logo
   [2]Guide [3]Examples [4]Reference [5]Playground
   [6]Log In [7]Sign Up
   (BUTTON)
   [8]Introduction[9]Custom container images [10]Custom
   containers[11]Private registries[12]GPUs and other resources [13]GPU
   acceleration[14]Using CUDA on Modal[15]Reserving CPU and
   memory[16]Scaling out [17]Scaling out[18]Dicts and queues[19]Job
   processing[20]Concurrent inputs on a single container (beta)[21]Dynamic
   batching (beta)[22]Scheduling and cron jobs[23]Deployment [24]Apps,
   Stubs, and entrypoints[25]Managing deployments[26]Invoke deployed
   functions[27]Continuous deployment[28]Secrets and environment variables
   [29]Secrets[30]Environment variables[31]Web endpoints [32]Web
   endpoints[33]Streaming endpoints[34]Web endpoint URLs[35]Request
   timeouts[36]Networking [37]Tunnels (beta)[38]Proxies (beta)[39]Data
   sharing and storage [40]Passing local data[41]Volumes[42]Mounting local
   files and directories[43]Storing model weights[44]Dataset
   ingestion[45]Cloud bucket mounts[46]Network file systems
   (superseded)[47]Sandboxes [48]Sandboxes[49]Running
   commands[50]Networking and security[51]File access[52]Performance
   [53]Cold start performance[54]Memory Snapshot (beta)[55]Geographic
   latency[56]Reliability and robustness [57]Failures and
   retries[58]Preemption[59]Timeouts[60]Troubleshooting[61]Security and
   privacy[62]Integrations [63]Connecting Modal to your Vercel
   account[64]Connecting Modal to your Datadog account[65]Connecting Modal
   to your OpenTelemetry provider[66]Okta SSO[67]Slack notifications
   (beta)[68]Other topics [69]File and project structure[70]Developing and
   debugging[71]Modal user account
   setup[72]Workspaces[73]Environments[74]Jupyter
   notebooks[75]Asynchronous API usage[76]Global variables[77]Region
   selection[78]Container lifecycle hooks[79]Parameterized functions[80]S3
   Gateway endpoints
     __________________________________________________________________

Secrets

   Secrets provide a dictionary of environment variables for images.

   Secrets are a secure way to add credentials and other sensitive
   information to the containers your functions run in. You can create and
   edit secrets on [81]the dashboard, or programmatically from Python
   code.

Using secrets

   To inject Secrets into the container running your function, you add the
   secrets=[...] argument to your app.function annotation. For deployed
   Secrets (typically created via the Modal dashboard) you can refer to
   those using Secret.from_name(secret_name).

   For example, if you have a Secret called secret-keys containing the key
   MY_PASSWORD:
import os
import modal

app = modal.App()


@app.function(secrets=[modal.Secret.from_name("secret-keys")])
def some_function():
    secret_key = os.environ["MY_PASSWORD"]
    ...

   (BUTTON) Copy

   Each Secret can contain multiple keys and values but you can also
   inject multiple Secrets, allowing you to separate Secrets into smaller
   reusable units:
@app.function(secrets=[
    modal.Secret.from_name("my-secret-name"),
    modal.Secret.from_name("other-secret"),
])
def other_function():
    ...

   (BUTTON) Copy

   The Secrets are applied in order, so key-values from later modal.Secret
   objects in the list will overwrite earlier key-values in the case of a
   clash. For example, if both modal.Secret objects above contained the
   key FOO, then the value from "other-secret" would always be present in
   os.environ["FOO"].

Programmatic creation of secrets

   In addition to defining Secrets on the Modal web dashboard, you can
   programmatically create a Secret directly in your script and send it
   along to your function using Secret.from_dict(...). This can be useful
   if you want to send Secrets from your local development machine to the
   remote Modal app.
import os
import modal

app = modal.App()

if modal.is_local():
    local_secret = modal.Secret.from_dict({"FOO": os.environ["LOCAL_FOO"]})
else:
    local_secret = modal.Secret.from_dict({})


@app.function(secrets=[local_secret])
def some_function():
    print(os.environ["FOO"])

   (BUTTON) Copy

   You can also use Secret.from_dotenv() to load any secrets defined in an
   .env file:
@app.function(secrets=[modal.Secret.from_dotenv()])
def some_other_function():
    print(os.environ["USERNAME"])

   (BUTTON) Copy
   [82]Secrets [83]Using secrets [84]Programmatic creation of secrets
   See it in action
   [85]OpenAI secret for LangChain RAG
   [86]HuggingFace access token for gated models
   [87]Write to Google Sheets
   Modal logo Â© 2024
   [88]About [89]Status [90]Changelog [91]Documentation [92]Slack
   Community [93]Pricing [94]Examples

