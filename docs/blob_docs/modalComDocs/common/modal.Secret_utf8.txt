Page: modal.com_files/modal.com/docs/reference/modal.Secret.html
----------------------------------------
   [1]Modal logo
   [2]Guide [3]Examples [4]Reference [5]Playground
   [6]Log In [7]Sign Up
   (BUTTON)
   [8]Changelog [9]API Reference
   [10]modal.App[11]modal.Client[12]modal.CloudBucketMount[13]modal.Cls[14
   ]modal.ContainerProcess[15]modal.Cron[16]modal.Dict[17]modal.Error[18]m
   odal.Function[19]modal.Image[20]modal.Mount[21]modal.NetworkFileSystem[
   22]modal.Period[23]modal.Proxy[24]modal.Queue[25]modal.Retries[26]modal
   .Sandbox[27]modal.Secret[28]modal.Stub[29]modal.Tunnel[30]modal.Volume[
   31]modal.asgi_app[32]modal.batched[33]modal.build[34]modal.call_graph[3
   5]modal.current_function_call_id[36]modal.current_input_id[37]modal.ena
   ble_output[38]modal.enter[39]modal.exit[40]modal.forward[41]modal.gpu[4
   2]modal.interact[43]modal.io_streams[44]modal.is_local[45]modal.method[
   46]modal.parameter[47]modal.runner[48]modal.web_endpoint[49]modal.web_s
   erver[50]modal.wsgi_app[51]modal.exception[52]modal.config [53]CLI
   Reference [54]modal app[55]modal config[56]modal container[57]modal
   deploy[58]modal dict[59]modal environment[60]modal launch[61]modal
   nfs[62]modal profile[63]modal queue[64]modal run[65]modal
   secret[66]modal serve[67]modal setup[68]modal shell[69]modal
   token[70]modal volume
     __________________________________________________________________

modal.secret

modal.secret.Secret

class Secret(modal.object.Object)

   (BUTTON) Copy

   Secrets provide a dictionary of environment variables for images.

   Secrets are a secure way to add credentials and other sensitive
   information to the containers your functions run in. You can create and
   edit secrets on [71]the dashboard, or programmatically from Python
   code.

   See [72]the secrets guide page for more information.
def __init__(self, *args, **kwargs):

   (BUTTON) Copy

from_dict

@staticmethod
def from_dict(
    env_dict: Dict[
        str, Union[str, None]
    ] = {},  # dict of entries to be inserted as environment variables in functi
ons using the secret
):

   (BUTTON) Copy

   Create a secret from a str-str dictionary. Values can also be None,
   which is ignored.

   Usage:
@app.function(secrets=[modal.Secret.from_dict({"FOO": "bar"})])
def run():
    print(os.environ["FOO"])

   (BUTTON) Copy

from_local_environ

@staticmethod
def from_local_environ(
    env_keys: List[str],  # list of local env vars to be included for remote exe
cution
):

   (BUTTON) Copy

   Create secrets from local environment variables automatically.

from_dotenv

@staticmethod
def from_dotenv(path=None, *, filename=".env"):

   (BUTTON) Copy

   Create secrets from a .env file automatically.

   If no argument is provided, it will use the current working directory
   as the starting point for finding a .env file. Note that it does not
   use the location of the module calling Secret.from_dotenv.

   If called with an argument, it will use that as a starting point for
   finding .env files. In particular, you can call it like this:
@app.function(secrets=[modal.Secret.from_dotenv(__file__)])
def run():
    print(os.environ["USERNAME"])  # Assumes USERNAME is defined in your .env fi
le

   (BUTTON) Copy

   This will use the location of the script calling
   modal.Secret.from_dotenv as a starting point for finding the .env file.

   A file named .env is expected by default, but this can be overridden
   with the filename keyword argument:
@app.function(secrets=[modal.Secret.from_dotenv(filename=".env-dev")])
def run():
    ...

   (BUTTON) Copy

from_name

@staticmethod
def from_name(
    label: str,  # Some global identifier, such as "aws-secret"
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name: Optional[str] = None,
    required_keys: List[
        str
    ] = [],  # Optionally, a list of required environment variables (will be ass
erted server-side)
) -> "_Secret":

   (BUTTON) Copy

   Reference a Secret by its name.

   In contrast to most other Modal objects, named Secrets must be
   provisioned from the Dashboard. See other methods for alternate ways of
   creating a new Secret from code.
secret = modal.Secret.from_name("my-secret")

@app.function(secrets=[secret])
def run():
   ...

   (BUTTON) Copy
   [73]modal.secret [74]modal.secret.Secret [75]from_dict
   [76]from_local_environ [77]from_dotenv [78]from_name
   Modal logo Â© 2024
   [79]About [80]Status [81]Changelog [82]Documentation [83]Slack
   Community [84]Pricing [85]Examples

