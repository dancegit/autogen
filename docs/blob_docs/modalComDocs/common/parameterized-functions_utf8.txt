Page: modal.com_files/modal.com/docs/guide/parameterized-functions.html
----------------------------------------
   [1]Modal logo
   [2]Guide [3]Examples [4]Reference [5]Playground
   [6]Log In [7]Sign Up
   (BUTTON)
   [8]Introduction[9]Custom container images [10]Custom
   containers[11]Private registries[12]GPUs and other resources [13]GPU
   acceleration[14]Using CUDA on Modal[15]Reserving CPU and
   memory[16]Scaling out [17]Scaling out[18]Dicts and queues[19]Job
   processing[20]Concurrent inputs on a single container (beta)[21]Dynamic
   batching (beta)[22]Scheduling and cron jobs[23]Deployment [24]Apps,
   Stubs, and entrypoints[25]Managing deployments[26]Invoke deployed
   functions[27]Continuous deployment[28]Secrets and environment variables
   [29]Secrets[30]Environment variables[31]Web endpoints [32]Web
   endpoints[33]Streaming endpoints[34]Web endpoint URLs[35]Request
   timeouts[36]Networking [37]Tunnels (beta)[38]Proxies (beta)[39]Data
   sharing and storage [40]Passing local data[41]Volumes[42]Mounting local
   files and directories[43]Storing model weights[44]Dataset
   ingestion[45]Cloud bucket mounts[46]Network file systems
   (superseded)[47]Sandboxes [48]Sandboxes[49]Running
   commands[50]Networking and security[51]File access[52]Performance
   [53]Cold start performance[54]Memory Snapshot (beta)[55]Geographic
   latency[56]Reliability and robustness [57]Failures and
   retries[58]Preemption[59]Timeouts[60]Troubleshooting[61]Security and
   privacy[62]Integrations [63]Connecting Modal to your Vercel
   account[64]Connecting Modal to your Datadog account[65]Connecting Modal
   to your OpenTelemetry provider[66]Okta SSO[67]Slack notifications
   (beta)[68]Other topics [69]File and project structure[70]Developing and
   debugging[71]Modal user account
   setup[72]Workspaces[73]Environments[74]Jupyter
   notebooks[75]Asynchronous API usage[76]Global variables[77]Region
   selection[78]Container lifecycle hooks[79]Parameterized functions[80]S3
   Gateway endpoints
     __________________________________________________________________

Parameterized functions

   A single Modal function can be parameterized by a set of arguments, so
   that each unique combination of arguments will behave like an
   individual Modal function with its own auto-scaling and lifecycle
   logic.

   For example, you might want to have a separate pool of containers for
   each unique user that invokes your function. In this scenario, you
   would parameterize your function by a user ID.

   To parameterize a Modal function, you need to use Modal's class syntax
   and the [81]@app.cls decorator. Specifically, you'll need to:
       previously had for @app.function(...) or your [82]web endpoint
       decorator.
       function, replace it with @modal.method().
       modal.parameter() and optionally set default values:

import modal

app = modal.App()

@app.cls()
class MyClass:

    foo: str = modal.parameter()
    bar: int = modal.parameter(default=10)

    @modal.method()
    def baz(self, qux: str = "default") -> str:
        return f"This code is running in container pool ({self.foo}, {self.bar})
, with input qux={qux}"

   (BUTTON) Copy

   The parameters create a keyword-only constructor for your class, and
   the methods can be called as follows:
@app.local_entrypoint()
def main():
    m1 = MyClass(foo="hedgehog", bar=7)
    m1.baz.remote()

    m2 = MyClass(foo="fox")
    m2.baz.remote(qux="override")

   (BUTTON) Copy

   Function calls for each unique combination of values for foo and bar
   will run in their own separate container pools. If you re-constructed a
   MyClass with the same arguments in a different context, the calls to
   baz would be routed to the same set of containers as before.

   Some things to note:
     * The total size of the arguments is limited to 16 KiB.
     * Modal classes can still annotate typed of regular class attributes,
       which are independent of parameterization, by either omitting =
       modal.parameter() or using = modal.parameter(init=False) to satisfy
       type checkers.
     * Only int and str types for parameters are supported. Support for
       other types will be added in the future. If you need to pass a
       different type of argument, you can use the legacy method of
       specifying parameters, via __init__ and optional type hints:

@app.cls()
class MyClass:

    def __init__(self, foo, bar: float = 10.3) -> None:
        self.foo = foo
        self.bar = bar

    @modal.method()
    def baz(self, qux: str = "default") -> str:
        ...

   (BUTTON) Copy

   This legacy method will not work with [83]parameterized web endpoints.

Looking up a parameterized function

   If you want to call your parameterized function from a Python script
   running anywhere, you can use Cls.lookup:
import modal

MyClass = modal.Cls.lookup("parameterized-function-app", "MyClass")  # returns a
 class-like object
m = MyClass(foo="snake", bar=12)
m.baz.remote()

   (BUTTON) Copy

Parameterized web endpoints

   Modal [84]web endpoints can also be parameterized by passing the
   arguments as URL query parameter values.

   Given the same example as above but with a web endpoint:
@app.cls()
class MyClass():

    foo: str = modal.parameter()
    bar: int = modal.parameter(default=10)

    @modal.web_endpoint()
    def baz(self, qux: str = "default") -> str:
        ...

   (BUTTON) Copy

   Here are some cURL commands that would work:
curl "https://parameterized-function-app.modal.run?foo=hedgehog&bar=7&qux=overri
de"
curl "https://parameterized-function-app.modal.run?foo=hedgehog&qux=override"
curl "https://parameterized-function-app.modal.run?foo=hedgehog&bar=7"
curl "https://parameterized-function-app.modal.run?foo=hedgehog"

   (BUTTON) Copy

Using parameterized functions with lifecycle functions

   Parameterized functions can be used with [85]lifecycle functions. For
   example, here is how you might parameterize the [86]@enter lifecycle
   function to load a specific model:
import modal

app = modal.App()

@app.cls()
class Model:

    name: str = modal.parameter()
    size: int = modal.parameter(default=100)

    @modal.enter()
    def load_model(self):
        print(f"Loading model {self.name} with size {self.size}")
        self.model = load_model_util(self.name, self.size)

    @modal.method()
    def generate(self, prompt: str) -> str:
        return self.model.generate(prompt)

   (BUTTON) Copy
   [87]Parameterized functions [88]Looking up a parameterized function
   [89]Parameterized web endpoints [90]Using parameterized functions with
   lifecycle functions
   Modal logo Â© 2024
   [91]About [92]Status [93]Changelog [94]Documentation [95]Slack
   Community [96]Pricing [97]Examples

