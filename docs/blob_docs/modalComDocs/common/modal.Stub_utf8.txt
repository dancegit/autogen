Page: modal.com_files/modal.com/docs/reference/modal.Stub.html
----------------------------------------
   [1]Modal logo
   [2]Guide [3]Examples [4]Reference [5]Playground
   [6]Log In [7]Sign Up
   (BUTTON)
   [8]Changelog [9]API Reference
   [10]modal.App[11]modal.Client[12]modal.CloudBucketMount[13]modal.Cls[14
   ]modal.ContainerProcess[15]modal.Cron[16]modal.Dict[17]modal.Error[18]m
   odal.Function[19]modal.Image[20]modal.Mount[21]modal.NetworkFileSystem[
   22]modal.Period[23]modal.Proxy[24]modal.Queue[25]modal.Retries[26]modal
   .Sandbox[27]modal.Secret[28]modal.Stub[29]modal.Tunnel[30]modal.Volume[
   31]modal.asgi_app[32]modal.batched[33]modal.build[34]modal.call_graph[3
   5]modal.current_function_call_id[36]modal.current_input_id[37]modal.ena
   ble_output[38]modal.enter[39]modal.exit[40]modal.forward[41]modal.gpu[4
   2]modal.interact[43]modal.io_streams[44]modal.is_local[45]modal.method[
   46]modal.parameter[47]modal.runner[48]modal.web_endpoint[49]modal.web_s
   erver[50]modal.wsgi_app[51]modal.exception[52]modal.config [53]CLI
   Reference [54]modal app[55]modal config[56]modal container[57]modal
   deploy[58]modal dict[59]modal environment[60]modal launch[61]modal
   nfs[62]modal profile[63]modal queue[64]modal run[65]modal
   secret[66]modal serve[67]modal setup[68]modal shell[69]modal
   token[70]modal volume
     __________________________________________________________________

modal.Stub

class Stub(modal.app.App)

   (BUTTON) Copy

   This enables using an "Stub" class instead of "App".

   For most of Modal's history, the app class was called "Stub", so this
   exists for backwards compatibility, in order to facilitate moving from
   "Stub" to "App".
def __init__(
    self,
    name: Optional[str] = None,
    *,
    image: Optional[_Image] = None,  # default image for all functions (default
is `modal.Image.debian_slim()`)
    mounts: Sequence[_Mount] = [],  # default mounts for all functions
    secrets: Sequence[_Secret] = [],  # default secrets for all functions
    volumes: Dict[Union[str, PurePosixPath], _Volume] = {},  # default volumes f
or all functions
) -> None:

   (BUTTON) Copy

   Construct a new app, optionally with default image, mounts, secrets, or
   volumes.
image = modal.Image.debian_slim().pip_install(...)
mount = modal.Mount.from_local_dir("./config")
secret = modal.Secret.from_name("my-secret")
volume = modal.Volume.from_name("my-data")
app = modal.App(image=image, mounts=[mount], secrets=[secret], volumes={"/mnt/da
ta": volume})

   (BUTTON) Copy

name

@property
def name(self) -> Optional[str]:

   (BUTTON) Copy

   The user-provided name of the App.

is_interactive

@property
def is_interactive(self) -> bool:

   (BUTTON) Copy

   Whether the current app for the app is running in interactive mode.

app_id

@property
def app_id(self) -> Optional[str]:

   (BUTTON) Copy

   Return the app_id of a running or stopped app.

description

@property
def description(self) -> Optional[str]:

   (BUTTON) Copy

   The App's name, if available, or a fallback descriptive identifier.

lookup

@staticmethod
def lookup(
    label: str,
    client: Optional[_Client] = None,
    environment_name: Optional[str] = None,
    create_if_missing: bool = False,
) -> "_App":

   (BUTTON) Copy

   Look up an App with a given name, creating a new App if necessary.

   Note that Apps created through this method will be in a deployed state,
   but they will not have any associated Functions or Classes. This method
   is mainly useful for creating an App to associate with a Sandbox:
app = modal.App.lookup("my-app", create_if_missing=True)
modal.Sandbox.create("echo", "hi", app=app)

   (BUTTON) Copy

set_description

def set_description(self, description: str):

   (BUTTON) Copy

image

@property
def image(self) -> _Image:

   (BUTTON) Copy

run

@contextmanager
def run(
    self,
    client: Optional[_Client] = None,
    show_progress: Optional[bool] = None,
    detach: bool = False,
    interactive: bool = False,
) -> AsyncGenerator["_App", None]:

   (BUTTON) Copy

   Context manager that runs an app on Modal.

   Use this as the main entry point for your Modal application. All calls
   to Modal functions should be made within the scope of this context
   manager, and they will correspond to the current app.

   Example
with app.run():
    some_modal_function.remote()

   (BUTTON) Copy

   To enable output printing, use modal.enable_output():
with modal.enable_output():
    with app.run():
        some_modal_function.remote()

   (BUTTON) Copy

   Note that you cannot invoke this in global scope of a file where you
   have Modal functions or Classes, since that would run the block when
   the function or class is imported in your containers as well. If you
   want to run it as your entrypoint, consider wrapping it:
if __name__ == "__main__":
    with app.run():
        some_modal_function.remote()

   (BUTTON) Copy

   You can then run your script with:
python app_module.py

   (BUTTON) Copy

   Note that this method used to return a separate "App" object. This is
   no longer useful since you can use the app itself for access to all
   objects. For backwards compatibility reasons, it returns the same app.

registered_functions

@property
def registered_functions(self) -> Dict[str, _Function]:

   (BUTTON) Copy

   All modal.Function objects registered on the app.

registered_classes

@property
def registered_classes(self) -> Dict[str, _Function]:

   (BUTTON) Copy

   All modal.Cls objects registered on the app.

registered_entrypoints

@property
def registered_entrypoints(self) -> Dict[str, _LocalEntrypoint]:

   (BUTTON) Copy

   All local CLI entrypoints registered on the app.

indexed_objects

@property
def indexed_objects(self) -> Dict[str, _Object]:

   (BUTTON) Copy

registered_web_endpoints

@property
def registered_web_endpoints(self) -> List[str]:

   (BUTTON) Copy

   Names of web endpoint (ie. webhook) functions registered on the app.

local_entrypoint

def local_entrypoint(
    self, _warn_parentheses_missing: Any = None, *, name: Optional[str] = None
) -> Callable[[Callable[..., Any]], _LocalEntrypoint]:

   (BUTTON) Copy

   Decorate a function to be used as a CLI entrypoint for a Modal App.

   These functions can be used to define code that runs locally to set up
   the app, and act as an entrypoint to start Modal functions from. Note
   that regular Modal functions can also be used as CLI entrypoints, but
   unlike local_entrypoint, those functions are executed remotely
   directly.

   Example
@app.local_entrypoint()
def main():
    some_modal_function.remote()

   (BUTTON) Copy

   You can call the function using modal run directly from the CLI:
modal run app_module.py

   (BUTTON) Copy

   Note that an explicit [71]app.run() is not needed, as an [72]app is
   automatically created for you.

   Multiple Entrypoints

   If you have multiple local_entrypoint functions, you can qualify the
   name of your app and function:
modal run app_module.py::app.some_other_function

   (BUTTON) Copy

   Parsing Arguments

   If your entrypoint function take arguments with primitive types, modal
   run automatically parses them as CLI options. For example, the
   following function can be called with modal run app_module.py --foo 1
   --bar "hello":
@app.local_entrypoint()
def main(foo: int, bar: str):
    some_modal_function.call(foo, bar)

   (BUTTON) Copy

   Currently, str, int, float, bool, and datetime.datetime are supported.
   Use modal run app_module.py --help for more information on usage.

function

def function(
    self,
    _warn_parentheses_missing: Any = None,
    *,
    image: Optional[_Image] = None,  # The image to run as the container for the
 function
    schedule: Optional[Schedule] = None,  # An optional Modal Schedule for the f
unction
    secrets: Sequence[_Secret] = (),  # Optional Modal Secret objects with envir
onment variables for the container
    gpu: Union[
        GPU_T, List[GPU_T]
    ] = None,  # GPU request as string ("any", "T4", ...), object (`modal.GPU.A1
00()`, ...), or a list of either
    serialized: bool = False,  # Whether to send the function over using cloudpi
ckle.
    mounts: Sequence[_Mount] = (),  # Modal Mounts added to the container
    network_file_systems: Dict[
        Union[str, PurePosixPath], _NetworkFileSystem
    ] = {},  # Mountpoints for Modal NetworkFileSystems
    volumes: Dict[
        Union[str, PurePosixPath], Union[_Volume, _CloudBucketMount]
    ] = {},  # Mount points for Modal Volumes & CloudBucketMounts
    allow_cross_region_volumes: bool = False,  # Whether using network file syst
ems from other regions is allowed.
    # Specify, in fractional CPU cores, how many CPU cores to request.
    # Or, pass (request, limit) to additionally specify a hard limit in fraction
al CPU cores.
    # CPU throttling will prevent a container from exceeding its specified limit
.
    cpu: Optional[Union[float, Tuple[float, float]]] = None,
    # Specify, in MiB, a memory request which is the minimum memory required.
    # Or, pass (request, limit) to additionally specify a hard limit in MiB.
    memory: Optional[Union[int, Tuple[int, int]]] = None,
    ephemeral_disk: Optional[int] = None,  # Specify, in MiB, the ephemeral disk
 size for the Function.
    proxy: Optional[_Proxy] = None,  # Reference to a Modal Proxy to use in fron
t of this function.
    retries: Optional[Union[int, Retries]] = None,  # Number of times to retry e
ach input in case of failure.
    concurrency_limit: Optional[
        int
    ] = None,  # An optional maximum number of concurrent containers running the
 function (keep_warm sets minimum).
    allow_concurrent_inputs: Optional[int] = None,  # Number of inputs the conta
iner may fetch to run concurrently.
    container_idle_timeout: Optional[int] = None,  # Timeout for idle containers
 waiting for inputs to shut down.
    timeout: Optional[int] = None,  # Maximum execution time of the function in
seconds.
    keep_warm: Optional[
        int
    ] = None,  # An optional minimum number of containers to always keep warm (u
se concurrency_limit for maximum).
    name: Optional[str] = None,  # Sets the Modal name of the function within th
e app
    is_generator: Optional[
        bool
    ] = None,  # Set this to True if it's a non-generator function returning a [
sync/async] generator object
    cloud: Optional[str] = None,  # Cloud provider to run the function on. Possi
ble values are aws, gcp, oci, auto.
    region: Optional[Union[str, Sequence[str]]] = None,  # Region or regions to
run the function on.
    enable_memory_snapshot: bool = False,  # Enable memory checkpointing for fas
ter cold starts.
    block_network: bool = False,  # Whether to block network access
    # Maximum number of inputs a container should handle before shutting down.
    # With `max_inputs = 1`, containers will be single-use.
    max_inputs: Optional[int] = None,
    i6pn: Optional[bool] = None,  # Whether to enable IPv6 container networking
within the region.
    # Parameters below here are experimental. Use with caution!
    _experimental_scheduler_placement: Optional[
        SchedulerPlacement
    ] = None,  # Experimental controls over fine-grained scheduling (alpha).
    _experimental_buffer_containers: Optional[int] = None,  # Number of addition
al, idle containers to keep around.
    _experimental_proxy_ip: Optional[str] = None,  # IP address of proxy
    _experimental_custom_scaling_factor: Optional[float] = None,  # Custom scali
ng factor
) -> _FunctionDecoratorType:

   (BUTTON) Copy

   Decorator to register a new Modal [73]Function with this App.

cls

@typing_extensions.dataclass_transform(field_specifiers=(parameter,), kw_only_de
fault=True)
def cls(
    self,
    _warn_parentheses_missing: Optional[bool] = None,
    *,
    image: Optional[_Image] = None,  # The image to run as the container for the
 function
    secrets: Sequence[_Secret] = (),  # Optional Modal Secret objects with envir
onment variables for the container
    gpu: Union[
        GPU_T, List[GPU_T]
    ] = None,  # GPU request as string ("any", "T4", ...), object (`modal.GPU.A1
00()`, ...), or a list of either
    serialized: bool = False,  # Whether to send the function over using cloudpi
ckle.
    mounts: Sequence[_Mount] = (),
    network_file_systems: Dict[
        Union[str, PurePosixPath], _NetworkFileSystem
    ] = {},  # Mountpoints for Modal NetworkFileSystems
    volumes: Dict[
        Union[str, PurePosixPath], Union[_Volume, _CloudBucketMount]
    ] = {},  # Mount points for Modal Volumes & CloudBucketMounts
    allow_cross_region_volumes: bool = False,  # Whether using network file syst
ems from other regions is allowed.
    # Specify, in fractional CPU cores, how many CPU cores to request.
    # Or, pass (request, limit) to additionally specify a hard limit in fraction
al CPU cores.
    # CPU throttling will prevent a container from exceeding its specified limit
.
    cpu: Optional[Union[float, Tuple[float, float]]] = None,
    # Specify, in MiB, a memory request which is the minimum memory required.
    # Or, pass (request, limit) to additionally specify a hard limit in MiB.
    memory: Optional[Union[int, Tuple[int, int]]] = None,
    ephemeral_disk: Optional[int] = None,  # Specify, in MiB, the ephemeral disk
 size for the Function.
    proxy: Optional[_Proxy] = None,  # Reference to a Modal Proxy to use in fron
t of this function.
    retries: Optional[Union[int, Retries]] = None,  # Number of times to retry e
ach input in case of failure.
    concurrency_limit: Optional[int] = None,  # Limit for max concurrent contain
ers running the function.
    allow_concurrent_inputs: Optional[int] = None,  # Number of inputs the conta
iner may fetch to run concurrently.
    container_idle_timeout: Optional[int] = None,  # Timeout for idle containers
 waiting for inputs to shut down.
    timeout: Optional[int] = None,  # Maximum execution time of the function in
seconds.
    keep_warm: Optional[int] = None,  # An optional number of containers to alwa
ys keep warm.
    cloud: Optional[str] = None,  # Cloud provider to run the function on. Possi
ble values are aws, gcp, oci, auto.
    region: Optional[Union[str, Sequence[str]]] = None,  # Region or regions to
run the function on.
    enable_memory_snapshot: bool = False,  # Enable memory checkpointing for fas
ter cold starts.
    block_network: bool = False,  # Whether to block network access
    # Limits the number of inputs a container handles before shutting down.
    # Use `max_inputs = 1` for single-use containers.
    max_inputs: Optional[int] = None,
    # Parameters below here are experimental. Use with caution!
    _experimental_scheduler_placement: Optional[
        SchedulerPlacement
    ] = None,  # Experimental controls over fine-grained scheduling (alpha).
    _experimental_buffer_containers: Optional[int] = None,  # Number of addition
al, idle containers to keep around.
    _experimental_proxy_ip: Optional[str] = None,  # IP address of proxy
    _experimental_custom_scaling_factor: Optional[float] = None,  # Custom scali
ng factor
) -> Callable[[CLS_T], CLS_T]:

   (BUTTON) Copy

   Decorator to register a new Modal [74]Cls with this App.

spawn_sandbox

def spawn_sandbox(
    self,
    *entrypoint_args: str,
    image: Optional[_Image] = None,  # The image to run as the container for the
 sandbox.
    mounts: Sequence[_Mount] = (),  # Mounts to attach to the sandbox.
    secrets: Sequence[_Secret] = (),  # Environment variables to inject into the
 sandbox.
    network_file_systems: Dict[Union[str, PurePosixPath], _NetworkFileSystem] =
{},
    timeout: Optional[int] = None,  # Maximum execution time of the sandbox in s
econds.
    workdir: Optional[str] = None,  # Working directory of the sandbox.
    gpu: GPU_T = None,
    cloud: Optional[str] = None,
    region: Optional[Union[str, Sequence[str]]] = None,  # Region or regions to
run the sandbox on.
    # Specify, in fractional CPU cores, how many CPU cores to request.
    # Or, pass (request, limit) to additionally specify a hard limit in fraction
al CPU cores.
    # CPU throttling will prevent a container from exceeding its specified limit
.
    cpu: Optional[Union[float, Tuple[float, float]]] = None,
    # Specify, in MiB, a memory request which is the minimum memory required.
    # Or, pass (request, limit) to additionally specify a hard limit in MiB.
    memory: Optional[Union[int, Tuple[int, int]]] = None,
    block_network: bool = False,  # Whether to block network access
    volumes: Dict[
        Union[str, PurePosixPath], Union[_Volume, _CloudBucketMount]
    ] = {},  # Mount points for Modal Volumes and CloudBucketMounts
    pty_info: Optional[api_pb2.PTYInfo] = None,
    _experimental_scheduler_placement: Optional[
        SchedulerPlacement
    ] = None,  # Experimental controls over fine-grained scheduling (alpha).
) -> _Sandbox:

   (BUTTON) Copy

   App.spawn_sandbox is deprecated in favor of Sandbox.create(app=...).

   See [75]https://modal.com/docs/guide/sandbox for more info on working
   with sandboxes.

include

def include(self, /, other_app: "_App"):

   (BUTTON) Copy

   Include another App's objects in this one.

   Useful for splitting up Modal Apps across different self-contained
   files.
app_a = modal.App("a")
@app.function()
def foo():
    ...

app_b = modal.App("b")
@app.function()
def bar():
    ...

app_a.include(app_b)

@app_a.local_entrypoint()
def main():
    # use function declared on the included app
    bar.remote()

   (BUTTON) Copy
   [76]modal.Stub [77]name [78]is_interactive [79]app_id [80]description
   [81]lookup [82]set_description [83]image [84]run
   [85]registered_functions [86]registered_classes
   [87]registered_entrypoints [88]indexed_objects
   [89]registered_web_endpoints [90]local_entrypoint [91]function [92]cls
   [93]spawn_sandbox [94]include
   Modal logo © 2024
   [95]About [96]Status [97]Changelog [98]Documentation [99]Slack
   Community [100]Pricing [101]Examples

