Page: modal.com_files/modal.com/docs/reference/modal.runner.html
----------------------------------------
   [1]Modal logo
   [2]Guide [3]Examples [4]Reference [5]Playground
   [6]Log In [7]Sign Up
   (BUTTON)
   [8]Changelog [9]API Reference
   [10]modal.App[11]modal.Client[12]modal.CloudBucketMount[13]modal.Cls[14
   ]modal.ContainerProcess[15]modal.Cron[16]modal.Dict[17]modal.Error[18]m
   odal.Function[19]modal.Image[20]modal.Mount[21]modal.NetworkFileSystem[
   22]modal.Period[23]modal.Proxy[24]modal.Queue[25]modal.Retries[26]modal
   .Sandbox[27]modal.Secret[28]modal.Stub[29]modal.Tunnel[30]modal.Volume[
   31]modal.asgi_app[32]modal.batched[33]modal.build[34]modal.call_graph[3
   5]modal.current_function_call_id[36]modal.current_input_id[37]modal.ena
   ble_output[38]modal.enter[39]modal.exit[40]modal.forward[41]modal.gpu[4
   2]modal.interact[43]modal.io_streams[44]modal.is_local[45]modal.method[
   46]modal.parameter[47]modal.runner[48]modal.web_endpoint[49]modal.web_s
   erver[50]modal.wsgi_app[51]modal.exception[52]modal.config [53]CLI
   Reference [54]modal app[55]modal config[56]modal container[57]modal
   deploy[58]modal dict[59]modal environment[60]modal launch[61]modal
   nfs[62]modal profile[63]modal queue[64]modal run[65]modal
   secret[66]modal serve[67]modal setup[68]modal shell[69]modal
   token[70]modal volume
     __________________________________________________________________

modal.runner

modal.runner.DeployResult

class DeployResult(object)

   (BUTTON) Copy

   Dataclass representing the result of deploying an app.
def __init__(self, app_id: str, app_page_url: str, app_logs_url: str, warnings:
List[str]) -> None

   (BUTTON) Copy

modal.runner.deploy_app

async def deploy_app(
    app: _App,
    name: Optional[str] = None,
    namespace: Any = api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client: Optional[_Client] = None,
    environment_name: Optional[str] = None,
    tag: str = "",
) -> DeployResult:

   (BUTTON) Copy

   Deploy an app and export its objects persistently.

   Typically, using the command-line tool modal deploy <module or script>
   should be used, instead of this method.

   Usage:
if __name__ == "__main__":
    deploy_app(app)

   (BUTTON) Copy

   Deployment has two primary purposes:
     * Persists all of the objects in the app, allowing them to live past
       the current app run. For schedules this enables headless
       "cron"-like functionality where scheduled functions continue to be
       invoked after the client has disconnected.
     * Allows for certain kinds of these objects, deployment objects, to
       be referred to and used by other apps.

modal.runner.interactive_shell

async def interactive_shell(_app: _App, cmds: List[str], environment_name: str =
 "", **kwargs: Any) -> None:

   (BUTTON) Copy

   Run an interactive shell (like bash) within the image for this app.

   This is useful for online debugging and interactive exploration of the
   contents of this image. If cmd is optionally provided, it will be run
   instead of the default shell inside this image.

   Example
import modal

app = modal.App(image=modal.Image.debian_slim().apt_install("vim"))

   (BUTTON) Copy

   You can now run this using
modal shell script.py --cmd /bin/bash

   (BUTTON) Copy

   When calling programmatically, kwargs are passed to Sandbox.create().
   [71]modal.runner [72]modal.runner.DeployResult
   [73]modal.runner.deploy_app [74]modal.runner.interactive_shell
   Modal logo Â© 2024
   [75]About [76]Status [77]Changelog [78]Documentation [79]Slack
   Community [80]Pricing [81]Examples

