Page: modal.com_files/modal.com/docs/guide/cron.html
----------------------------------------
   [1]Modal logo
   [2]Guide [3]Examples [4]Reference [5]Playground
   [6]Log In [7]Sign Up
   (BUTTON)
   [8]Introduction[9]Custom container images [10]Custom
   containers[11]Private registries[12]GPUs and other resources [13]GPU
   acceleration[14]Using CUDA on Modal[15]Reserving CPU and
   memory[16]Scaling out [17]Scaling out[18]Dicts and queues[19]Job
   processing[20]Concurrent inputs on a single container (beta)[21]Dynamic
   batching (beta)[22]Scheduling and cron jobs[23]Deployment [24]Apps,
   Stubs, and entrypoints[25]Managing deployments[26]Invoke deployed
   functions[27]Continuous deployment[28]Secrets and environment variables
   [29]Secrets[30]Environment variables[31]Web endpoints [32]Web
   endpoints[33]Streaming endpoints[34]Web endpoint URLs[35]Request
   timeouts[36]Networking [37]Tunnels (beta)[38]Proxies (beta)[39]Data
   sharing and storage [40]Passing local data[41]Volumes[42]Mounting local
   files and directories[43]Storing model weights[44]Dataset
   ingestion[45]Cloud bucket mounts[46]Network file systems
   (superseded)[47]Sandboxes [48]Sandboxes[49]Running
   commands[50]Networking and security[51]File access[52]Performance
   [53]Cold start performance[54]Memory Snapshot (beta)[55]Geographic
   latency[56]Reliability and robustness [57]Failures and
   retries[58]Preemption[59]Timeouts[60]Troubleshooting[61]Security and
   privacy[62]Integrations [63]Connecting Modal to your Vercel
   account[64]Connecting Modal to your Datadog account[65]Connecting Modal
   to your OpenTelemetry provider[66]Okta SSO[67]Slack notifications
   (beta)[68]Other topics [69]File and project structure[70]Developing and
   debugging[71]Modal user account
   setup[72]Workspaces[73]Environments[74]Jupyter
   notebooks[75]Asynchronous API usage[76]Global variables[77]Region
   selection[78]Container lifecycle hooks[79]Parameterized functions[80]S3
   Gateway endpoints
     __________________________________________________________________

Scheduling remote cron jobs

   A common requirement is to perform some task at a given time every day
   or week automatically. Modal facilitates this through function
   schedules.

Basic scheduling

   Let's say we have a Python module heavy.py with a function,
   perform_heavy_computation().
# heavy.py
def perform_heavy_computation():
    ...

if __name__ == "__main__":
    perform_heavy_computation()

   (BUTTON) Copy

   To schedule this function to run once per day, we create a Modal App
   and attach our function to it with the @app.function decorator and a
   schedule parameter:
# heavy.py
import modal

app = modal.App()

@app.function(schedule=modal.Period(days=1))
def perform_heavy_computation():
    ...

   (BUTTON) Copy

   To activate the schedule, deploy your app, either through the CLI:
modal deploy --name daily_heavy heavy.py

   (BUTTON) Copy

   Or programmatically:
if __name__ == "__main__":
    modal.runner.deploy_app(app)

   (BUTTON) Copy

   When you make changes to your function, just rerun the deploy command
   to overwrite the old deployment.

   Note that when you redeploy your function, modal.Period resets, and the
   schedule will run X hours after this most recent deployment.

   If you want to run your function at a regular schedule not disturbed by
   deploys, modal.Cron (see below) is a better option.

Monitoring your scheduled runs

   To see past execution logs for the scheduled function, go to the
   [81]Apps section on the Modal web site.

   Schedules currently cannot be paused. Instead the schedule should be
   removed and the app redeployed. Schedules can be started manually on
   the app's dashboard page, using the "run now" button.

Schedule types

   There are two kinds of base schedule values - [82]modal.Period and
   [83]modal.Cron.

   [84]modal.Period lets you specify an interval between function calls,
   e.g. Period(days=1) or Period(hours=5):
# runs once every 5 hours
@app.function(schedule=modal.Period(hours=5))
def perform_heavy_computation():
    ...

   (BUTTON) Copy

   [85]modal.Cron gives you finer control using [86]cron syntax:
# runs at 8 am (UTC) every Monday
@app.function(schedule=modal.Cron("0 8 * * 1"))
def perform_heavy_computation():
    ...

   (BUTTON) Copy

   For more details, see the API reference for [87]Period, [88]Cron and
   [89]Function
   [90]Scheduling remote cron jobs [91]Basic scheduling [92]Monitoring
   your scheduled runs [93]Schedule types
   See it in action
   [94]Hacker News Slackbot
   Modal logo Â© 2024
   [95]About [96]Status [97]Changelog [98]Documentation [99]Slack
   Community [100]Pricing [101]Examples

