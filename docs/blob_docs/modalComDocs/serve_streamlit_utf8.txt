Page: modal.com_files/modal.com/docs/examples/serve_streamlit.html
----------------------------------------
   [1]Modal logo
   [2]Guide [3]Examples [4]Reference [5]Playground
   [6]Log In [7]Sign Up
   (BUTTON)
   [8]Featured[9]Getting started [10]Hello, world[11]Simple web
   scraper[12]Serving web endpoints[13]Large language models (LLMs)
   [14]Deploy an OpenAI-compatible LLM service with
   vLLM[15]High-throughput serverless TensorRT-LLM[16]Run Vision-Language
   Models with SGLang[17]Deploy a Moshi voice chatbot[18]Run a multimodal
   RAG chatbot to answer questions about PDFs[19]Fine-tune an LLM with
   Axolotl[20]Replace your CEO with an LLM[21]Diffusion models [22]Run
   Flux fast with torch.compile[23]Fine-tune an image generator on your
   pet[24]Generate video clips with Mochi[25]Transform images with Stable
   Diffusion XL Turbo[26]Deploy ControlNet demos with Gradio[27]Run a
   music-generating Discord bot[28]Training models from scratch [29]Train
   an SLM with early-stopping grid search over hyperparameters[30]Run
   long, resumable training jobs[31]Sandboxed code execution [32]Run a
   LangGraph agent's code in a secure GPU sandbox[33]Build a stateful,
   sandboxed code interpreter[34]Run Node.js, Ruby, and more in a
   Sandbox[35]Run a sandboxed Jupyter notebook[36]Parallel processing and
   job scheduling [37]Transcribe podcasts with Whisper[38]Deploy a Hacker
   News Slackbot[39]Run a Document OCR job queue[40]Serve a Document OCR
   web app[41]Hosting popular libraries [42]FastHTML: Deploy 100,000
   multiplayer checkboxes[43]YOLO: Fine-tuning and serve computer vision
   models[44]MultiOn: Create an agent for AI news[45]Blender: Build a 3D
   render farm[46]Streamlit: Run and deploy Streamlit apps[47]ComfyUI: Run
   ComfyUI interactively and as an API[48]SQLite: Publish explorable data
   with Datasette[49]Y! Finance: Process stock prices in
   parallel[50]Algolia: Build docsearch with a crawler[51]Connecting to
   other APIs [52]MongoDB: Vector and geospatial search over satellite
   images[53]Google Sheets: Sync databases and APIs to a Google
   Sheet[54]LangChain: Run a RAG Q&A chatbot[55]Tailscale: Add Modal Apps
   to your VPN[56]Prometheus: Publish custom metrics with
   Pushgateway[57]Managing data [58]Mount S3 buckets in Modal
   apps[59]Build your own data warehouse with DuckDB, DBT, and
   Modal[60]Create a LoRA Playground with Modal, Gradio, and
   S3[61]Miscellaneous
     __________________________________________________________________

   [62]View on GitHub

Run and share Streamlit apps

   This example shows you how to run a Streamlit app with modal serve, and
   then deploy it as a serverless web app.

   example streamlit app

   This example is structured as two files:
       serve_streamlit.py locally).
       function ([63]download script).

import shlex
import subprocess
from pathlib import Path

import modal

   (BUTTON) Copy

Define container dependencies

   The app.py script imports three third-party packages, so we include
   these in the example's image definition.
image = modal.Image.debian_slim(python_version="3.11").pip_install(
    "streamlit~=1.35.0", "numpy~=1.26.4", "pandas~=2.2.2"
)

app = modal.App(name="example-modal-streamlit", image=image)

   (BUTTON) Copy

Mounting the app.py script

   We can just mount the app.py script inside the container at a
   pre-defined path using a Modal [64]Mount.
streamlit_script_local_path = Path(__file__).parent / "app.py"
streamlit_script_remote_path = Path("/root/app.py")

if not streamlit_script_local_path.exists():
    raise RuntimeError(
        "app.py not found! Place the script with your streamlit app in the same
directory."
    )

streamlit_script_mount = modal.Mount.from_local_file(
    streamlit_script_local_path,
    streamlit_script_remote_path,
)

   (BUTTON) Copy

Spawning the Streamlit server

   Inside the container, we will run the Streamlit server in a background
   subprocess using subprocess.Popen. We also expose port 8000 using the
   @web_server decorator.
@app.function(
    allow_concurrent_inputs=100,
    mounts=[streamlit_script_mount],
)
@modal.web_server(8000)
def run():
    target = shlex.quote(str(streamlit_script_remote_path))
    cmd = f"streamlit run {target} --server.port 8000 --server.enableCORS=false
--server.enableXsrfProtection=false"
    subprocess.Popen(cmd, shell=True)

   (BUTTON) Copy

Iterate and Deploy

   While you're iterating on your screamlit app, you can run it
   "ephemerally" with modal serve. This will run a local process that
   watches your files and updates the app if anything changes.
modal serve serve_streamlit.py

   (BUTTON) Copy

   Once you're happy with your changes, you can deploy your application
   with
modal deploy serve_streamlit.py

   (BUTTON) Copy

   If successful, this will print a URL for your app, that you can
   navigate to from your browser .
   [65]Run and share Streamlit apps [66]Define container dependencies
   [67]Mounting the app.py script [68]Spawning the Streamlit server
   [69]Iterate and Deploy

Try this on Modal!

   You can run this example on Modal in 60 seconds.
   [70]Create account to run

   After creating a free account, install the Modal Python package, and
   create an API token.
   $
pip install modal

   $
modal setup

   (BUTTON) Copy

   Clone the [71]modal-examples repository and run:
   $
git clone https://github.com/modal-labs/modal-examples

   $
cd modal-examples

   $
modal serve 10_integrations/streamlit/serve_streamlit.py

   (BUTTON) Copy
   Modal logo Â© 2024
   [72]About [73]Status [74]Changelog [75]Documentation [76]Slack
   Community [77]Pricing [78]Examples

