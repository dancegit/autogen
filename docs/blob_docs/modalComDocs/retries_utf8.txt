Page: modal.com_files/modal.com/docs/guide/retries.html
----------------------------------------
   [1]Modal logo
   [2]Guide [3]Examples [4]Reference [5]Playground
   [6]Log In [7]Sign Up
   (BUTTON)
   [8]Introduction[9]Custom container images [10]Custom
   containers[11]Private registries[12]GPUs and other resources [13]GPU
   acceleration[14]Using CUDA on Modal[15]Reserving CPU and
   memory[16]Scaling out [17]Scaling out[18]Dicts and queues[19]Job
   processing[20]Concurrent inputs on a single container (beta)[21]Dynamic
   batching (beta)[22]Scheduling and cron jobs[23]Deployment [24]Apps,
   Stubs, and entrypoints[25]Managing deployments[26]Invoke deployed
   functions[27]Continuous deployment[28]Secrets and environment variables
   [29]Secrets[30]Environment variables[31]Web endpoints [32]Web
   endpoints[33]Streaming endpoints[34]Web endpoint URLs[35]Request
   timeouts[36]Networking [37]Tunnels (beta)[38]Proxies (beta)[39]Data
   sharing and storage [40]Passing local data[41]Volumes[42]Mounting local
   files and directories[43]Storing model weights[44]Dataset
   ingestion[45]Cloud bucket mounts[46]Network file systems
   (superseded)[47]Sandboxes [48]Sandboxes[49]Running
   commands[50]Networking and security[51]File access[52]Performance
   [53]Cold start performance[54]Memory Snapshot (beta)[55]Geographic
   latency[56]Reliability and robustness [57]Failures and
   retries[58]Preemption[59]Timeouts[60]Troubleshooting[61]Security and
   privacy[62]Integrations [63]Connecting Modal to your Vercel
   account[64]Connecting Modal to your Datadog account[65]Connecting Modal
   to your OpenTelemetry provider[66]Okta SSO[67]Slack notifications
   (beta)[68]Other topics [69]File and project structure[70]Developing and
   debugging[71]Modal user account
   setup[72]Workspaces[73]Environments[74]Jupyter
   notebooks[75]Asynchronous API usage[76]Global variables[77]Region
   selection[78]Container lifecycle hooks[79]Parameterized functions[80]S3
   Gateway endpoints
     __________________________________________________________________

Failures and retries

   When you call a function over a sequence of inputs with
   [81]Function.map(), sometimes errors can happen during function
   execution. Exceptions from within the remote function are propagated to
   the caller, so you can handle them with a try-except statement (refer
   to [82]section on custom types for more on how to catch user-defined
   exceptions):
@app.function()
def f(i):
    raise ValueError()

@app.local_entrypoint()
def main():
    try:
        for _ in f.map([1, 2, 3]):
            pass
    except ValueError:
        print("Exception handled")

   (BUTTON) Copy

Function retries

   You can configure Modal to automatically retry function failures if you
   set the retries option when declaring your function:
@app.function(retries=3)
def my_flaky_function():
    pass

   (BUTTON) Copy

   When used with Function.map(), each input is retried up to the max
   number of retries specified.

   The basic configuration shown provides a fixed 1s delay between retry
   attempts. For fine-grained control over retry delays, including
   exponential backoff configuration, use [83]modal.Retries.

Container crashes

   In the case of a container crash on start-up (for example, while
   handling imports in global scope before the function can be run), the
   error will be propagated to the caller immediately, since it's likely a
   user error.

   If a container crashes after start-up (for example, due to an out of
   memory error), Modal will reschedule the container and any work it was
   currently assigned, unless the crash rate of the container exceeds a
   certain limit.
   [84]Failures and retries [85]Function retries [86]Container crashes
   Modal logo Â© 2024
   [87]About [88]Status [89]Changelog [90]Documentation [91]Slack
   Community [92]Pricing [93]Examples

