Page: modal.com_files/modal.com/docs/examples/pushgateway.html
----------------------------------------
   [1]Modal logo
   [2]Guide [3]Examples [4]Reference [5]Playground
   [6]Log In [7]Sign Up
   (BUTTON)
   [8]Featured[9]Getting started [10]Hello, world[11]Simple web
   scraper[12]Serving web endpoints[13]Large language models (LLMs)
   [14]Deploy an OpenAI-compatible LLM service with
   vLLM[15]High-throughput serverless TensorRT-LLM[16]Run Vision-Language
   Models with SGLang[17]Deploy a Moshi voice chatbot[18]Run a multimodal
   RAG chatbot to answer questions about PDFs[19]Fine-tune an LLM with
   Axolotl[20]Replace your CEO with an LLM[21]Diffusion models [22]Run
   Flux fast with torch.compile[23]Fine-tune an image generator on your
   pet[24]Generate video clips with Mochi[25]Transform images with Stable
   Diffusion XL Turbo[26]Deploy ControlNet demos with Gradio[27]Run a
   music-generating Discord bot[28]Training models from scratch [29]Train
   an SLM with early-stopping grid search over hyperparameters[30]Run
   long, resumable training jobs[31]Sandboxed code execution [32]Run a
   LangGraph agent's code in a secure GPU sandbox[33]Build a stateful,
   sandboxed code interpreter[34]Run Node.js, Ruby, and more in a
   Sandbox[35]Run a sandboxed Jupyter notebook[36]Parallel processing and
   job scheduling [37]Transcribe podcasts with Whisper[38]Deploy a Hacker
   News Slackbot[39]Run a Document OCR job queue[40]Serve a Document OCR
   web app[41]Hosting popular libraries [42]FastHTML: Deploy 100,000
   multiplayer checkboxes[43]YOLO: Fine-tuning and serve computer vision
   models[44]MultiOn: Create an agent for AI news[45]Blender: Build a 3D
   render farm[46]Streamlit: Run and deploy Streamlit apps[47]ComfyUI: Run
   ComfyUI interactively and as an API[48]SQLite: Publish explorable data
   with Datasette[49]Y! Finance: Process stock prices in
   parallel[50]Algolia: Build docsearch with a crawler[51]Connecting to
   other APIs [52]MongoDB: Vector and geospatial search over satellite
   images[53]Google Sheets: Sync databases and APIs to a Google
   Sheet[54]LangChain: Run a RAG Q&A chatbot[55]Tailscale: Add Modal Apps
   to your VPN[56]Prometheus: Publish custom metrics with
   Pushgateway[57]Managing data [58]Mount S3 buckets in Modal
   apps[59]Build your own data warehouse with DuckDB, DBT, and
   Modal[60]Create a LoRA Playground with Modal, Gradio, and
   S3[61]Miscellaneous
     __________________________________________________________________

   [62]View on GitHub

Publish custom metrics with Prometheus Pushgateway

   This example shows how to publish custom metrics to a Prometheus
   instance with Modal. Due to a Modal container's ephemeral nature, it's
   not a good fit for a traditional scraping-based Prometheus setup.
   Instead, we'll use a [63]Prometheus Pushgateway to collect and store
   metrics from our Modal container. We can run the Pushgateway in Modal
   as a separate process and have our application push metrics to it.

   Prometheus Pushgateway diagram

Install Prometheus Pushgateway

   Since the official Prometheus pushgateway image does not have Python
   installed, we'll use a custom image that includes Python to push
   metrics to the Pushgateway. Pushgateway ships a single binary, so it's
   easy to get it into a Modal container.
import os
import subprocess

import modal

PUSHGATEWAY_VERSION = "1.9.0"

gw_image = (
    modal.Image.debian_slim(python_version="3.10")
    .apt_install("wget", "tar")
    .run_commands(
        f"wget https://github.com/prometheus/pushgateway/releases/download/v{PUS
HGATEWAY_VERSION}/pushgateway-{PUSHGATEWAY_VERSION}.linux-amd64.tar.gz",
        f"tar xvfz pushgateway-{PUSHGATEWAY_VERSION}.linux-amd64.tar.gz",
        f"cp pushgateway-{PUSHGATEWAY_VERSION}.linux-amd64/pushgateway /usr/loca
l/bin/",
        f"rm -rf pushgateway-{PUSHGATEWAY_VERSION}.linux-amd64 pushgateway-{PUSH
GATEWAY_VERSION}.linux-amd64.tar.gz",
        "mkdir /pushgateway",
    )
)

   (BUTTON) Copy

Start the Pushgateway

   We'll start the Pushgateway as a separate Modal app. This way, we can
   run the Pushgateway in the background and have our main app push
   metrics to it. We'll use the web_server decorator to expose the
   Pushgateway's web interface. Note that we must set concurrency_limit=1
   as the Pushgateway is a single-process application. If we spin up
   multiple instances, they'll conflict with each other.

   This is an example configuration, but a production-ready configuration
   will differ in two respects:
       has support for [64]basic authentication out of the box. If you
       need more advanced authentication, consider using a [65]web
       endpoint with authentication which proxies requests to the
       Pushgateway.
       allow you to configure Prometheus to scrape metrics from a
       predictable URL rather than the autogenerated URL Modal assigns to
       your app.

gw_app = modal.App(
    "pushgateway-example",
    image=gw_image,
)


@gw_app.function(keep_warm=1, concurrency_limit=1)
@modal.web_server(9091)
def run_pushgateway():
    subprocess.Popen("/usr/local/bin/pushgateway")

   (BUTTON) Copy

Push metrics to the Pushgateway

   Now that we have the Pushgateway running, we can push metrics to it.
   We'll use the prometheus_client library to create a simple counter and
   push it to the Pushgateway. This example is a simple counter, but you
   can push any metric type to the Pushgateway.

   Note that we use the grouping_key argument to distinguish between
   different instances of the same metric. This is useful when you have
   multiple instances of the same app pushing metrics to the Pushgateway.
   Without this, the Pushgateway will overwrite the metric with the latest
   value.
client_image = modal.Image.debian_slim().pip_install(
    "prometheus-client==0.20.0", "fastapi[standard]==0.115.4"
)
app = modal.App(
    "client-example",
    image=client_image,
)

with client_image.imports():
    from prometheus_client import (
        CollectorRegistry,
        Counter,
        delete_from_gateway,
        push_to_gateway,
    )


@app.cls(keep_warm=3)
class ExampleClientApplication:
    @modal.enter()
    def init(self):
        self.registry = CollectorRegistry()
        self.web_url = run_pushgateway.web_url
        self.instance_id = os.environ["MODAL_TASK_ID"]
        self.counter = Counter(
            "hello_counter",
            "This is a counter",
            registry=self.registry,
        )

    # We must explicitly clean up the metric when the app exits so Prometheus do
esn't
    # keep stale metrics around.
    @modal.exit()
    def cleanup(self):
        delete_from_gateway(
            self.web_url,
            job="hello",
            grouping_key={"instance": self.instance_id},
        )

    @modal.web_endpoint()
    def hello(self):
        self.counter.inc()
        push_to_gateway(
            self.web_url,
            job="hello",
            grouping_key={"instance": self.instance_id},
            registry=self.registry,
        )
        return f"Hello world from {self.instance_id}!"


app.include(gw_app)

   (BUTTON) Copy

   Now, we can deploy the client-example app and see the metrics in the
   Pushgateway's web interface.
$ modal deploy pushgateway.py
X Created objects.
+-- ¨ Created mount
|   /home/runner/work/modal-examples/modal-examples/10_integrations/pushgateway.
py
+-- ¨ Created function ExampleClientApplication.*.
+-- ¨ Created web function run_pushgateway =>
|   https://modal-labs--client-example-run-pushgateway.modal.run
+-- ¨ Created web function ExampleClientApplication.hello =>
    https://modal-labs--client-example-exampleclientapplication-hello.modal.run
X App deployed!

   (BUTTON) Copy

   You can now go to both the [67]client application and [68]Pushgateway
   URLs to see the metrics being pushed.

Hooking up Prometheus

   Now that we have metrics in the Pushgateway, we can configure
   Prometheus to scrape them. This is as simple as adding a new job to
   your Prometheus configuration. Here's an example configuration snippet:
scrape_configs:
- job_name: 'pushgateway'
  honor_labels: true # required so that the instance label is preserved
  static_configs:
  - targets: ['modal-labs--client-example-run-pushgateway.modal.run']

   (BUTTON) Copy

   Note that the target will be different if you have a custom domain set
   up for the Pushgateway, and you may need to configure authentication.

   Once you've added the job to your Prometheus configuration, Prometheus
   will start scraping metrics from the Pushgateway. You can then use
   Grafana or another visualization tool to create dashboards and alerts
   based on these metrics!

   Grafana example
   [69]Publish custom metrics with Prometheus Pushgateway [70]Install
   Prometheus Pushgateway [71]Start the Pushgateway [72]Push metrics to
   the Pushgateway [73]Hooking up Prometheus

Try this on Modal!

   You can run this example on Modal in 60 seconds.
   [74]Create account to run

   After creating a free account, install the Modal Python package, and
   create an API token.
   $
pip install modal

   $
modal setup

   (BUTTON) Copy

   Clone the [75]modal-examples repository and run:
   $
git clone https://github.com/modal-labs/modal-examples

   $
cd modal-examples

   $
modal serve 10_integrations/pushgateway.py

   (BUTTON) Copy
   Modal logo © 2024
   [76]About [77]Status [78]Changelog [79]Documentation [80]Slack
   Community [81]Pricing [82]Examples

