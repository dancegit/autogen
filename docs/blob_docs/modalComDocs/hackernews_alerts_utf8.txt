Page: modal.com_files/modal.com/docs/examples/hackernews_alerts.html
----------------------------------------
   [1]Modal logo
   [2]Guide [3]Examples [4]Reference [5]Playground
   [6]Log In [7]Sign Up
   (BUTTON)
   [8]Featured[9]Getting started [10]Hello, world[11]Simple web
   scraper[12]Serving web endpoints[13]Large language models (LLMs)
   [14]Deploy an OpenAI-compatible LLM service with
   vLLM[15]High-throughput serverless TensorRT-LLM[16]Run Vision-Language
   Models with SGLang[17]Deploy a Moshi voice chatbot[18]Run a multimodal
   RAG chatbot to answer questions about PDFs[19]Fine-tune an LLM with
   Axolotl[20]Replace your CEO with an LLM[21]Diffusion models [22]Run
   Flux fast with torch.compile[23]Fine-tune an image generator on your
   pet[24]Generate video clips with Mochi[25]Transform images with Stable
   Diffusion XL Turbo[26]Deploy ControlNet demos with Gradio[27]Run a
   music-generating Discord bot[28]Training models from scratch [29]Train
   an SLM with early-stopping grid search over hyperparameters[30]Run
   long, resumable training jobs[31]Sandboxed code execution [32]Run a
   LangGraph agent's code in a secure GPU sandbox[33]Build a stateful,
   sandboxed code interpreter[34]Run Node.js, Ruby, and more in a
   Sandbox[35]Run a sandboxed Jupyter notebook[36]Parallel processing and
   job scheduling [37]Transcribe podcasts with Whisper[38]Deploy a Hacker
   News Slackbot[39]Run a Document OCR job queue[40]Serve a Document OCR
   web app[41]Hosting popular libraries [42]FastHTML: Deploy 100,000
   multiplayer checkboxes[43]YOLO: Fine-tuning and serve computer vision
   models[44]MultiOn: Create an agent for AI news[45]Blender: Build a 3D
   render farm[46]Streamlit: Run and deploy Streamlit apps[47]ComfyUI: Run
   ComfyUI interactively and as an API[48]SQLite: Publish explorable data
   with Datasette[49]Y! Finance: Process stock prices in
   parallel[50]Algolia: Build docsearch with a crawler[51]Connecting to
   other APIs [52]MongoDB: Vector and geospatial search over satellite
   images[53]Google Sheets: Sync databases and APIs to a Google
   Sheet[54]LangChain: Run a RAG Q&A chatbot[55]Tailscale: Add Modal Apps
   to your VPN[56]Prometheus: Publish custom metrics with
   Pushgateway[57]Managing data [58]Mount S3 buckets in Modal
   apps[59]Build your own data warehouse with DuckDB, DBT, and
   Modal[60]Create a LoRA Playground with Modal, Gradio, and
   S3[61]Miscellaneous
     __________________________________________________________________

   [62]View on GitHub

Hacker News Slackbot

   In this example, we use Modal to deploy a cron job that periodically
   queries Hacker News for new posts matching a given search term, and
   posts the results to Slack.

Import and define the app

   Let's start off with imports, and defining a Modal app.
import os
from datetime import datetime, timedelta

import modal

app = modal.App("example-hn-bot")

   (BUTTON) Copy

   Now, let's define an image that has the slack-sdk package installed, in
   which we can run a function that posts a slack message.
slack_sdk_image = modal.Image.debian_slim().pip_install("slack-sdk")

   (BUTTON) Copy

Defining the function and importing the secret

   Our Slack bot will need access to a bot token. We can use Modal's
   [63]Secrets interface to accomplish this. To quickly create a Slack bot
   secret, navigate to the [64]create secret page, select the Slack secret
   template from the list options, and follow the instructions in the
   "Where to find the credentials?" panel. Name your secret hn-bot-slack,
   so that the code in this example still works.

   Now, we define the function post_to_slack, which simply instantiates
   the Slack client using our token, and then uses it to post a message to
   a given channel name.
@app.function(
    image=slack_sdk_image, secrets=[modal.Secret.from_name("hn-bot-slack")]
)
async def post_to_slack(message: str):
    import slack_sdk

    client = slack_sdk.WebClient(token=os.environ["SLACK_BOT_TOKEN"])
    client.chat_postMessage(channel="hn-alerts", text=message)

   (BUTTON) Copy

Searching Hacker News

   We are going to use Algolia's [65]Hacker News Search API to query for
   posts matching a given search term in the past X days. Let's define our
   search term and query period.
QUERY = "serverless"
WINDOW_SIZE_DAYS = 1

   (BUTTON) Copy

   Let's also define an image that has the requests package installed, so
   we can query the API.
requests_image = modal.Image.debian_slim().pip_install("requests")

   (BUTTON) Copy

   We can now define our main entrypoint, that queries Algolia for the
   term, and calls post_to_slack on all the results. We specify a
   [66]schedule in the function decorator, which means that our function
   will run automatically at the given interval.
@app.function(image=requests_image)
def search_hackernews():
    import requests

    url = "http://hn.algolia.com/api/v1/search"

    threshold = datetime.utcnow() - timedelta(days=WINDOW_SIZE_DAYS)

    params = {
        "query": QUERY,
        "numericFilters": f"created_at_i>{threshold.timestamp()}",
    }

    response = requests.get(url, params, timeout=10).json()
    urls = [item["url"] for item in response["hits"] if item.get("url")]

    print(f"Query returned {len(urls)} items.")

    post_to_slack.for_each(urls)

   (BUTTON) Copy

Test running

   We can now test run our scheduled function as follows: modal run
   hackernews_alerts.py::app.search_hackernews

Defining the schedule and deploying

   Let's define a function that will be called by Modal every day
@app.function(schedule=modal.Period(days=1))
def run_daily():
    search_hackernews.remote()

   (BUTTON) Copy

   In order to deploy this as a persistent cron job, you can run modal
   deploy hackernews_alerts.py,

   Once the job is deployed, visit the [67]apps page page to see its
   execution history, logs and other stats.
   [68]Hacker News Slackbot [69]Import and define the app [70]Defining the
   function and importing the secret [71]Searching Hacker News [72]Test
   running [73]Defining the schedule and deploying

Try this on Modal!

   You can run this example on Modal in 60 seconds.
   [74]Create account to run

   After creating a free account, install the Modal Python package, and
   create an API token.
   $
pip install modal

   $
modal setup

   (BUTTON) Copy

   Clone the [75]modal-examples repository and run:
   $
git clone https://github.com/modal-labs/modal-examples

   $
cd modal-examples

   $
modal run 05_scheduling/hackernews_alerts.py

   (BUTTON) Copy
   Modal logo Â© 2024
   [76]About [77]Status [78]Changelog [79]Documentation [80]Slack
   Community [81]Pricing [82]Examples

