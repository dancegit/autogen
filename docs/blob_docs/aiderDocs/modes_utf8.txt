Page: aider.chat_files/aider.chat/docs/usage/modes.html
----------------------------------------
   #[1]RSS Feed

   [2]Skip to main content

   [3]aider (BUTTON)

     * [4]Home
     * (BUTTON) [5]Installation
          + [6]Installing aider
          + [7]Optional steps
          + [8]Aider with docker
          + [9]Install with pipx
          + [10]GitHub Codespaces
     * (BUTTON) [11]Usage
          + [12]Tips
          + [13]In-chat commands
          + [14]Chat modes
          + [15]Tutorial videos
          + [16]Voice-to-code with aider
          + [17]Images & web pages
          + [18]Prompt caching
          + [19]Aider in your browser
          + [20]Specifying coding conventions
          + [21]Linting and testing
     * (BUTTON) [22]Connecting to LLMs
          + [23]OpenAI
          + [24]Anthropic
          + [25]Gemini
          + [26]GROQ
          + [27]Azure
          + [28]Cohere
          + [29]DeepSeek
          + [30]Ollama
          + [31]OpenAI compatible APIs
          + [32]OpenRouter
          + [33]Vertex AI
          + [34]Amazon Bedrock
          + [35]Other LLMs
          + [36]Editing format
          + [37]Model warnings
     * (BUTTON) [38]Configuration
          + [39]Options reference
          + [40]YAML config file
          + [41]Config with .env
          + [42]Advanced model settings
     * (BUTTON) [43]Troubleshooting
          + [44]File editing problems
          + [45]Model warnings
          + [46]Token limits
          + [47]Aider not found
          + [48]Dependency versions
          + [49]Using /help
     * (BUTTON) [50]Example chat transcripts
          + [51]Create a simple flask app with aider
          + [52]Modify an open source 2048 game with aider
          + [53]A complex multi-file change, with debugging
          + [54]Create a "black box" test case
          + [55]Automatically update docs with aider
          + [56]Build pong with aider and pygame.
          + [57]Complete a css exercise with aider
          + [58]Download, analyze and plot US Census data
          + [59]Editing an asciinema cast file with aider
          + [60]Hello aider!
          + [61]Honor the NO_COLOR environment variable
          + [62]Improve css styling of chat transcripts
          + [63]Semantic search & replace code with aider
     * (BUTTON) [64]More info
          + [65]Git integration
          + [66]Supported languages
          + [67]Repository map
          + [68]Scripting aider
          + [69]Infinite output
          + [70]Edit formats
          + [71]Analytics
          + [72]Privacy policy
          + [73]Release history
     * [74]FAQ
     * [75]Aider LLM Leaderboards
     * [76]Aider blog

     * [77]GitHub
     * [78]Discord

   Aider is AI pair programming in your terminal. Aider is on [79]GitHub
   and [80]Discord.

   ____________________

     * [81]GitHub
     * [82]Discord
     * [83]Blog


Chat modes

   Aider has a few different chat modes:
     * code - Aider will make changes to your code to satisfy your
       requests.
     * architect - Aider will first propose a solution, then ask if you
       want it to turn that proposal into edits to your files.
     * ask - Aider will answer questions about your code, but never edit
       it.
     * help - Aider will answer questions about using aider, configuring,
       troubleshooting, etc.

   By default, aider starts in "code" mode. As you are talking, you can
   send individual messages in a specific mode using /code, /architect,
   /ask, and /help commands: Using these /-commands applies just to that
   particular message. Your next message will go back to the active mode
   (usually "code" mode by default).

   You can switch the active mode in a sticky way with the /chat-mode
   <mode> command:
/chat-mode code
/chat-mode architect
/chat-mode ask
/chat-mode help

   Or you can launch aider in one of the modes with the --chat-mode <mode>
   switch. There is also a special shortcut --architect to launch in
   --chat-mode architect.

Architect mode and the editor model

   When you are in architect mode, aider sends your request to two models:
       model is configured with /model, --model or the shortcut switches
       like --sonnet. After the main model replies, aider will offer to
       edit the files based on the response.
       specific code editing instructions. This request goes to the
       "editor" model. Aider has built in defaults to select an editor
       model based on your main model. Or, you can choose an editor model
       yourself with --editor-model <model>.

   Architect mode produces better results than code mode, but uses two LLM
   requests. This probably makes it slower and more expensive than using
   code mode.

   Architect mode is especially useful with OpenAI's o1 models, which are
   strong at reasoning but less capable at editing files. Pairing an o1
   architect with an editor model like GPT-4o or Sonnet will give the best
   results.

   But architect mode is also quite helpful when you use GPT-4o or Sonnet
   at both the architect and the editor. Allowing the model two requests
   to solve the problem and edit the files usually provides a better
   result.

   The editor model uses one of aider's edit formats to let the LLM edit
   source files. Aider will pick a suitable edit format by default, but
   you can customize it with --editor-edit-format <format>. The
   [85]"editor-diff" and "editor-whole" edit formats are the recommended
   edit formats when using architect mode. See this article on [86]aider's
   architect/editor mode for more details.

Examples

     Aider v0.47.1-dev
     Models: claude-3-5-sonnet-20240620 with diff edit format
     Git repo: .git with 298 files
     Repo-map: using 1024 tokens
     Use /help to see in-chat commands, run with -help to see cmd line
     args

/ask What is this repo?

   This is the source code to the popular django package.

/help How do I use ollama?

   Run aider --model ollama/<ollama-model>. See these docs for more info:
   https://aider.chat/docs/llms/ollama.html

/code Add a function to calculate the factorial of a number

   Certainly! I'll add a function to calculate the factorial of a number.
   Here's the change:
def factorial(n):
    if n == 0 or n == 1:
        return 1
    else:
        return n * factorial(n - 1)

# Example usage
print(factorial(5))  # Output: 120

   This function uses recursion to calculate the factorial. It's been
   added to your code.

/architect Can we make this simpler?

   Yes, you could replace the factorial() function with a call to the
   math.factorial() builtin. This way you don't have to maintain a custom
   factorial implementation, and the builtin function is well optimized.

     Edit the files? (Y)es/(N)o [Yes]: Yes

<<<<<<< SEARCH
def factorial(n):
    if n == 0 or n == 1:
        return 1
    else:
        return n * factorial(n - 1)
=======
from math import factorial
>>>>>>> REPLACE

