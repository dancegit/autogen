Page: aider.chat_files/aider.chat/examples/add-test.html
----------------------------------------
   #[1]RSS Feed

   [2]Skip to main content

   [3]aider (BUTTON)

     * [4]Home
     * (BUTTON) [5]Installation
          + [6]Installing aider
          + [7]Optional steps
          + [8]Aider with docker
          + [9]Install with pipx
          + [10]GitHub Codespaces
     * (BUTTON) [11]Usage
          + [12]Tips
          + [13]In-chat commands
          + [14]Chat modes
          + [15]Tutorial videos
          + [16]Voice-to-code with aider
          + [17]Images & web pages
          + [18]Prompt caching
          + [19]Aider in your browser
          + [20]Specifying coding conventions
          + [21]Linting and testing
     * (BUTTON) [22]Connecting to LLMs
          + [23]OpenAI
          + [24]Anthropic
          + [25]Gemini
          + [26]GROQ
          + [27]Azure
          + [28]Cohere
          + [29]DeepSeek
          + [30]Ollama
          + [31]OpenAI compatible APIs
          + [32]OpenRouter
          + [33]Vertex AI
          + [34]Amazon Bedrock
          + [35]Other LLMs
          + [36]Editing format
          + [37]Model warnings
     * (BUTTON) [38]Configuration
          + [39]Options reference
          + [40]YAML config file
          + [41]Config with .env
          + [42]Advanced model settings
     * (BUTTON) [43]Troubleshooting
          + [44]File editing problems
          + [45]Model warnings
          + [46]Token limits
          + [47]Aider not found
          + [48]Dependency versions
          + [49]Using /help
     * (BUTTON) [50]Example chat transcripts
          + [51]Create a simple flask app with aider
          + [52]Modify an open source 2048 game with aider
          + [53]A complex multi-file change, with debugging
          + [54]Create a "black box" test case
          + [55]Automatically update docs with aider
          + [56]Build pong with aider and pygame.
          + [57]Complete a css exercise with aider
          + [58]Download, analyze and plot US Census data
          + [59]Editing an asciinema cast file with aider
          + [60]Hello aider!
          + [61]Honor the NO_COLOR environment variable
          + [62]Improve css styling of chat transcripts
          + [63]Semantic search & replace code with aider
     * (BUTTON) [64]More info
          + [65]Git integration
          + [66]Supported languages
          + [67]Repository map
          + [68]Scripting aider
          + [69]Infinite output
          + [70]Edit formats
          + [71]Analytics
          + [72]Privacy policy
          + [73]Release history
     * [74]FAQ
     * [75]Aider LLM Leaderboards
     * [76]Aider blog

     * [77]GitHub
     * [78]Discord

   Aider is AI pair programming in your terminal. Aider is on [79]GitHub
   and [80]Discord.

   ____________________

     * [81]GitHub
     * [82]Discord
     * [83]Blog


Create a "black box" test case

   This transcript shows aider creating a black box test case, without
   being given access to the source code of the function being tested or
   any of the other code in the repo.

   Instead, aider is operating entirely off a [85]high level map of the
   repository based on ctags, which provides details on all the symbols
   and function signatures in the repo. Using only the meta-data in the
   map, the LLM is able to figure out how to call the method to be tested,
   as well as how to instantiate multiple class objects that are required
   to prepare for the test.

   In detail, aider is able to use the repo map to:
     * Find the function signature of the cmd_add() function which the
       user wants a test case for.
     * Determine that it is a method of the Command class, so the test
       case will need to instantiate an instance to conduct the test.
     * Identify that creating a Command instance requires passing in
       InputOutput and Coder instances.
     * Figure out the arguments required to instantiate the InputOutput
       instance.
     * Decide that the Coder class looks complex enough to use a
       MagickMock.

   The cmd_add() method is defined without type annotations, so aider
   makes a reasonable but incorrect guess that it accepts a list of files.
   The user invokes the /run command to run the new unit test, which
   throws an error based on this misunderstanding.

   The LLM reviews the error message and fixes the call to cmd_add() to
   correctly pass a str with a space-separated list of filenames instead.
   The test then passes on the next /run.

     $ aider tests/test_commands.py
     Creating empty file tests/test_commands.py
     Added tests/test_commands.py to the chat
     Files not tracked in .git:
     * tests/test_commands.py

     Add them? y
     Added tests/test_commands.py to the git repo
     Commit b9cea2c Added new files to the git repo:
     tests/test_commands.py
     Using git repo: .git

add a test for cmd_add that passes in `foo.txt' and `bar.txt' and ensures
they have both been created after the test. run the test in a tmp dir.

   I will add a new test method called test_cmd_add in the
   tests/test_commands.py file. This test will create a temporary
   directory, change the current working directory to the temporary
   directory, and then call the cmd_add method with `foo.txt' and
   `bar.txt' as arguments. After that, it will check if both files have
   been created in the temporary directory.

   Here's the code change:
tests/test_commands.py
<<<<<<< ORIGINAL
=======
import os
import tempfile
from unittest import TestCase
from unittest.mock import MagicMock
from aider.commands import Commands
from aider.io import InputOutput

class TestCommands(TestCase):
    def test_cmd_add(self):
        # Create a temporary directory and change the current working directory
        with tempfile.TemporaryDirectory() as tmpdir:
            os.chdir(tmpdir)

            # Initialize the Commands and InputOutput objects
            io = InputOutput(pretty=False, yes=True)
            coder = MagicMock()
            commands = Commands(io, coder)

            # Call the cmd_add method with 'foo.txt' and 'bar.txt'
            commands.cmd_add(["foo.txt", "bar.txt"])

            # Check if both files have been created in the temporary directory
            self.assertTrue(os.path.exists("foo.txt"))
            self.assertTrue(os.path.exists("bar.txt"))
>>>>>>> UPDATED

   This test will ensure that the cmd_add method creates the specified
   files in the current working directory.

     Applied edit to tests/test_commands.py
     Commit e2d5212 aider: Added a test method test_cmd_add that creates
     a temporary directory, calls the cmd_add method with `foo.txt' and
     `bar.txt', and checks if both files have been created in the
     temporary directory.

/run pytest tests/test_commands.py

============================= test session starts ==============================

platform darwin -- Python 3.11.3, pytest-7.3.1, pluggy-1.0.0
rootdir: /Users/gauthier/Projects/aider
collected 1 item

tests/test_commands.py F                                                 [100%]


=================================== FAILURES ===================================

__________________________ TestCommands.test_cmd_add ___________________________


self = <tests.test_commands.TestCommands testMethod=test_cmd_add>

    def test_cmd_add(self):
        # Create a temporary directory and change the current working directory

        with tempfile.TemporaryDirectory() as tmpdir:
            os.chdir(tmpdir)

            # Initialize the Commands and InputOutput objects
            io = InputOutput(pretty=False, yes=True)
            coder = MagicMock()
            commands = Commands(io, coder)

            # Call the cmd_add method with 'foo.txt' and 'bar.txt'
>           commands.cmd_add(["foo.txt", "bar.txt"])

/Users/gauthier/Projects/aider/tests/test_commands.py:20:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _


self = <aider.commands.Commands object at 0x10b412b50>
args = ['foo.txt', 'bar.txt']

    def cmd_add(self, args):
        "Add matching files to the chat session"

        added_fnames = []
        files = self.coder.get_all_relative_files()
>       for word in args.split():
E       AttributeError: 'list' object has no attribute 'split'

/Users/gauthier/Projects/aider/aider/commands.py:161: AttributeError
=========================== short test summary info ============================

FAILED tests/test_commands.py::TestCommands::test_cmd_add - AttributeError: '...

============================== 1 failed in 0.34s ===============================


     Add the output to the chat? [y/n] (y): y

   It seems that the cmd_add method in aider/commands.py is expecting a
   string as input, but in the test, we are passing a list. I will update
   the test to pass a string instead of a list.

   Here's the code change:
tests/test_commands.py
<<<<<<< ORIGINAL
            # Call the cmd_add method with 'foo.txt' and 'bar.txt'
            commands.cmd_add(["foo.txt", "bar.txt"])
=======
            # Call the cmd_add method with 'foo.txt' and 'bar.txt' as a single s
tring
            commands.cmd_add("foo.txt bar.txt")
>>>>>>> UPDATED

   Now, run the test again with the updated test method:
pytest tests/test_commands.py

     Applied edit to tests/test_commands.py
     Commit d1551b4 aider: Updated test to pass a string instead of a
     list when calling cmd_add method.

/run pytest tests/test_commands.py

============================= test session starts ==============================

platform darwin -- Python 3.11.3, pytest-7.3.1, pluggy-1.0.0
rootdir: /Users/gauthier/Projects/aider
collected 1 item

tests/test_commands.py .                                                 [100%]


============================== 1 passed in 0.38s ===============================

