Page: reactflow.dev_files/reactflow.dev/api-reference/hooks/use-edges-state.html
----------------------------------------
   [1]¥ We just released React Flow Components powered by shadcn CLI
   (BUTTON)
   [2]

   React Flow
   [3]Learn[4]Reference[5]Examples[6]Components[7]Showcase (BUTTON) More
   (BUTTON) Search
   [8]React Flow Pro (BUTTON)
   (BUTTON) Search
     * [9]API Reference
     * [10]<ReactFlow />
     * [11]<ReactFlowProvider />
     * [12]Components
          + [13]<Background />
          + [14]<BaseEdge />
          + [15]<ControlButton />
          + [16]<Controls />
          + [17]<EdgeLabelRenderer />
          + [18]<EdgeText />
          + [19]<Handle />
          + [20]<MiniMap />
          + [21]<NodeResizer />
          + [22]<NodeResizeControl />
          + [23]<NodeToolbar />
          + [24]<Panel />
          + [25]<ViewportPortal />
     * [26]Hooks
          + [27]useConnection()
          + [28]useEdges()
          + [29]useEdgesState()
          + [30]useHandleConnections()
          + [31]useKeyPress()
          + [32]useNodeId()
          + [33]useNodes()
          + [34]useInternalNode()
          + [35]useNodesData()
          + [36]useNodesInitialized()
          + [37]useNodesState()
          + [38]useOnSelectionChange()
          + [39]useOnViewportChange()
          + [40]useReactFlow()
          + [41]useStore()
          + [42]useStoreApi()
          + [43]useUpdateNodeInternals()
          + [44]useViewport()
     * [45]Types
          + [46]BackgroundVariant
          + [47]Connection
          + [48]ConnectionLineComponentProps
          + [49]ConnectionLineType
          + [50]ConnectionState
          + [51]CoordinateExtent
          + [52]DefaultEdgeOptions
          + [53]DeleteElements
          + [54]Edge
          + [55]EdgeChange
          + [56]EdgeMarker
          + [57]EdgeProps
          + [58]FitViewOptions
          + [59]Handle
          + [60]HandleConnection
          + [61]InternalNode
          + [62]MarkerType
          + [63]MiniMapNodeProps
          + [64]Node
          + [65]NodeChange
          + [66]NodeHandle
          + [67]NodeOrigin
          + [68]NodeProps
          + [69]OnEdgesChange
          + [70]OnNodesChange
          + [71]PanOnScrollMode
          + [72]PanelPosition
          + [73]Position
          + [74]ProOptions
          + [75]ReactFlowInstance
          + [76]ReactFlowJsonObject
          + [77]ResizeParams
          + [78]Viewport
          + [79]XYPosition
     * [80]Utils
          + [81]addEdge()
          + [82]applyEdgeChanges()
          + [83]applyNodeChanges()
          + [84]getBezierPath()
          + [85]getConnectedEdges()
          + [86]getIncomers()
          + [87]getNodesBounds()
          + [88]getOutgoers()
          + [89]getSimpleBezierPath()
          + [90]getSmoothStepPath()
          + [91]getStraightPath()
          + [92]getViewportForBounds()
          + [93]isEdge()
          + [94]isNode()
          + [95]reconnectEdge()
          + [96]getTransformForBounds()

   On This Page
     * [97]Signature
     * [98]Typescript
     * [99]Notes

   [100]Question? Give us feedback ->[101]Edit this page

   What's new?
   [102]Our examples have a fresh new look[103]React Flow
   CLI[105]...and more!
   [106]Reference[107]Hooks
   useEdgesState()

useEdgesState

   [108]Source on GitHub

   This hook makes it easy to prototype a controlled flow where you manage
   the state of nodes and edges outside the ReactFlowInstance. You can
   think of it like React's useState hook with an additional helper
   callback.
import { ReactFlow, useNodesState, useEdgesState } from '@xyflow/react';

const initialNodes = [];
const initialEdges = [];

export default function () {
  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);
  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);

  return (
    <ReactFlow
      nodes={nodes}
      edges={edges}
      onNodesChange={onNodesChange}
      onEdgesChange={onEdgesChange}
    />
  );
}

   (BUTTON)

Signature

                             Name                           Type
   [109]#Params
   [110]#initialEdges
   Edge<T>[]
   [111]#Returns
   [112]#[0]
   Edge<T>[]
   The current array of edges. You might pass this directly to the edges
   prop of your <ReactFlow /> component or you may want to manipulate it
   first to perform some layouting, for example.
   [113]#[1]
   React.[114]Dispatch<React.[115]SetStateAction<Edge<T>[]>>
   A function that you can use to update the edges. You can pass it a new
   array of edges or a callback that receives the current array of edges
   and returns a new array of edges. This is the same as the second
   element of the tuple returned by React's useState hook.
   [116]#[2]
   (changes: EdgeChange[]) => void
   A handy callback that can take an array of EdgeChanges and update the
   edges state accordingly. You'll typically pass this directly to the
   onEdgesChange prop of your <ReactFlow /> component.

Typescript

   This hook accepts a generic type argument of custom edge types. See
   this [117]section in our Typescript guide for more information.
const nodes = useEdgesState<CustomEdgeType>();

   (BUTTON)

Notes

     * This hook was created to make prototyping easier and our
       documentation examples clearer. Although it is OK to use this hook
       in production, in practice you may want to use a more sophisticated
       state management solution like [118]Zustand instead.

   [119]Hooks[120]Utils

   A project by the xyflow team
   We are building and maintaining open source software for node-based UIs
   since 2019.

   Docs
   [121]Getting Started[122]API Reference[123]Examples[124]Showcase

   Social
   [125]Discord[126]Github[127]X / Twitter[128]Bluesky

   xyflow
   [129]Blog[130]Open Source[131]About[132]Contact[133]
   Careers hiring

   Legal
   [134]MIT License[135]Code of Conduct[136]Imprint

   [137]info@xyflow.com -- Copyright © 2024 [138]webkid GmbH. All rights
   reserved -- website design by [139]Facu Montanaro

