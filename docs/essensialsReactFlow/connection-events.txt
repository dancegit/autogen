Page: reactflow.dev_files/reactflow.dev/examples/interaction/connection-events.html
----------------------------------------
   [1]¥ We just released React Flow Components powered by shadcn CLI
   (BUTTON)
   [2]

   React Flow
   [3]Learn[4]Reference[5]Examples[6]Components[7]Showcase (BUTTON) More
   (BUTTON) Search
   [8]React Flow Pro (BUTTON)
   (BUTTON) Search
     * [9]Examples
     * [10]Feature Overview
     * (BUTTON) Nodes
          + [11]Custom Nodes
          + [12]Updating Nodes
          + [13]Stress Test
          + [14]Hidden
          + [15]Drag Handle
          + [16]Easy Connect
          + [17]Add Node On Edge Drop
          + [18]Proximity Connect
          + [19]Node Resizer
          + [20]Node Toolbar
          + [21]Rotatable Node
          + [22]Dynamic Grouping
          + [23]Intersections
          + [24]Shapes
          + [25]Connection Limit
          + [26]Delete Middle Node
     * (BUTTON) Edges
          + [27]Custom Edges
          + [28]Animating Edges
          + [29]Edge Types
          + [30]Editable Edge
          + [31]Reconnect Edge
          + [32]Connection Line
          + [33]Multi Connection Line
          + [34]Edge Markers
          + [35]Delete Edge on Drop
          + [36]Floating Edges
          + [37]Simple Floating Edges
          + [38]Edge Label Renderer
          + [39]Temporary Edges
     * (BUTTON) Layout
          + [40]Sub Flow
          + [41]Horizontal Flow
          + [42]Dagre Tree
          + [43]Entitree Flex Tree
          + [44]Elkjs Tree
          + [45]Elkjs Multiple Handles
          + [46]Auto Layout
          + [47]Force Layout
          + [48]Expand and Collapse
          + [49]Workflow Builder
     * (BUTTON) Interaction
          + [50]Interaction Props
          + [51]Drag and Drop
          + [52]Computing Flows
          + [53]Validation
          + [54]Connection Events
          + [55]Preventing Cycles
          + [56]Undo and Redo
          + [57]Copy and Paste
          + [58]Helper Lines
          + [59]Touch Device
          + [60]Save and Restore
          + [61]Zoom Transitions
          + [62]Collaborative
          + [63]Contextual Zoom
          + [64]Context Menu
     * (BUTTON) Styling
          + [65]Styled Components
          + [66]Tailwind
          + [67]Turbo Flow
          + [68]Base Style
          + [69]Dark Mode
     * (BUTTON) Misc
          + [70]Static Server Side Generation
          + [71]Download Image
          + [72]ReactFlowProvider
          + [73]useReactFlow

   [74]Examples[75]Interaction
   Connection Events

Connection Events

   React Flow emits different events during the connection process that
   you can use to update your UI or your flow in different ways. The
   example below demonstrates which events are fired and when.

   IFRAME:
   [76]https://example-apps.xyflow.com/react/examples/interaction/connecti
   on-events/index.html

   (BUTTON) Open in Stackblitz (BUTTON) Open in Codesandbox
   (BUTTON) App.jsx (BUTTON) index.css (BUTTON) xy-theme.css
import React, { useCallback } from 'react';
import { ReactFlow, Background } from '@xyflow/react';

import { useState } from 'react';
import { useEffect } from 'react';

import '@xyflow/react/dist/style.css';


const initialNodes = [
  { id: 'a', position: { x: -100, y: 0 }, data: { label: 'A' } },
  { id: 'b', position: { x: 100, y: 0 }, data: { label: 'B' } },
  { id: 'c', position: { x: 0, y: 100 }, data: { label: 'C' } },
];

const initialEdges = [{ id: 'b->c', source: 'b', target: 'c' }];

const Flow = () => {
  const [events, setEvents] = useState({
    onReconnectStart: false,
    onConnectStart: false,
    onConnect: false,
    onReconnect: false,
    onConnectEnd: false,
    onReconnectEnd: false,
  });

  const onReconnectStart = useCallback(() => {
    console.log('onReconnectStart');
    setEvents({
      onReconnectStart: true,
      onConnectStart: false,
      onConnect: false,
      onReconnect: false,
      onConnectEnd: false,
      onReconnectEnd: false,
    });
  }, []);

  const onConnectStart = useCallback(() => {
    console.log('onConnectStart');
    setEvents((events) => ({
      ...events,
      onConnectStart: true,
      onConnect: false,
      onReconnect: false,
      onConnectEnd: false,
      onReconnectEnd: false,
    }));
  }, []);

  const onConnect = useCallback(() => {
    console.log('onConnect');
    setEvents({
      onReconnectStart: false,
      onConnectStart: false,
      onConnect: true,
      onReconnect: false,
      onConnectEnd: false,
      onReconnectEnd: false,
    });
  }, []);

  const onReconnect = useCallback(() => {
    console.log('onReconnect');
    setEvents({
      onReconnectStart: false,
      onConnectStart: false,
      onConnect: false,
      onReconnect: true,
      onConnectEnd: false,
      onReconnectEnd: false,
    });
  }, []);

  const onConnectEnd = useCallback(() => {
    setEvents((events) => ({
      ...events,
      onReconnectStart: false,
      onConnectStart: false,
      onConnectEnd: true,
    }));
  }, []);

  const onReconnectEnd = useCallback(() => {
    console.log('onReconnectEnd');
    setEvents((events) => ({
      ...events,
      onReconnectStart: false,
      onConnectStart: false,
      onReconnectEnd: true,
    }));
  }, []);

  useEffect(() => {
    if (!events.onReconnectEnd && !events.onConnectEnd) return;

    let timer = window.setTimeout(() => {
      setEvents({
        onReconnectStart: false,
        onConnectStart: false,
        onConnect: false,
        onReconnect: false,
        onConnectEnd: false,
        onReconnectEnd: false,
      });
    }, 500);

    return () => window.clearTimeout(timer);
  });

  return (
    <>
      <ReactFlow
        nodes={initialNodes}
        edges={initialEdges}
        edgesReconnectable={true}
        onConnectStart={onConnectStart}
        onConnect={onConnect}
        onConnectEnd={onConnectEnd}
        onReconnectStart={onReconnectStart}
        onReconnect={onReconnect}
        onReconnectEnd={onReconnectEnd}
        fitView
        style={{ backgroundColor: "#F7F9FB" }}
        >
          <Background />
        </ReactFlow>
      <div id="event-list">
        {Object.entries(events).map(([name, active]) => (
          <p key={name} style={{ opacity: active ? 1 : 0.2 }}>
            {name}
          </p>
        ))}
      </div>
    </>
  );
};

export default Flow;

   (BUTTON)

   For a new connection created by dragging from a handle, the following
   events are called in order:
     * [77]onConnectStart is called with the mouse event and an object
       containing the source node, potentially the source handle id, and
       the handle type.
     * [78]onConnect is only called when the connection is released on a
       handle that [79]is connectable. It is called with a complete
       [80]connection object containing the source and target node, and
       the source and target handle ids if present.
     * [81]onConnectEnd is called when a connection is released,
       regardless of whether it was successful or not. It is called with
       the mouse event.

   When an edge is reconnected by dragging an existing edge, the following
   events are called in order:
     * [82]onReconnectStart is called when a [83]reconnectable edge is
       picked up. It is called with the mouse event, the edge object that
       is being reconnected, and the type of the stable handle.
     * [84]onConnectStart is called as above.
     * [85]onReconnect is called when the edge is released on a handle
       that is [86]reconnectable. It is called with the old [87]edge
       object and the new [88]connection object.
     * [89]onConnectEnd is called as above.
     * [90]onReconnectEnd is called when the edge is released, regardless
       of whether the reconnection whas successful or not. It is called
       with the mouse event, the edge that was picked up, and the type of
       the stable handle.

   You can see many of these events in use in our [91]add node on edge
   drop and [92]temporary edges examples!
   [93]Feature Overview[94]Dark Mode

   A project by the xyflow team
   We are building and maintaining open source software for node-based UIs
   since 2019.

   Docs
   [95]Getting Started[96]API Reference[97]Examples[98]Showcase

   Social
   [99]Discord[100]Github[101]X / Twitter[102]Bluesky

   xyflow
   [103]Blog[104]Open Source[105]About[106]Contact[107]
   Careers hiring

   Legal
   [108]MIT License[109]Code of Conduct[110]Imprint

   [111]info@xyflow.com -- Copyright © 2024 [112]webkid GmbH. All rights
   reserved -- website design by [113]Facu Montanaro

