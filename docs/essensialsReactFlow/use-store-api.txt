Page: reactflow.dev_files/reactflow.dev/api-reference/hooks/use-store-api.html
----------------------------------------
   [1]¥ We just released React Flow Components powered by shadcn CLI
   (BUTTON)
   [2]

   React Flow
   [3]Learn[4]Reference[5]Examples[6]Components[7]Showcase (BUTTON) More
   (BUTTON) Search
   [8]React Flow Pro (BUTTON)
   (BUTTON) Search
     * [9]API Reference
     * [10]<ReactFlow />
     * [11]<ReactFlowProvider />
     * [12]Components
          + [13]<Background />
          + [14]<BaseEdge />
          + [15]<ControlButton />
          + [16]<Controls />
          + [17]<EdgeLabelRenderer />
          + [18]<EdgeText />
          + [19]<Handle />
          + [20]<MiniMap />
          + [21]<NodeResizer />
          + [22]<NodeResizeControl />
          + [23]<NodeToolbar />
          + [24]<Panel />
          + [25]<ViewportPortal />
     * [26]Hooks
          + [27]useConnection()
          + [28]useEdges()
          + [29]useEdgesState()
          + [30]useHandleConnections()
          + [31]useKeyPress()
          + [32]useNodeId()
          + [33]useNodes()
          + [34]useInternalNode()
          + [35]useNodesData()
          + [36]useNodesInitialized()
          + [37]useNodesState()
          + [38]useOnSelectionChange()
          + [39]useOnViewportChange()
          + [40]useReactFlow()
          + [41]useStore()
          + [42]useStoreApi()
          + [43]useUpdateNodeInternals()
          + [44]useViewport()
     * [45]Types
          + [46]BackgroundVariant
          + [47]Connection
          + [48]ConnectionLineComponentProps
          + [49]ConnectionLineType
          + [50]ConnectionState
          + [51]CoordinateExtent
          + [52]DefaultEdgeOptions
          + [53]DeleteElements
          + [54]Edge
          + [55]EdgeChange
          + [56]EdgeMarker
          + [57]EdgeProps
          + [58]FitViewOptions
          + [59]Handle
          + [60]HandleConnection
          + [61]InternalNode
          + [62]MarkerType
          + [63]MiniMapNodeProps
          + [64]Node
          + [65]NodeChange
          + [66]NodeHandle
          + [67]NodeOrigin
          + [68]NodeProps
          + [69]OnEdgesChange
          + [70]OnNodesChange
          + [71]PanOnScrollMode
          + [72]PanelPosition
          + [73]Position
          + [74]ProOptions
          + [75]ReactFlowInstance
          + [76]ReactFlowJsonObject
          + [77]ResizeParams
          + [78]Viewport
          + [79]XYPosition
     * [80]Utils
          + [81]addEdge()
          + [82]applyEdgeChanges()
          + [83]applyNodeChanges()
          + [84]getBezierPath()
          + [85]getConnectedEdges()
          + [86]getIncomers()
          + [87]getNodesBounds()
          + [88]getOutgoers()
          + [89]getSimpleBezierPath()
          + [90]getSmoothStepPath()
          + [91]getStraightPath()
          + [92]getViewportForBounds()
          + [93]isEdge()
          + [94]isNode()
          + [95]reconnectEdge()
          + [96]getTransformForBounds()

   On This Page
     * [97]Signature
     * [98]Typescript

   [99]Question? Give us feedback ->[100]Edit this page

   What's new?
   [101]Our examples have a fresh new look[102]React Flow
   CLI[104]...and more!
   [105]Reference[106]Hooks
   useStoreApi()

useStoreApi

   [107]Source on GitHub

   In some cases, you might need to access the store directly. This hook
   returns the store object which can be used on demand to access the
   state or dispatch actions.

   This hook should only be used if there is no other way to access the
   internal state. For many of the common use cases, there are dedicated
   hooks available such as [108]useReactFlow, [109]useViewport, etc.
import { useState, useCallback } from 'react';
import { ReactFlow, useStoreApi } from '@xyflow/react';

const NodesLengthDisplay = () => {
  const [nodesLength, setNodesLength] = useState(0);
  const store = useStoreApi();

  const onClick = useCallback(() => {
    const { nodes } = store.getState();
    const length = nodes.length || 0;

    setNodesLength(length);
  }, [store]);

  return (
    <div>
      <p>The current number of nodes is: {nodesLength}</p>
      <button onClick={onClick}>Update node length.</button>
    </div>
  );
};

function Flow() {
  return (
    <ReactFlow nodes={nodes}>
      <NodesLengthLogger />
    </ReactFlow>
  );
}

   (BUTTON)

   This example computes the number of nodes in the flow on-demand. This
   is in contrast to the example in the [110]useStore hook that re-renders
   the component whenever the number of nodes changes.

   Choosing whether to calculate values on-demand or to subscribe to
   changes as they happen is a bit of a balancing act. On the one hand,
   putting too many heavy calculations in an event handler can make your
   app feel sluggish or unresponsive. On the other hand, computing values
   eagerly can lead to slow or unnecessary re-renders.

   We make both this hook and [111]useStore available so that you can
   choose the approach that works best for your use-case.

Signature

                   Name                 Type
   [112]#Returns
   [113]#
   Zustand.[114]StoreApi<ReactFlowState>

Typescript

   This hook accepts a generic type argument of custom node & edge types.
   See this [115]section in our Typescript guide for more information.
const store = useStoreApi<CustomNodeType, CustomEdgeType>();

   (BUTTON)
   [116]Hooks[117]Utils

   A project by the xyflow team
   We are building and maintaining open source software for node-based UIs
   since 2019.

   Docs
   [118]Getting Started[119]API Reference[120]Examples[121]Showcase

   Social
   [122]Discord[123]Github[124]X / Twitter[125]Bluesky

   xyflow
   [126]Blog[127]Open Source[128]About[129]Contact[130]
   Careers hiring

   Legal
   [131]MIT License[132]Code of Conduct[133]Imprint

   [134]info@xyflow.com -- Copyright © 2024 [135]webkid GmbH. All rights
   reserved -- website design by [136]Facu Montanaro

