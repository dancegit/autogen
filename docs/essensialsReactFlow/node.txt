Page: reactflow.dev_files/reactflow.dev/api-reference/types/node.html
----------------------------------------
   [1]¥ We just released React Flow Components powered by shadcn CLI
   (BUTTON)
   [2]

   React Flow
   [3]Learn[4]Reference[5]Examples[6]Components[7]Showcase (BUTTON) More
   (BUTTON) Search
   [8]React Flow Pro (BUTTON)
   (BUTTON) Search
     * [9]API Reference
     * [10]<ReactFlow />
     * [11]<ReactFlowProvider />
     * [12]Components
          + [13]<Background />
          + [14]<BaseEdge />
          + [15]<ControlButton />
          + [16]<Controls />
          + [17]<EdgeLabelRenderer />
          + [18]<EdgeText />
          + [19]<Handle />
          + [20]<MiniMap />
          + [21]<NodeResizer />
          + [22]<NodeResizeControl />
          + [23]<NodeToolbar />
          + [24]<Panel />
          + [25]<ViewportPortal />
     * [26]Hooks
          + [27]useConnection()
          + [28]useEdges()
          + [29]useEdgesState()
          + [30]useHandleConnections()
          + [31]useKeyPress()
          + [32]useNodeId()
          + [33]useNodes()
          + [34]useInternalNode()
          + [35]useNodesData()
          + [36]useNodesInitialized()
          + [37]useNodesState()
          + [38]useOnSelectionChange()
          + [39]useOnViewportChange()
          + [40]useReactFlow()
          + [41]useStore()
          + [42]useStoreApi()
          + [43]useUpdateNodeInternals()
          + [44]useViewport()
     * [45]Types
          + [46]BackgroundVariant
          + [47]Connection
          + [48]ConnectionLineComponentProps
          + [49]ConnectionLineType
          + [50]ConnectionState
          + [51]CoordinateExtent
          + [52]DefaultEdgeOptions
          + [53]DeleteElements
          + [54]Edge
          + [55]EdgeChange
          + [56]EdgeMarker
          + [57]EdgeProps
          + [58]FitViewOptions
          + [59]Handle
          + [60]HandleConnection
          + [61]InternalNode
          + [62]MarkerType
          + [63]MiniMapNodeProps
          + [64]Node
          + [65]NodeChange
          + [66]NodeHandle
          + [67]NodeOrigin
          + [68]NodeProps
          + [69]OnEdgesChange
          + [70]OnNodesChange
          + [71]PanOnScrollMode
          + [72]PanelPosition
          + [73]Position
          + [74]ProOptions
          + [75]ReactFlowInstance
          + [76]ReactFlowJsonObject
          + [77]ResizeParams
          + [78]Viewport
          + [79]XYPosition
     * [80]Utils
          + [81]addEdge()
          + [82]applyEdgeChanges()
          + [83]applyNodeChanges()
          + [84]getBezierPath()
          + [85]getConnectedEdges()
          + [86]getIncomers()
          + [87]getNodesBounds()
          + [88]getOutgoers()
          + [89]getSimpleBezierPath()
          + [90]getSmoothStepPath()
          + [91]getStraightPath()
          + [92]getViewportForBounds()
          + [93]isEdge()
          + [94]isNode()
          + [95]reconnectEdge()
          + [96]getTransformForBounds()

   On This Page
     * [97]Fields
     * [98]Default node types
     * [99]Notes

   [100]Question? Give us feedback ->[101]Edit this page

   What's new?
   [102]Our examples have a fresh new look[103]React Flow
   CLI[105]...and more!
   [106]Reference[107]Types
   Node

Node

   Deprecation of parentNode property! We have renamed the parentNode
   option to parentId in version 11.11.0. The old property is still
   supported but will be removed in version 12.

   [108]Source on GitHub

   The Node type represents everything React Flow needs to know about a
   given node. Many of these properties can be manipulated both by React
   Flow or by you, but some such as width and height should be considered
   read-only.
export type Node<
  NodeData extends Record<string, unknown> = Record<string, unknown>,
  NodeType extends string = string,
> = {
  id: string;
  position: XYPosition;
  data: NodeData;
  type?: NodeType;
  sourcePosition?: Position;
  targetPosition?: Position;
  hidden?: boolean;
  selected?: boolean;
  dragging?: boolean;
  draggable?: boolean;
  selectable?: boolean;
  connectable?: boolean;
  resizing?: boolean;
  deletable?: boolean;
  dragHandle?: string;
  width?: number | null;
  height?: number | null;
  parentId?: string;
  zIndex?: number;
  extent?: 'parent' | CoordinateExtent;
  expandParent?: boolean;
  ariaLabel?: string;
  focusable?: boolean;
  style?: React.CSSProperties;
  className?: string;
  origin?: NodeOrigin;
  handles?: NodeHandle[];
  measured?: {
    width?: number;
    height?: number;
  };
};

   (BUTTON)

Fields

                  Name                Type
   [109]#id
   string
   [110]#position
   XYPosition
   [111]#data
   T
   [112]#type?
   U
   [113]#sourcePosition?
   Position
   [114]#targetPosition?
   Position
   [115]#hidden?
   boolean
   Whether or not the node should be visible on the canvas.
   [116]#selected?
   boolean
   [117]#dragging?
   boolean
   Whether or not the node is currently being dragged.
   [118]#draggable?
   boolean
   Whether or not the node is able to be dragged.
   [119]#selectable?
   boolean
   [120]#connectable?
   boolean
   [121]#resizing?
   boolean
   [122]#deletable?
   boolean
   [123]#dragHandle?
   string
   [124]#width?
   number | null
   [125]#height?
   number | null
   [126]#parentNode?
   string
   [127]#parentId?
   string
   [128]#zIndex?
   number
   [129]#extent?
   "parent" | CoordinateExtent
   [130]#expandParent?
   boolean
   When true, the parent node will automatically expand if this node is
   dragged to the edge of the parent node's bounds.
   [131]#ariaLabel?
   string
   [132]#focusable?
   boolean
   [133]#style?
   React.[134]CSSProperties
   [135]#className?
   string
   [136]#handles?
   NodeHandle[]
   [137]#origin?
   NodeOrigin
   [138]#measured?
   { width?: number, height?: number }

Default node types

   You can create any of React Flow's default nodes by setting the type
   property to one of the following values:
     * "default"
     * "input"
     * "output"
     * "group"

   If you don't set the type property at all, React Flow will fallback to
   the "default" node with both an input and output port.

   These default nodes are available even if you set the [139]nodeTypes
   prop to something else, unless you override any of these keys directly.

Notes

     * You shouldn't try to set the width or height of a node directly. It
       is calculated internally by React Flow and used when rendering the
       node in the viewport. To control a node's size you should use the
       style or className props to apply CSS styles instead.

   [140]Types[141]getTransformForBounds()

   A project by the xyflow team
   We are building and maintaining open source software for node-based UIs
   since 2019.

   Docs
   [142]Getting Started[143]API Reference[144]Examples[145]Showcase

   Social
   [146]Discord[147]Github[148]X / Twitter[149]Bluesky

   xyflow
   [150]Blog[151]Open Source[152]About[153]Contact[154]
   Careers hiring

   Legal
   [155]MIT License[156]Code of Conduct[157]Imprint

   [158]info@xyflow.com -- Copyright © 2024 [159]webkid GmbH. All rights
   reserved -- website design by [160]Facu Montanaro

