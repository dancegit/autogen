Page: reactflow.dev_files/reactflow.dev/learn/concepts/the-viewport.html
----------------------------------------
   [1]¥ We just released React Flow Components powered by shadcn CLI
   (BUTTON)
   [2]

   React Flow
   [3]Learn[4]Reference[5]Examples[6]Components[7]Showcase (BUTTON) More
   (BUTTON) Search
   [8]React Flow Pro (BUTTON)
   (BUTTON) Search
     * [9]Quickstart
     * (BUTTON) Concepts
          + [10]Introduction
          + [11]Terms and Definitions
          + [12]Core Concepts
          + [13]The Viewport
          + [14]Built-In Components
     * (BUTTON) Getting Started
          + [15]Installation
          + [16]Building a Flow
          + [17]Adding Interactivity
     * (BUTTON) Customizing React Flow
          + [18]Custom Nodes
          + [19]Custom Node Props
          + [20]Custom Edges
          + [21]Custom Edge Props
          + [22]Theming
     * (BUTTON) Layouting
          + [23]Layouting Libraries
          + [24]Sub-Flows
     * (BUTTON) Advanced Use
          + [25]Accessibility
          + [26]Testing
          + [27]TypeScript
          + [28]Uncontrolled Flows
          + [29]State Management
          + [30]Computing Flows
          + [31]Server Side Rendering
          + [32]Devtools
     * [33]Tutorials
          + [34]Slideshow App
          + [35]Web Audio API
          + [36]Mind Map App
     * (BUTTON) Troubleshooting
          + [37]Common Errors
          + [38]Remove Attribution
          + [39]Migrate to v12
          + [40]Migrate to v11
          + [41]Migrate to v10
     * [42]API Reference

   On This Page
     * [43]Default Viewport Controls
     * [44]Figma-like Viewport Controls

   [45]Question? Give us feedback ->[46]Edit this page

   What's new?
   [47]Our examples have a fresh new look[48]React Flow
   CLI[50]...and more!
   [51]Learn[52]Concepts
   The Viewport

Panning and Zooming

   The default pan and zoom behaviour of React Flow is inspired by
   [53]slippy maps. You pan by dragging and zoom by scrolling. You can
   customize this behaviour easily with the provided props:
     * panOnDrag: default: true
     * selectionOnDrag: default: false (available since 11.4.0)
     * panOnScroll: default: false (Overwrites zoomOnScroll)
     * panOnScrollSpeed: default: 0.5
     * panOnScrollMode: default: 'free'. 'free' (all directions),
       'vertical' (only vertical) or 'horizontal' (only horizontal)
     * zoomOnScroll: default: true
     * zoomOnPinch: default: true
     * zoomOnDoubleClick: default: true
     * preventScrolling: default: true (browser scroll behaviour is
       prevented)
     * zoomActivationKeyCode: default 'Meta'
     * panActivationKeyCode: default 'Space' (available since 11.4.0)

Default Viewport Controls

   As mentioned above, the default controls are:
     * pan: drag mouse
     * zoom: scroll
     * create selection: Shift + drag

   IFRAME:
   [54]https://example-apps.xyflow.com/react/learn/zoom-pan/index.html

   (BUTTON) Open in Stackblitz (BUTTON) Open in Codesandbox
   (BUTTON) App.jsx (BUTTON) edges.js (BUTTON) index.css (BUTTON)
   index.html (BUTTON) index.jsx (BUTTON) nodes.js
import { useCallback } from 'react';
import {
  ReactFlow,
  addEdge,
  useEdgesState,
  useNodesState,
} from '@xyflow/react';
import '@xyflow/react/dist/style.css';

import { initialNodes } from './nodes';
import { initialEdges } from './edges';

function Flow() {
  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);
  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);

  const onConnect = useCallback(
    (connection) => setEdges((eds) => addEdge(connection, eds)),
    [setEdges],
  );

  return (
    <ReactFlow
      nodes={nodes}
      edges={edges}
      onNodesChange={onNodesChange}
      onEdgesChange={onEdgesChange}
      onConnect={onConnect}
    />
  );
}

export default Flow;

   (BUTTON)

Figma-like Viewport Controls

   If you prefer figma/sketch/design tool controls you can set
   panOnScroll={true} and selectionOnDrag={true}:
     * pan: Space + drag mouse, scroll, middle or right mouse
     * zoom: pitch or cmd + scroll
     * create selection: drag mouse

   IFRAME:
   [55]https://example-apps.xyflow.com/react/learn/zoom-pan-2/index.html

   (BUTTON) Open in Stackblitz (BUTTON) Open in Codesandbox
   (BUTTON) App.jsx (BUTTON) edges.js (BUTTON) index.css (BUTTON)
   index.html (BUTTON) index.jsx (BUTTON) nodes.js
import { useCallback } from 'react';
import {
  ReactFlow,
  addEdge,
  SelectionMode,
  useEdgesState,
  useNodesState,
} from '@xyflow/react';
import '@xyflow/react/dist/style.css';

import { initialNodes } from './nodes';
import { initialEdges } from './edges';

const panOnDrag = [1, 2];

function Flow() {
  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);
  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);

  const onConnect = useCallback(
    (connection) => setEdges((eds) => addEdge(connection, eds)),
    [setEdges],
  );

  return (
    <ReactFlow
      nodes={nodes}
      edges={edges}
      onNodesChange={onNodesChange}
      onEdgesChange={onEdgesChange}
      onConnect={onConnect}
      panOnScroll
      selectionOnDrag
      panOnDrag={panOnDrag}
      selectionMode={SelectionMode.Partial}
    />
  );
}

export default Flow;

   (BUTTON)

   In this example we also set selectionMode={SelectionMode.Partial} to be
   able to add nodes to a selection that are only partially selected.
   [56]Quickstart[57]Slideshow App

   A project by the xyflow team
   We are building and maintaining open source software for node-based UIs
   since 2019.

   Docs
   [58]Getting Started[59]API Reference[60]Examples[61]Showcase

   Social
   [62]Discord[63]Github[64]X / Twitter[65]Bluesky

   xyflow
   [66]Blog[67]Open Source[68]About[69]Contact[70]
   Careers hiring

   Legal
   [71]MIT License[72]Code of Conduct[73]Imprint

   [74]info@xyflow.com -- Copyright © 2024 [75]webkid GmbH. All rights
   reserved -- website design by [76]Facu Montanaro

