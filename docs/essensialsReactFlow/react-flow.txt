Page: reactflow.dev_files/reactflow.dev/api-reference/react-flow.html
----------------------------------------
   [1]¥ We just released React Flow Components powered by shadcn CLI
   (BUTTON)
   [2]

   React Flow
   [3]Learn[4]Reference[5]Examples[6]Components[7]Showcase (BUTTON) More
   (BUTTON) Search
   [8]React Flow Pro (BUTTON)
   (BUTTON) Search
     * [9]API Reference
     * [10]<ReactFlow />
     * [11]<ReactFlowProvider />
     * [12]Components
          + [13]<Background />
          + [14]<BaseEdge />
          + [15]<ControlButton />
          + [16]<Controls />
          + [17]<EdgeLabelRenderer />
          + [18]<EdgeText />
          + [19]<Handle />
          + [20]<MiniMap />
          + [21]<NodeResizer />
          + [22]<NodeResizeControl />
          + [23]<NodeToolbar />
          + [24]<Panel />
          + [25]<ViewportPortal />
     * [26]Hooks
          + [27]useConnection()
          + [28]useEdges()
          + [29]useEdgesState()
          + [30]useHandleConnections()
          + [31]useKeyPress()
          + [32]useNodeId()
          + [33]useNodes()
          + [34]useInternalNode()
          + [35]useNodesData()
          + [36]useNodesInitialized()
          + [37]useNodesState()
          + [38]useOnSelectionChange()
          + [39]useOnViewportChange()
          + [40]useReactFlow()
          + [41]useStore()
          + [42]useStoreApi()
          + [43]useUpdateNodeInternals()
          + [44]useViewport()
     * [45]Types
          + [46]BackgroundVariant
          + [47]Connection
          + [48]ConnectionLineComponentProps
          + [49]ConnectionLineType
          + [50]ConnectionState
          + [51]CoordinateExtent
          + [52]DefaultEdgeOptions
          + [53]DeleteElements
          + [54]Edge
          + [55]EdgeChange
          + [56]EdgeMarker
          + [57]EdgeProps
          + [58]FitViewOptions
          + [59]Handle
          + [60]HandleConnection
          + [61]InternalNode
          + [62]MarkerType
          + [63]MiniMapNodeProps
          + [64]Node
          + [65]NodeChange
          + [66]NodeHandle
          + [67]NodeOrigin
          + [68]NodeProps
          + [69]OnEdgesChange
          + [70]OnNodesChange
          + [71]PanOnScrollMode
          + [72]PanelPosition
          + [73]Position
          + [74]ProOptions
          + [75]ReactFlowInstance
          + [76]ReactFlowJsonObject
          + [77]ResizeParams
          + [78]Viewport
          + [79]XYPosition
     * [80]Utils
          + [81]addEdge()
          + [82]applyEdgeChanges()
          + [83]applyNodeChanges()
          + [84]getBezierPath()
          + [85]getConnectedEdges()
          + [86]getIncomers()
          + [87]getNodesBounds()
          + [88]getOutgoers()
          + [89]getSimpleBezierPath()
          + [90]getSmoothStepPath()
          + [91]getStraightPath()
          + [92]getViewportForBounds()
          + [93]isEdge()
          + [94]isNode()
          + [95]reconnectEdge()
          + [96]getTransformForBounds()

   On This Page
     * [97]Common props
     * [98]Viewport props
     * [99]Edge props
     * [100]Event handlers
     * [101]General Events
     * [102]Node Events
     * [103]Edge Events
     * [104]Connection Events
     * [105]Pane Events
     * [106]Selection Events
     * [107]Interaction props
     * [108]Connection line props
     * [109]Keyboard props
     * [110]Style props
     * [111]Notes

   [112]Question? Give us feedback ->[113]Edit this page

   What's new?
   [114]Our examples have a fresh new look[115]React Flow
   CLI[117]...and more!
   [118]Reference<ReactFlow />

<ReactFlow />

   [119]Source on GitHub

   The <ReactFlow /> component is the heart of your React Flow
   application. It renders your nodes and edges, handles user interaction,
   and can manage its own state if used as an [120]uncontrolled flow.
import { ReactFlow } from '@xyflow/react'

export default function Flow() {
  return <ReactFlow
    nodes={...}
    edges={...}
    onNodesChange={...}
    ...
  />
}

   (BUTTON)

   This component takes a lot of different props, most of which are
   optional. We've tried to document them in groups that make sense to
   help you find your way.

Common props

   These are the props you will most commonly use when working with React
   Flow. If you are working with a controlled flow with custom nodes, you
   will likely use almost all of these!
                             Name                          Type Default
   [121]#nodes
   Node[]
   An array of nodes to render in a controlled flow.
   []

   [122]#edges
   Edge[]
   An array of edges to render in a controlled flow.
   []

   [123]#defaultNodes
   Node[]
   The initial nodes to render in an uncontrolled flow.
   []

   [124]#defaultEdges
   Edge[]
   The initial edges to render in an uncontrolled flow.
   []

   [125]#onNodesChange
   (changes: NodeChange[]) => void
   Use this event handler to add interactivity to a controlled flow. It is
   called on node drag, select, and move.

   [126]#onEdgesChange
   (changes: EdgeChange[]) => void
   Use this event handler to add interactivity to a controlled flow. It is
   called on edge select and remove.

   [127]#onConnect
   (connection: Connection) => void
   When a connection line is completed and two nodes are connected by the
   user, this event fires with the new connection. You can use the addEdge
   utility to convert the connection to a complete edge.

   [128]#nodeTypes
   [129]Record<String, React.[130]ComponentType<NodeProps>>
   If you want to use custom nodes in your flow, you need to let React
   Flow know about them. When rendering a new node, React Flow will look
   up that node's type in this object and render the corresponding
   component.
{
  input: InputNode,
  default: DefaultNode,
  output: OutputNode
  group: GroupNode
}

   [131]#edgeTypes
   [132]Record<String, React.[133]ComponentType<EdgeProps>>
   As with node types, this prop lets you use custom edges in your flow by
   mapping edge types to React components.
{
  default: BezierEdge,
  straight: StraightEdge,
  step: StepEdge,
  smoothstep: SmoothStepEdge
  simplebezier: SimpleBezier
}

   [134]#nodeOrigin
   [number, number]
   The origin of the node to use when placing it in the flow or looking up
   its x and y position. An origin of [0,0] means that a node's top left
   corner will be placed at the x and y position.
   [0,0]

   [135]#nodeDragThreshold
   number
   With a threshold greater than zero you can delay node drag events. If
   threshold equals 1, you need to drag the node 1 pixel before a drag
   event is fired. 1 is the default values, so clicks don't trigger drag
   events.
   1

   [136]#nodeClickDistance
   number
   The max distance between mousedown/up that will trigger a click.
   0

   [137]#paneClickDistance
   number
   The max distance between mousedown/up that will trigger a click.
   0

   [138]#style
   React.[139]CSSProperties

   [140]#className
   string

   [141]#proOptions
   ProOptions
   Our pro options are configuration settings intended for our Pro
   subscribers. Anyone is free to use them, though!

   [142]#colorMode
   "system" | "light" | "dark"
   React Flow has 2 built-in color themes: light and dark. By default it
   will try to adopt the users systems color theme.
   "system"

Viewport props

                  Name               Type Default
   [143]#defaultViewport
   Viewport
   Sets the initial position and zoom of the viewport. If a default
   viewport is provided but fitView is enabled, the default viewport will
   be ignored.
   { x: 0, y: 0, zoom: 1 }

   [144]#viewport
   Viewport
   When you pass a viewport prop, it's controlled and you also need to
   pass onViewportChange to handle internal changes.
   { x: 0, y: 0, zoom: 1 }

   [145]#onViewportChange
   (viewport: Viewport) => void
   Used when working with a controlled viewport for updating the user
   viewport state.

   [146]#fitView
   boolean
   When true, the flow will be zoomed and panned to fit all the nodes
   initially provided.
   false

   [147]#fitViewOptions
   FitViewOptions
   When you typically call fitView on a ReactFlowInstance, you can provide
   an object of options to customize its behaviour. This prop lets you do
   the same for the initial fitView call.

   [148]#minZoom
   number

   [149]#maxZoom
   number
   2

   [150]#snapToGrid
   boolean
   When enabled, nodes will snap to the grid when dragged.
   false

   [151]#snapGrid
   [number, number]
   If snapToGrid is enabled, this prop configures the grid that nodes will
   snap to.
   [25,25]

   [152]#onlyRenderVisibleElements
   boolean
   You can enable this optimisation to instruct React Flow to only render
   nodes and edges that would be visible in the viewport.
   false

   [153]#translateExtent
   CoordinateExtent
   By default the viewport extends infinitely. You can use this prop to
   set a boundary. The first pair of coordinates is the top left boundary
   and the second pair is the bottom right.
   [[-infty,-infty], [+infty,+infty]]

   [154]#nodeExtent
   CoordinateExtent
   As with translateExtent, this prop lets you set a boundary for
   governing where nodes can be placed.
   [[-infty,-infty], [+infty,+infty]]

   [155]#preventScrolling
   boolean
   Disabling this prop will allow the user to scroll the page even when
   their pointer is over the flow.
   true

   [156]#attributionPosition
   PanelPosition
   By default, React Flow will render a small attribution in the bottom
   right corner of the flow. You can use this prop to change its position
   in case you want to place something else there.
   "bottom-right"

Edge props

              Name           Type Default
   [157]#elevateEdgesOnSelect
   boolean
   Enabling this option will raise the z-index of edges connected to a
   node when selected.
   false

   [158]#defaultMarkerColor
   string
   "#b1b1b7"

   [159]#defaultEdgeOptions
   DefaultEdgeOptions
   Any defaults set here will be applied to all new edges that are added
   to the flow. Properties on a new edge will override these defaults if
   they exist.

   [160]#reconnectRadius
   number
   The radius around an edge connection that can trigger an edge
   reconnection.
   10

   [161]#edgesReconnectable
   boolean
   Whether or not edges can be updated once they are created. When both
   this prop is true and an onReconnect handler is provided, the user can
   drag an existing edge to a new source or target. Individual edges can
   override this value with their reconnectable property.
   true

Event handlers

   !!!

   It's important to remember to define any event handlers outside of your
   component or using React's useCallback hook. If you don't, this can
   cause React Flow to enter an infinite re-render loop!

General Events

                                   Name                                 Type
   [162]#onInit
   (instance: ReactFlowInstance) => void
   The onInit callback is called when the viewport is initialized. At this
   point you can use the instance to call methods like fitView or zoomTo.
   [163]#onError
   (code: string, message: string) => void
   Ocassionally something may happen that causes React Flow to error.
   Instead of exploding your application, we log a message to the console
   and then call this event handler. You might use it for additional
   logging or to show a message to the user.
   [164]#onDelete
   ({nodes: Node[], edges: Edge[]}) => void
   This handler gets called when a Node or Edge is deleted.
   [165]#onBeforeDelete
   ({nodes: Node[], edges: Edge[]}) => Promise<boolean | {nodes: Node[],
   edges: Edge[]}>
   This handler gets before Nodes or Edges are about to be deleted.
   Deletion can be aborted by returning false or the nodes and edges to be
   deleted can be modified.

Node Events

                                 Name                               Type
   [166]#onNodeClick
   (event: React.[167]MouseEvent, node: Node) => void
   [168]#onNodeDoubleClick
   (event: React.[169]MouseEvent, node: Node) => void
   [170]#onNodeDragStart
   (event: React.[171]MouseEvent, node: Node, nodes: Node[]) => void
   [172]#onNodeDrag
   (event: React.[173]MouseEvent, node: Node, nodes: Node[]) => void
   [174]#onNodeDragStop
   (event: React.[175]MouseEvent, node: Node, nodes: Node[]) => void
   [176]#onNodeMouseEnter
   (event: React.[177]MouseEvent, node: Node) => void
   [178]#onNodeMouseMove
   (event: React.[179]MouseEvent, node: Node) => void
   [180]#onNodeMouseLeave
   (event: React.[181]MouseEvent, node: Node) => void
   [182]#onNodeContextMenu
   (event: React.[183]MouseEvent, node: Node) => void
   [184]#onNodesDelete
   (nodes: Node[]) => void
   [185]#onNodesChange
   OnNodesChange
   Use this event handler to add interactivity to a controlled flow. It is
   called on node drag, select, and move.

Edge Events

                                 Name                               Type
   [186]#onEdgeClick
   (event: React.[187]MouseEvent, edge: Edge) => void
   [188]#onEdgeDoubleClick
   (event: React.[189]MouseEvent, edge: Edge) => void
   [190]#onEdgeMouseEnter
   (event: React.[191]MouseEvent, edge: Edge) => void
   [192]#onEdgeMouseMove
   (event: React.[193]MouseEvent, edge: Edge) => void
   [194]#onEdgeMouseLeave
   (event: React.[195]MouseEvent, edge: Edge) => void
   [196]#onEdgeContextMenu
   (event: React.[197]MouseEvent, edge: Edge) => void
   [198]#onReconnect
   (oldEdge: Edge, newConnection: Connection) => void
   This handler is called when the source or target of an reconnectable
   edge is dragged from the current node. It will fire even if the edge's
   source or target do not end up changing. You can use the reconnectEdge
   utility to convert the connection to a new edge.
   [199]#onReconnectStart
   (event: React.[200]MouseEvent, edge: Edge, handleType: "source" |
   "target") => void
   This event fires when the user begins dragging the source or target of
   an editable edge.
   [201]#onReconnectEnd
   (event: React.[202]MouseEvent, edge: Edge, handleType: "source" |
   "target", connectionState: Omit<ConnectionState, 'inProgress'>) => void
   This event fires when the user releases the source or target of an
   editable edge. It is called even if an edge update does not occur. You
   can use the fourth connectionState parameter to have different
   behaviour when a reconnection was unsuccessful.
   [203]#onEdgesDelete
   (edges: Edge[]) => void
   [204]#onEdgesChange
   OnEdgesChange
   Use this event handler to add interactivity to a controlled flow. It is
   called on edge select and remove.

Connection Events

                                   Name                                 Type
   [205]#onConnect
   (connection: Connection) => void
   When a connection line is completed and two nodes are connected by the
   user, this event fires with the new connection. You can use the addEdge
   utility to convert the connection to a complete edge.
   [206]#onConnectStart
   (event: React.[207]MouseEvent, params: { nodeId: string | null;
   handleId: string | null; handleType: "source" | "target" | null; }) =>
   void
   [208]#onConnectEnd
   (event: React.[209]MouseEvent, connectionState: Omit<ConnectionState,
   'inProgress'>) => void
   This callback will fire regardless of whether a valid connection could
   be made or not. You can use the second connectionState parameter to
   have different behaviour when a connection was unsuccessful.
   [210]#onClickConnectStart
   (event: React.[211]MouseEvent, params: { nodeId: string | null;
   handleId: string | null; handleType: "source" | "target" | null; }) =>
   void
   [212]#onClickConnectEnd
   (event: React.[213]MouseEvent) => void
   [214]#isValidConnection
   (connection: Connection) => boolean
   This callback can be used to validate a new connection. If you return
   false, the edge will not be added to your flow. If you have custom
   connection logic its preferred to use this callback over the
   isValidConnection prop on the handle component for performance reasons.

Pane Events

                                Name                             Type
   [215]#onMove
   (event: React.[216]MouseEvent | React.TouchEvent | null, data:
   Viewport) => void
   This event handler is called while the user is either panning or
   zooming the viewport.
   [217]#onMoveStart
   (event: React.[218]MouseEvent | React.TouchEvent | null, data:
   Viewport) => void
   This event handler is called when the user begins to pan or zoom the
   viewport.
   [219]#onMoveEnd
   (event: React.[220]MouseEvent | React.TouchEvent | null, data:
   Viewport) => void
   This event handler is called while the user stops either panning or
   zooming the viewport.
   [221]#onPaneClick
   (event: React.[222]MouseEvent) => void
   [223]#onPaneContextMenu
   (event: React.[224]MouseEvent) => void
   [225]#onPaneScroll
   (event: React.[226]MouseEvent) => void
   [227]#onPaneMouseMove
   (event: React.[228]MouseEvent) => void
   [229]#onPaneMouseEnter
   (event: React.[230]MouseEvent) => void
   [231]#onPaneMouseLeave
   (event: React.[232]MouseEvent) => void

Selection Events

                           Name                         Type
   [233]#onSelectionChange
   (params: { nodes: Node[]; edges: Edge[]; }) => void
   [234]#onSelectionDragStart
   (event: React.[235]MouseEvent, nodes: Node[]) => void
   [236]#onSelectionDrag
   (event: React.[237]MouseEvent, nodes: Node[]) => void
   [238]#onSelectionDragStop
   (event: React.[239]MouseEvent, nodes: Node[]) => void
   [240]#onSelectionStart
   () => void
   [241]#onSelectionEnd
   () => void
   [242]#onSelectionContextMenu
   (event: React.[243]MouseEvent, nodes: Node[]) => void
   This event handler is called when a user right-clicks on a node
   selection.

Interaction props

                Name              Type Default
   [244]#nodesDraggable
   boolean
   Controls whether all nodes should be draggable or not. Individual nodes
   can override this setting by setting their draggable prop. If you want
   to use the mouse handlers on non-draggable nodes, you need to add the
   "nopan" class to those nodes.
   true

   [245]#nodesConnectable
   boolean
   Controls whether all nodes should be connectable or not. Individual
   nodes can override this setting by setting their connectable prop.
   true

   [246]#nodesFocusable
   boolean
   When true, focus between nodes can be cycled with the Tab key and
   selected with the Enter key. This option can be overriden by individual
   nodes by setting their focusable prop.
   true

   [247]#edgesFocusable
   boolean
   When true, focus between edges can be cycled with the Tab key and
   selected with the Enter key. This option can be overriden by individual
   edges by setting their focusable prop.
   true

   [248]#elementsSelectable
   boolean
   When true, elements (nodes and edges) can be selected by clicking on
   them. This option can be overriden by individual elements by setting
   their selectable prop.
   true

   [249]#autoPanOnConnect
   boolean
   When try, the viewport will pan automatically when the cursor moves to
   the edge of the viewport while creating a connection.
   true

   [250]#autoPanOnNodeDrag
   boolean
   When true, the viewport will pan automatically when the cursor moves to
   the edge of the viewport while dragging a node.
   true

   [251]#autoPanSpeed
   number
   The speed at which the viewport will pan for autoPanOnNodeDrag and
   autoPanOnConnect
   20

   [252]#panOnDrag
   boolean | (0 | 1 | 2 | 3 | 4)[]
   Enabling this prop allows users to pan the viewport by clicking and
   dragging. You can also set this prop to an array of numbers to limit
   which mouse buttons can activate panning. For example, [0,2] would
   allow panning with the left and right mouse buttons.
   true

   [253]#selectionOnDrag
   boolean
   false

   [254]#selectionMode
   "partial" | "full"
   When set to "partial", when the user creates a selection box by click
   and dragging nodes that are only partially in the box are still
   selected.
   "full"

   [255]#panOnScroll
   boolean
   false

   [256]#panOnScrollSpeed
   number

   [257]#panOnScrollMode
   PanOnScrollMode
   This prop is used to limit the direction of panning when panOnScroll is
   enabled. The "free" option allows panning in any direction.
   PanOnScrollMode.Free

   [258]#zoomOnScroll
   boolean
   true

   [259]#zoomOnPinch
   boolean
   true

   [260]#zoomOnDoubleClick
   boolean
   true

   [261]#selectNodesOnDrag
   boolean
   true

   [262]#elevateNodesOnSelect
   boolean
   Enabling this option will raise the z-index of nodes when they are
   selected.
   true

   [263]#connectOnClick
   boolean
   The connectOnClick option lets you click or tap on a source handle to
   start a connection and then click on a target handle to complete the
   connection. If you set this option to false, users will need to drag
   the connection line to the target handle to create a connection.
   true

   [264]#connectionMode
   "loose" | "strict"
   A loose connection mode will allow you to connect handles of any type
   to one another. The strict mode will only allow you to connect source
   handles to target handles.
   "strict"

Connection line props

                            Name                         Type Default
   [265]#connectionRadius
   number
   The radius around a handle where you drop a connection line to create a
   new edge.
   20

   [266]#connectionLineType
   ConnectionLineType
   The type of edge path to use for connection lines. Although created
   edges can be of any type, React Flow needs to know what type of path to
   render for the connection line before the edge is created!
   ConnectionLineType.Bezier

   [267]#connectionLineStyle
   React.[268]CSSProperties

   [269]#connectionLineComponent
   React.[270]ComponentType<ConnectionLineComponentProps>

   [271]#connectionLineWrapperStyles
   React.[272]CSSProperties

Keyboard props

   React Flow let's you pass in a few different keyboard shortcuts as
   another way to interact with your flow. We've tried to set up sensible
   defaults like using backspace to delete any selected nodes or edges,
   but you can use these props to set your own.

   To disable any of these shortcuts, pass in null to to the prop you want
   to disable.
                       Name                     Type Default
   [273]#deleteKeyCode
   string | string[] | null
   If set, pressing the key or chord will delete any selected nodes and
   edges. Passing an array represents mutliple keys that can be pressed.
   For example, ["Delete", "Backspace"] will delete selected elements when
   either key is pressed.
   "Backspace"

   [274]#selectionKeyCode
   string | string[] | null
   If set, holding this key will let you click and drag to draw a
   selection box around multiple nodes and edges. Passing an array
   represents mutliple keys that can be pressed. For example, ["Shift",
   "Meta"] will allow you to draw a selection box when either key is
   pressed.
   "Shift"

   [275]#multiSelectionKeyCode
   string | string[] | null
   "Meta" for MacOs, "Control" for other systems

   [276]#zoomActivationKeyCode
   string | string[] | null
   If a key is set, you can zoom the viewport while that key is held down
   even if panOnScroll is set to false. By setting this prop to null you
   can disable this functionality.
   "Meta" for MacOs, "Control" for other systems

   [277]#panActivationKeyCode
   string | string[] | null
   If a key is set, you can pan the viewport while that key is held down
   even if panOnScroll is set to false. By setting this prop to null you
   can disable this functionality.
   "Space"

   [278]#disableKeyboardA11y
   boolean
   You can use this prop to disable keyboard accessibility features such
   as selecting nodes or moving selected nodes with the arrow keys.
   false

Style props

   Applying certain classes to elements rendered inside the canvas will
   change how interactions are handled. These props let you configure
   those class names if you need to.
            Name         Type Default
   [279]#noPanClassName
   string
   If an element in the canvas does not stop mouse events from
   propagating, clicking and dragging that element will pan the viewport.
   Adding the "nopan" class prevents this behaviour and this prop allows
   you to change the name of that class.
   "nopan"

   [280]#noDragClassName
   string
   If a node is draggable, clicking and dragging that node will move it
   around the canvas. Adding the "nodrag" class prevents this behaviour
   and this prop allows you to change the name of that class.
   "nodrag"

   [281]#noWheelClassName
   string
   Typically, scrolling the mouse wheel when the mouse is over the canvas
   will zoom the viewport. Adding the "nowheel" class to an element in the
   canvas will prevent this behaviour and this prop allows you to change
   the name of that class.
   "nowheel"

Notes

     * The props of this component get exported as ReactFlowProps

   [282]API Reference[283]<ReactFlowProvider />

   A project by the xyflow team
   We are building and maintaining open source software for node-based UIs
   since 2019.

   Docs
   [284]Getting Started[285]API Reference[286]Examples[287]Showcase

   Social
   [288]Discord[289]Github[290]X / Twitter[291]Bluesky

   xyflow
   [292]Blog[293]Open Source[294]About[295]Contact[296]
   Careers hiring

   Legal
   [297]MIT License[298]Code of Conduct[299]Imprint

   [300]info@xyflow.com -- Copyright © 2024 [301]webkid GmbH. All rights
   reserved -- website design by [302]Facu Montanaro

