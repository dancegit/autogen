Page: reactflow.dev_files/reactflow.dev/learn/customization/custom-nodes.html
----------------------------------------
   [1]¥ We just released React Flow Components powered by shadcn CLI
   (BUTTON)
   [2]

   React Flow
   [3]Learn[4]Reference[5]Examples[6]Components[7]Showcase (BUTTON) More
   (BUTTON) Search
   [8]React Flow Pro (BUTTON)
   (BUTTON) Search
     * [9]Quickstart
     * (BUTTON) Concepts
          + [10]Introduction
          + [11]Terms and Definitions
          + [12]Core Concepts
          + [13]The Viewport
          + [14]Built-In Components
     * (BUTTON) Getting Started
          + [15]Installation
          + [16]Building a Flow
          + [17]Adding Interactivity
     * (BUTTON) Customizing React Flow
          + [18]Custom Nodes
          + [19]Custom Node Props
          + [20]Custom Edges
          + [21]Custom Edge Props
          + [22]Theming
     * (BUTTON) Layouting
          + [23]Layouting Libraries
          + [24]Sub-Flows
     * (BUTTON) Advanced Use
          + [25]Accessibility
          + [26]Testing
          + [27]TypeScript
          + [28]Uncontrolled Flows
          + [29]State Management
          + [30]Computing Flows
          + [31]Server Side Rendering
          + [32]Devtools
     * [33]Tutorials
          + [34]Slideshow App
          + [35]Web Audio API
          + [36]Mind Map App
     * (BUTTON) Troubleshooting
          + [37]Common Errors
          + [38]Remove Attribution
          + [39]Migrate to v12
          + [40]Migrate to v11
          + [41]Migrate to v10
     * [42]API Reference

   On This Page
     * [43]Implementing the Custom Node
     * [44]Adding the Node Type
     * [45]Using Multiple Handles

   [46]Question? Give us feedback ->[47]Edit this page

   What's new?
   [48]Our examples have a fresh new look[49]React Flow
   CLI[51]...and more!
   [52]LearnCustomizing React Flow
   Custom Nodes

Custom Nodes

   A powerful feature of React Flow is the ability to add custom nodes.
   Within your custom nodes you can render everything you want. You can
   define multiple source and target handles and render form inputs or
   charts for example. In this section we will implement a node with an
   input field that updates some text in another part of the application.

Implementing the Custom Node

   A custom node is a React component that is wrapped to provide basic
   functionality like selecting or dragging. From the wrapper component we
   are passing props like the position or the data besides [53]other
   props. Let's start to implement the TextUpdaterNode. We are using the
   [54]Handle component to be able to connect our custom node with other
   nodes and add an input field to the node:
import { useCallback } from 'react';
import { Handle, Position } from '@xyflow/react';

const handleStyle = { left: 10 };

function TextUpdaterNode({ data }) {
  const onChange = useCallback((evt) => {
    console.log(evt.target.value);
  }, []);

  return (
    <>
      <Handle type="target" position={Position.Top} />
      <div>
        <label htmlFor="text">Text:</label>
        <input id="text" name="text" onChange={onChange} className="nodrag" />
      </div>
      <Handle type="source" position={Position.Bottom} id="a" />
      <Handle
        type="source"
        position={Position.Bottom}
        id="b"
        style={handleStyle}
      />
    </>
  );
}

   (BUTTON)

   As you see we've added the class name "nodrag" to the input. This
   prevents dragging within the input field and lets us select text for
   example.

Adding the Node Type

   You can add a new node type to React Flow by adding it to the nodeTypes
   prop. It's important that the nodeTypes are memoized or defined outside
   of the component. Otherwise React creates a new object on every render
   which leads to performance issues and bugs.
const nodeTypes = useMemo(() => ({ textUpdater: TextUpdaterNode }), []);

return <ReactFlow nodeTypes={nodeTypes} />;

   (BUTTON)

   After defining your new node type, you can use it by using the type
   node option:
const nodes = [
  {
    id: 'node-1',
    type: 'textUpdater',
    position: { x: 0, y: 0 },
    data: { value: 123 },
  },
];

   (BUTTON)

   After putting all together and adding some basic styles we get a custom
   node that prints text to the console:

   IFRAME:
   [55]https://example-apps.xyflow.com/react/learn/custom-node/index.html

   (BUTTON) Open in Stackblitz (BUTTON) Open in Codesandbox
   (BUTTON) App.jsx (BUTTON) TextUpdaterNode.jsx (BUTTON) index.css
   (BUTTON) index.html (BUTTON) index.jsx
import { useCallback, useState } from 'react';
import {
  ReactFlow,
  addEdge,
  applyEdgeChanges,
  applyNodeChanges,
} from '@xyflow/react';
import '@xyflow/react/dist/style.css';

import TextUpdaterNode from './TextUpdaterNode';

const rfStyle = {
  backgroundColor: '#B8CEFF',
};

const initialNodes = [
  {
    id: 'node-1',
    type: 'textUpdater',
    position: { x: 0, y: 0 },
    data: { value: 123 },
  },
];
// we define the nodeTypes outside of the component to prevent re-renderings
// you could also use useMemo inside the component
const nodeTypes = { textUpdater: TextUpdaterNode };

function Flow() {
  const [nodes, setNodes] = useState(initialNodes);
  const [edges, setEdges] = useState([]);

  const onNodesChange = useCallback(
    (changes) => setNodes((nds) => applyNodeChanges(changes, nds)),
    [setNodes],
  );
  const onEdgesChange = useCallback(
    (changes) => setEdges((eds) => applyEdgeChanges(changes, eds)),
    [setEdges],
  );
  const onConnect = useCallback(
    (connection) => setEdges((eds) => addEdge(connection, eds)),
    [setEdges],
  );

  return (
    <ReactFlow
      nodes={nodes}
      edges={edges}
      onNodesChange={onNodesChange}
      onEdgesChange={onEdgesChange}
      onConnect={onConnect}
      nodeTypes={nodeTypes}
      fitView
      style={rfStyle}
    />
  );
}

export default Flow;

   (BUTTON)

Using Multiple Handles

   As you can see we added two source handles to the node so that it has
   two outputs. If you want to connect other nodes with these specific
   handles, the node id is not enough but you also need to pass the
   specific handle id. In this case one handle has the id "a" and the
   other one "b". Handle specific edges use the sourceHandle or
   targetHandle options that reference a handle within a node:
const initialEdges = [
  { id: 'edge-1', source: 'node-1', sourceHandle: 'a', target: 'node-2' },
  { id: 'edge-2', source: 'node-1', sourceHandle: 'b', target: 'node-3' },
];

   (BUTTON)

   In this case the source node is node-1 for both handles but the handle
   ids are different. One comes from handle id "a" and the other one from
   "b". Both edges also have different target nodes:

   IFRAME:
   [56]https://example-apps.xyflow.com/react/learn/custom-node-2/index.htm
   l

   (BUTTON) Open in Stackblitz (BUTTON) Open in Codesandbox
   (BUTTON) App.jsx (BUTTON) TextUpdaterNode.jsx (BUTTON) index.css
   (BUTTON) index.html (BUTTON) index.jsx
import { useCallback, useState } from 'react';
import {
  ReactFlow,
  addEdge,
  applyEdgeChanges,
  applyNodeChanges,
} from '@xyflow/react';
import '@xyflow/react/dist/style.css';

import TextUpdaterNode from './TextUpdaterNode';

const rfStyle = {
  backgroundColor: '#B8CEFF',
};

const initialNodes = [
  {
    id: 'node-1',
    type: 'textUpdater',
    position: { x: 0, y: 0 },
    data: { value: 123 },
  },
  {
    id: 'node-2',
    type: 'output',
    targetPosition: 'top',
    position: { x: 0, y: 200 },
    data: { label: 'node 2' },
  },
  {
    id: 'node-3',
    type: 'output',
    targetPosition: 'top',
    position: { x: 200, y: 200 },
    data: { label: 'node 3' },
  },
];

const initialEdges = [
  { id: 'edge-1', source: 'node-1', target: 'node-2', sourceHandle: 'a' },
  { id: 'edge-2', source: 'node-1', target: 'node-3', sourceHandle: 'b' },
];

// we define the nodeTypes outside of the component to prevent re-renderings
// you could also use useMemo inside the component
const nodeTypes = { textUpdater: TextUpdaterNode };

function Flow() {
  const [nodes, setNodes] = useState(initialNodes);
  const [edges, setEdges] = useState(initialEdges);

  const onNodesChange = useCallback(
    (changes) => setNodes((nds) => applyNodeChanges(changes, nds)),
    [setNodes],
  );
  const onEdgesChange = useCallback(
    (changes) => setEdges((eds) => applyEdgeChanges(changes, eds)),
    [setEdges],
  );
  const onConnect = useCallback(
    (connection) => setEdges((eds) => addEdge(connection, eds)),
    [setEdges],
  );

  return (
    <ReactFlow
      nodes={nodes}
      edges={edges}
      onNodesChange={onNodesChange}
      onEdgesChange={onEdgesChange}
      onConnect={onConnect}
      nodeTypes={nodeTypes}
      fitView
      style={rfStyle}
    />
  );
}

export default Flow;

   (BUTTON)

   Note that if you are programmatically changing the position or number
   of handles in your custom node, you will need to use the
   [57]useUpdateNodeInternals hook to properly notify ReactFlow of
   changes. From here you should be able to build your custom nodes. In
   most cases we recommend to use custom nodes only. The built-in ones are
   just basic examples. You can find a list of the passed props and more
   information in the [58]custom node API section.
   [59]Quickstart[60]Slideshow App

   A project by the xyflow team
   We are building and maintaining open source software for node-based UIs
   since 2019.

   Docs
   [61]Getting Started[62]API Reference[63]Examples[64]Showcase

   Social
   [65]Discord[66]Github[67]X / Twitter[68]Bluesky

   xyflow
   [69]Blog[70]Open Source[71]About[72]Contact[73]
   Careers hiring

   Legal
   [74]MIT License[75]Code of Conduct[76]Imprint

   [77]info@xyflow.com -- Copyright © 2024 [78]webkid GmbH. All rights
   reserved -- website design by [79]Facu Montanaro

