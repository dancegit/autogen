Page: reactflow.dev_files/reactflow.dev/api-reference/components/node-resize-control.html
----------------------------------------
   [1]¥ We just released React Flow Components powered by shadcn CLI
   (BUTTON)
   [2]

   React Flow
   [3]Learn[4]Reference[5]Examples[6]Components[7]Showcase (BUTTON) More
   (BUTTON) Search
   [8]React Flow Pro (BUTTON)
   (BUTTON) Search
     * [9]API Reference
     * [10]<ReactFlow />
     * [11]<ReactFlowProvider />
     * [12]Components
          + [13]<Background />
          + [14]<BaseEdge />
          + [15]<ControlButton />
          + [16]<Controls />
          + [17]<EdgeLabelRenderer />
          + [18]<EdgeText />
          + [19]<Handle />
          + [20]<MiniMap />
          + [21]<NodeResizer />
          + [22]<NodeResizeControl />
          + [23]<NodeToolbar />
          + [24]<Panel />
          + [25]<ViewportPortal />
     * [26]Hooks
          + [27]useConnection()
          + [28]useEdges()
          + [29]useEdgesState()
          + [30]useHandleConnections()
          + [31]useKeyPress()
          + [32]useNodeId()
          + [33]useNodes()
          + [34]useInternalNode()
          + [35]useNodesData()
          + [36]useNodesInitialized()
          + [37]useNodesState()
          + [38]useOnSelectionChange()
          + [39]useOnViewportChange()
          + [40]useReactFlow()
          + [41]useStore()
          + [42]useStoreApi()
          + [43]useUpdateNodeInternals()
          + [44]useViewport()
     * [45]Types
          + [46]BackgroundVariant
          + [47]Connection
          + [48]ConnectionLineComponentProps
          + [49]ConnectionLineType
          + [50]ConnectionState
          + [51]CoordinateExtent
          + [52]DefaultEdgeOptions
          + [53]DeleteElements
          + [54]Edge
          + [55]EdgeChange
          + [56]EdgeMarker
          + [57]EdgeProps
          + [58]FitViewOptions
          + [59]Handle
          + [60]HandleConnection
          + [61]InternalNode
          + [62]MarkerType
          + [63]MiniMapNodeProps
          + [64]Node
          + [65]NodeChange
          + [66]NodeHandle
          + [67]NodeOrigin
          + [68]NodeProps
          + [69]OnEdgesChange
          + [70]OnNodesChange
          + [71]PanOnScrollMode
          + [72]PanelPosition
          + [73]Position
          + [74]ProOptions
          + [75]ReactFlowInstance
          + [76]ReactFlowJsonObject
          + [77]ResizeParams
          + [78]Viewport
          + [79]XYPosition
     * [80]Utils
          + [81]addEdge()
          + [82]applyEdgeChanges()
          + [83]applyNodeChanges()
          + [84]getBezierPath()
          + [85]getConnectedEdges()
          + [86]getIncomers()
          + [87]getNodesBounds()
          + [88]getOutgoers()
          + [89]getSimpleBezierPath()
          + [90]getSmoothStepPath()
          + [91]getStraightPath()
          + [92]getViewportForBounds()
          + [93]isEdge()
          + [94]isNode()
          + [95]reconnectEdge()
          + [96]getTransformForBounds()

   On This Page
     * [97]Props

   [98]Question? Give us feedback ->[99]Edit this page

   What's new?
   [100]Our examples have a fresh new look[101]React Flow
   CLI[103]...and more!
   [104]Reference[105]Components
   <NodeResizeControl />

<NodeResizeControl />

   [106]Source on GitHub

   To create your own resizing UI, you can use the NodeResizeControl
   component where you can pass children (such as icons).

Props

   For TypeScript users, the props type for the <NodeResizeControl />
   component is exported as ResizeControlProps.
   Name Type Default
   [107]#nodeId
   string

   [108]#position?
   "top" | "bottom" | "left" | "right" | "top-left" | "top-right" |
   "bottom-left" | "bottom-right"
"bottom-right"

   [109]#variant?
   "handle" | "line"
"handle"

   [110]#keepAspectRatio?
   boolean
false

   [111]#minWidth?
   number
10

   [112]#maxWidth?
   number
Number.MAX_SAFE_INTEGER

   [113]#minHeight?
   number
10

   [114]#maxHeight?
   number
Number.MAX_SAFE_INTEGER

   [115]#color?
   string

   [116]#style?
   React.[117]CSSProperties

   [118]#className?
   string

   [119]#children?
   React.[120]ReactNode

   [121]#shouldResize?
   (event: D3.[122]DragEvent, params: ResizeParams & { direction: number[]
   }) => boolean

   [123]#onResizeStart?
   (event: D3.[124]DragEvent, params: ResizeParams) => void

   [125]#shouldResize?
   (event: D3.[126]DragEvent, params: ResizeParams & { direction: number[]
   }) => boolean

   [127]#onResizeEnd?
   (event: D3.[128]DragEvent, params: ResizeParams) => void

   [129]Components[130]Types

   A project by the xyflow team
   We are building and maintaining open source software for node-based UIs
   since 2019.

   Docs
   [131]Getting Started[132]API Reference[133]Examples[134]Showcase

   Social
   [135]Discord[136]Github[137]X / Twitter[138]Bluesky

   xyflow
   [139]Blog[140]Open Source[141]About[142]Contact[143]
   Careers hiring

   Legal
   [144]MIT License[145]Code of Conduct[146]Imprint

   [147]info@xyflow.com -- Copyright © 2024 [148]webkid GmbH. All rights
   reserved -- website design by [149]Facu Montanaro

