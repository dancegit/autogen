Page: reactflow.dev_files/reactflow.dev/learn/getting-started/building-a-flow.html
----------------------------------------
   [1]¥ We just released React Flow Components powered by shadcn CLI
   (BUTTON)
   [2]

   React Flow
   [3]Learn[4]Reference[5]Examples[6]Components[7]Showcase (BUTTON) More
   (BUTTON) Search
   [8]React Flow Pro (BUTTON)
   (BUTTON) Search
     * [9]Quickstart
     * (BUTTON) Concepts
          + [10]Introduction
          + [11]Terms and Definitions
          + [12]Core Concepts
          + [13]The Viewport
          + [14]Built-In Components
     * (BUTTON) Getting Started
          + [15]Installation
          + [16]Building a Flow
          + [17]Adding Interactivity
     * (BUTTON) Customizing React Flow
          + [18]Custom Nodes
          + [19]Custom Node Props
          + [20]Custom Edges
          + [21]Custom Edge Props
          + [22]Theming
     * (BUTTON) Layouting
          + [23]Layouting Libraries
          + [24]Sub-Flows
     * (BUTTON) Advanced Use
          + [25]Accessibility
          + [26]Testing
          + [27]TypeScript
          + [28]Uncontrolled Flows
          + [29]State Management
          + [30]Computing Flows
          + [31]Server Side Rendering
          + [32]Devtools
     * [33]Tutorials
          + [34]Slideshow App
          + [35]Web Audio API
          + [36]Mind Map App
     * (BUTTON) Troubleshooting
          + [37]Common Errors
          + [38]Remove Attribution
          + [39]Migrate to v12
          + [40]Migrate to v11
          + [41]Migrate to v10
     * [42]API Reference

   On This Page
     * [43]Getting Started
     * [44]Adding Nodes
     * [45]Adding an Edge

   [46]Question? Give us feedback ->[47]Edit this page

   What's new?
   [48]Our examples have a fresh new look[49]React Flow
   CLI[51]...and more!
   [52]Learn[53]Getting Started
   Building a Flow

Building a Flow

   In this section we are explaining how to create a controlled flow
   component. Now that you've installed React Flow into your React
   project, all files are in place to start using React Flow.

Getting Started

   Let's create an empty flow with a controls panel and a background. For
   this we need to import the components from the reactflow package:
import { ReactFlow, Background, Controls } from '@xyflow/react';

   (BUTTON)

   We can now use the components to render an empty flow:

   IFRAME:
   [54]https://example-apps.xyflow.com/react/learn/getting-started-1/index
   .html

   (BUTTON) Open in Stackblitz (BUTTON) Open in Codesandbox
   (BUTTON) App.jsx (BUTTON) index.css (BUTTON) index.html (BUTTON)
   index.jsx
import { ReactFlow, Controls, Background } from '@xyflow/react';
import '@xyflow/react/dist/style.css';

function Flow() {
  return (
    <div style={{ height: '100%' }}>
      <ReactFlow>
        <Background />
        <Controls />
      </ReactFlow>
    </div>
  );
}

export default Flow;

   (BUTTON)

   There are three important things to keep in mind here:
       uses its parent dimensions.
       id prop to each component to make React Flow work properly.

Adding Nodes

   Now that the flow is set up, let's add some nodes. To do this, you need
   to create an array with [55]node objects like this:
const nodes = [
  {
    id: '1', // required
    position: { x: 0, y: 0 }, // required
    data: { label: 'Hello' }, // required
  },
];

   (BUTTON)

   These nodes can now be added to the flow:

   IFRAME:
   [56]https://example-apps.xyflow.com/react/learn/getting-started-2/index
   .html

   (BUTTON) Open in Stackblitz (BUTTON) Open in Codesandbox
   (BUTTON) App.jsx (BUTTON) index.css (BUTTON) index.html (BUTTON)
   index.jsx
import { ReactFlow, Controls, Background } from '@xyflow/react';
import '@xyflow/react/dist/style.css';

const nodes = [
  {
    id: '1',
    position: { x: 0, y: 0 },
    data: { label: 'Hello' },
  },
];

function Flow() {
  return (
    <div style={{ height: '100%' }}>
      <ReactFlow nodes={nodes}>
        <Background />
        <Controls />
      </ReactFlow>
    </div>
  );
}

export default Flow;

   (BUTTON)

   Let's add another node, configure labels and use the node type input
   for the first node.
const nodes = [
  {
    id: '1',
    position: { x: 0, y: 0 },
    data: { label: 'Hello' },
    type: 'input',
  },
  {
    id: '2',
    position: { x: 100, y: 100 },
    data: { label: 'World' },
  },
];

   (BUTTON)

   IFRAME:
   [57]https://example-apps.xyflow.com/react/learn/getting-started-3/index
   .html

   (BUTTON) Open in Stackblitz (BUTTON) Open in Codesandbox
   (BUTTON) App.jsx (BUTTON) index.css (BUTTON) index.html (BUTTON)
   index.jsx
import { ReactFlow, Controls, Background } from '@xyflow/react';
import '@xyflow/react/dist/style.css';

const nodes = [
  {
    id: '1',
    data: { label: 'Hello' },
    position: { x: 0, y: 0 },
    type: 'input',
  },
  {
    id: '2',
    data: { label: 'World' },
    position: { x: 100, y: 100 },
  },
];

function Flow() {
  return (
    <div style={{ height: '100%' }}>
      <ReactFlow nodes={nodes}>
        <Background />
        <Controls />
      </ReactFlow>
    </div>
  );
}

export default Flow;

   (BUTTON)

   There are plenty of ways to configure nodes. You can see the full list
   of options on the [58]node option site.

   This looks good. Let's attach these two nodes.

Adding an Edge

   Now that we have two nodes, let's connect them with an edge.

   To make an edge, we need to specify two attributes: the source node
   (where the edge begins) and the target node (where the edge ends). We
   use the id of the two nodes to specify this (in our example, our two
   nodes have ids of "1" and "2"):
const edges = [{ id: '1-2', source: '1', target: '2' }];

   (BUTTON)

   IFRAME:
   [59]https://example-apps.xyflow.com/react/learn/getting-started-4/index
   .html

   (BUTTON) Open in Stackblitz (BUTTON) Open in Codesandbox
   (BUTTON) App.jsx (BUTTON) index.css (BUTTON) index.html (BUTTON)
   index.jsx
import { ReactFlow, Controls, Background } from '@xyflow/react';
import '@xyflow/react/dist/style.css';

const edges = [{ id: '1-2', source: '1', target: '2' }];

const nodes = [
  {
    id: '1',
    data: { label: 'Hello' },
    position: { x: 0, y: 0 },
    type: 'input',
  },
  {
    id: '2',
    data: { label: 'World' },
    position: { x: 100, y: 100 },
  },
];

function Flow() {
  return (
    <div style={{ height: '100%' }}>
      <ReactFlow nodes={nodes} edges={edges}>
        <Background />
        <Controls />
      </ReactFlow>
    </div>
  );
}

export default Flow;

   (BUTTON)

   Let's give this edge two properties that are built into React Flow, a
   label and a different type.

   IFRAME:
   [60]https://example-apps.xyflow.com/react/learn/getting-started-5/index
   .html

   (BUTTON) Open in Stackblitz (BUTTON) Open in Codesandbox
   (BUTTON) App.jsx (BUTTON) index.css (BUTTON) index.html (BUTTON)
   index.jsx
import { ReactFlow, Controls, Background } from '@xyflow/react';
import '@xyflow/react/dist/style.css';

const edges = [
  { id: '1-2', source: '1', target: '2', label: 'to the', type: 'step' },
];

const nodes = [
  {
    id: '1',
    data: { label: 'Hello' },
    position: { x: 0, y: 0 },
    type: 'input',
  },
  {
    id: '2',
    data: { label: 'World' },
    position: { x: 100, y: 100 },
  },
];

function Flow() {
  return (
    <div style={{ height: '100%' }}>
      <ReactFlow nodes={nodes} edges={edges}>
        <Background />
        <Controls />
      </ReactFlow>
    </div>
  );
}

export default Flow;

   (BUTTON)

   You made your first edge, nice work! You might have realised that you
   can't drag or select nodes. In the next part you'll learn how to make
   the flow interactive.
   [61]Quickstart[62]Slideshow App

   A project by the xyflow team
   We are building and maintaining open source software for node-based UIs
   since 2019.

   Docs
   [63]Getting Started[64]API Reference[65]Examples[66]Showcase

   Social
   [67]Discord[68]Github[69]X / Twitter[70]Bluesky

   xyflow
   [71]Blog[72]Open Source[73]About[74]Contact[75]
   Careers hiring

   Legal
   [76]MIT License[77]Code of Conduct[78]Imprint

   [79]info@xyflow.com -- Copyright © 2024 [80]webkid GmbH. All rights
   reserved -- website design by [81]Facu Montanaro

