Page: reactflow.dev_files/reactflow.dev/learn/getting-started/adding-interactivity.html
----------------------------------------
   [1]¥ We just released React Flow Components powered by shadcn CLI
   (BUTTON)
   [2]

   React Flow
   [3]Learn[4]Reference[5]Examples[6]Components[7]Showcase (BUTTON) More
   (BUTTON) Search
   [8]React Flow Pro (BUTTON)
   (BUTTON) Search
     * [9]Quickstart
     * (BUTTON) Concepts
          + [10]Introduction
          + [11]Terms and Definitions
          + [12]Core Concepts
          + [13]The Viewport
          + [14]Built-In Components
     * (BUTTON) Getting Started
          + [15]Installation
          + [16]Building a Flow
          + [17]Adding Interactivity
     * (BUTTON) Customizing React Flow
          + [18]Custom Nodes
          + [19]Custom Node Props
          + [20]Custom Edges
          + [21]Custom Edge Props
          + [22]Theming
     * (BUTTON) Layouting
          + [23]Layouting Libraries
          + [24]Sub-Flows
     * (BUTTON) Advanced Use
          + [25]Accessibility
          + [26]Testing
          + [27]TypeScript
          + [28]Uncontrolled Flows
          + [29]State Management
          + [30]Computing Flows
          + [31]Server Side Rendering
          + [32]Devtools
     * [33]Tutorials
          + [34]Slideshow App
          + [35]Web Audio API
          + [36]Mind Map App
     * (BUTTON) Troubleshooting
          + [37]Common Errors
          + [38]Remove Attribution
          + [39]Migrate to v12
          + [40]Migrate to v11
          + [41]Migrate to v10
     * [42]API Reference

   On This Page
     * [43]Handle Change Events
     * [44]Handle Connections

   [45]Question? Give us feedback ->[46]Edit this page

   What's new?
   [47]Our examples have a fresh new look[48]React Flow
   CLI[50]...and more!
   [51]Learn[52]Getting Started
   Adding Interactivity

Adding Interactivity

   Let's make it so we can select, drag, and remove nodes and edges.

   In this Getting Started tutorial, we are going to use a [53]"controlled
   component", which is typically the best and most flexible way to use
   React Flow in your own applications. You can also use React Flow in an
   [54]uncontrolled way.

Handle Change Events

   First let's import a few things. To manage the changes in React Flow,
   we'll be using useState and the two helper function applyEdgeChanges
   and applyNodeChanges from React Flow.
import { useState, useCallback } from 'react';
import { ReactFlow, applyEdgeChanges, applyNodeChanges } from '@xyflow/react';

   (BUTTON)

   We're going to set up states for both the nodes and edges:
const [nodes, setNodes] = useState(initialNodes);
const [edges, setEdges] = useState(initialEdges);

   (BUTTON)

   Directly beneath that, we'll add these two functions:
const onNodesChange = useCallback(
  (changes) => setNodes((nds) => applyNodeChanges(changes, nds)),
  [],
);
const onEdgesChange = useCallback(
  (changes) => setEdges((eds) => applyEdgeChanges(changes, eds)),
  [],
);

   (BUTTON)

   When you drag or select a node, the onNodesChange handler gets called.
   With help of the applyNodeChanges function you can then apply those
   changes to your current node state. Putting everything together, it
   should look like this:

   IFRAME:
   [55]https://example-apps.xyflow.com/react/learn/make-it-interactive-1/i
   ndex.html

   (BUTTON) Open in Stackblitz (BUTTON) Open in Codesandbox
   (BUTTON) App.jsx (BUTTON) index.css (BUTTON) index.html (BUTTON)
   index.jsx
import { useState, useCallback } from 'react';
import {
  ReactFlow,
  Controls,
  Background,
  applyNodeChanges,
  applyEdgeChanges,
} from '@xyflow/react';
import '@xyflow/react/dist/style.css';

const initialNodes = [
  {
    id: '1',
    data: { label: 'Hello' },
    position: { x: 0, y: 0 },
    type: 'input',
  },
  {
    id: '2',
    data: { label: 'World' },
    position: { x: 100, y: 100 },
  },
];

const initialEdges = [
  { id: '1-2', source: '1', target: '2', label: 'to the', type: 'step' },
];

function Flow() {
  const [nodes, setNodes] = useState(initialNodes);
  const [edges, setEdges] = useState(initialEdges);

  const onNodesChange = useCallback(
    (changes) => setNodes((nds) => applyNodeChanges(changes, nds)),
    [],
  );
  const onEdgesChange = useCallback(
    (changes) => setEdges((eds) => applyEdgeChanges(changes, eds)),
    [],
  );

  return (
    <div style={{ height: '100%' }}>
      <ReactFlow
        nodes={nodes}
        onNodesChange={onNodesChange}
        edges={edges}
        onEdgesChange={onEdgesChange}
        fitView
      >
        <Background />
        <Controls />
      </ReactFlow>
    </div>
  );
}

export default Flow;

   (BUTTON)

   Now if you run your application, you'll be able to click and drag the
   components, and the UI will update based on those movements.

Handle Connections

   One last piece is missing: connecting nodes manually. For this we need
   to implement an onConnect handler and pass it to the <ReactFlow />
   component as well:

   IFRAME:
   [56]https://example-apps.xyflow.com/react/learn/make-it-interactive-2/i
   ndex.html

   (BUTTON) Open in Stackblitz (BUTTON) Open in Codesandbox
   (BUTTON) App.jsx (BUTTON) index.css (BUTTON) index.html (BUTTON)
   index.jsx
import { useState, useCallback } from 'react';
import {
  ReactFlow,
  Controls,
  Background,
  applyNodeChanges,
  applyEdgeChanges,
  addEdge,
} from '@xyflow/react';
import '@xyflow/react/dist/style.css';

const initialNodes = [
  {
    id: '1',
    data: { label: 'Hello' },
    position: { x: 0, y: 0 },
    type: 'input',
  },
  {
    id: '2',
    data: { label: 'World' },
    position: { x: 100, y: 100 },
  },
];

const initialEdges = [];

function Flow() {
  const [nodes, setNodes] = useState(initialNodes);
  const [edges, setEdges] = useState(initialEdges);

  const onNodesChange = useCallback(
    (changes) => setNodes((nds) => applyNodeChanges(changes, nds)),
    [],
  );
  const onEdgesChange = useCallback(
    (changes) => setEdges((eds) => applyEdgeChanges(changes, eds)),
    [],
  );

  const onConnect = useCallback(
    (params) => setEdges((eds) => addEdge(params, eds)),
    [],
  );

  return (
    <div style={{ height: '100%' }}>
      <ReactFlow
        nodes={nodes}
        onNodesChange={onNodesChange}
        edges={edges}
        onEdgesChange={onEdgesChange}
        onConnect={onConnect}
        fitView
      >
        <Background />
        <Controls />
      </ReactFlow>
    </div>
  );
}

export default Flow;

   (BUTTON)

   Try to connect the two nodes by dragging from on handle to another one.
   That's it. You've built a fully interactive flow.

   That's it for now :) You made it! If you want to move on, we recommend
   to check out the [57]"Custom Nodes" guide.
   [58]Quickstart[59]Slideshow App

   A project by the xyflow team
   We are building and maintaining open source software for node-based UIs
   since 2019.

   Docs
   [60]Getting Started[61]API Reference[62]Examples[63]Showcase

   Social
   [64]Discord[65]Github[66]X / Twitter[67]Bluesky

   xyflow
   [68]Blog[69]Open Source[70]About[71]Contact[72]
   Careers hiring

   Legal
   [73]MIT License[74]Code of Conduct[75]Imprint

   [76]info@xyflow.com -- Copyright © 2024 [77]webkid GmbH. All rights
   reserved -- website design by [78]Facu Montanaro

