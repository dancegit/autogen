Page: reactflow.dev_files/reactflow.dev/api-reference/utils/get-transform-for-bounds.html
----------------------------------------
   [1]¥ We just released React Flow Components powered by shadcn CLI
   (BUTTON)
   [2]

   React Flow
   [3]Learn[4]Reference[5]Examples[6]Components[7]Showcase (BUTTON) More
   (BUTTON) Search
   [8]React Flow Pro (BUTTON)
   (BUTTON) Search
     * [9]API Reference
     * [10]<ReactFlow />
     * [11]<ReactFlowProvider />
     * [12]Components
          + [13]<Background />
          + [14]<BaseEdge />
          + [15]<ControlButton />
          + [16]<Controls />
          + [17]<EdgeLabelRenderer />
          + [18]<EdgeText />
          + [19]<Handle />
          + [20]<MiniMap />
          + [21]<NodeResizer />
          + [22]<NodeResizeControl />
          + [23]<NodeToolbar />
          + [24]<Panel />
          + [25]<ViewportPortal />
     * [26]Hooks
          + [27]useConnection()
          + [28]useEdges()
          + [29]useEdgesState()
          + [30]useHandleConnections()
          + [31]useKeyPress()
          + [32]useNodeId()
          + [33]useNodes()
          + [34]useInternalNode()
          + [35]useNodesData()
          + [36]useNodesInitialized()
          + [37]useNodesState()
          + [38]useOnSelectionChange()
          + [39]useOnViewportChange()
          + [40]useReactFlow()
          + [41]useStore()
          + [42]useStoreApi()
          + [43]useUpdateNodeInternals()
          + [44]useViewport()
     * [45]Types
          + [46]BackgroundVariant
          + [47]Connection
          + [48]ConnectionLineComponentProps
          + [49]ConnectionLineType
          + [50]ConnectionState
          + [51]CoordinateExtent
          + [52]DefaultEdgeOptions
          + [53]DeleteElements
          + [54]Edge
          + [55]EdgeChange
          + [56]EdgeMarker
          + [57]EdgeProps
          + [58]FitViewOptions
          + [59]Handle
          + [60]HandleConnection
          + [61]InternalNode
          + [62]MarkerType
          + [63]MiniMapNodeProps
          + [64]Node
          + [65]NodeChange
          + [66]NodeHandle
          + [67]NodeOrigin
          + [68]NodeProps
          + [69]OnEdgesChange
          + [70]OnNodesChange
          + [71]PanOnScrollMode
          + [72]PanelPosition
          + [73]Position
          + [74]ProOptions
          + [75]ReactFlowInstance
          + [76]ReactFlowJsonObject
          + [77]ResizeParams
          + [78]Viewport
          + [79]XYPosition
     * [80]Utils
          + [81]addEdge()
          + [82]applyEdgeChanges()
          + [83]applyNodeChanges()
          + [84]getBezierPath()
          + [85]getConnectedEdges()
          + [86]getIncomers()
          + [87]getNodesBounds()
          + [88]getOutgoers()
          + [89]getSimpleBezierPath()
          + [90]getSmoothStepPath()
          + [91]getStraightPath()
          + [92]getViewportForBounds()
          + [93]isEdge()
          + [94]isNode()
          + [95]reconnectEdge()
          + [96]getTransformForBounds()

   On This Page
     * [97]Signature
     * [98]Notes

   [99]Question? Give us feedback ->[100]Edit this page

   What's new?
   [101]Our examples have a fresh new look[102]React Flow
   CLI[104]...and more!
   [105]Reference[106]UtilsgetTransformForBounds()

getTransformForBounds()

   [107]Source on Github
   !!!

   This function is deprecated and will be removed in React Flow 12. Use
   [108]getViewportForBounds instead.

   This util tells you what to set the viewport to in order to fit the
   given bounds. You might use this to pre-calculate the viewport for a
   given set of nodes on the server or calculate the viewport for the
   given bounds without changing the viewport directly.
import { getTransformForBounds } from 'reactflow';

const transform = getTransformForBounds(
  {
    x: 0,
    y: 0,
    width: 100,
    height: 100,
  },
  1200,
  800,
  2,
);

   (BUTTON)

Signature

        Name     Type Default
   [109]#Params

   [110]#bounds
   Rect

   [111]#width
   number

   [112]#height
   number

   [113]#minZoom
   number

   [114]#maxZoom
   number

   [115]#padding?
   number

   [116]#Returns

   [117]#[0]
   number
   The x position of the transformed viewport.

   [118]#[1]
   number
   The y position of the transformed viewport

   [119]#[2]
   number
   The zoom level of the transformed viewport.

Notes

     * This is quite a low-level utility. You might want to look at the
       [120]fitView or [121]fitBounds methods for a more practical api.
     * This function is called getTransform... for historical reasons. Its
       return type represents a [122]Viewport in tuple form.

   [123]Utils

   A project by the xyflow team
   We are building and maintaining open source software for node-based UIs
   since 2019.

   Docs
   [124]Getting Started[125]API Reference[126]Examples[127]Showcase

   Social
   [128]Discord[129]Github[130]X / Twitter[131]Bluesky

   xyflow
   [132]Blog[133]Open Source[134]About[135]Contact[136]
   Careers hiring

   Legal
   [137]MIT License[138]Code of Conduct[139]Imprint

   [140]info@xyflow.com -- Copyright © 2024 [141]webkid GmbH. All rights
   reserved -- website design by [142]Facu Montanaro

