Page: reactflow.dev_files/reactflow.dev/examples/edges/animating-edges.html
----------------------------------------
   [1]¥ We just released React Flow Components powered by shadcn CLI
   (BUTTON)
   [2]

   React Flow
   [3]Learn[4]Reference[5]Examples[6]Components[7]Showcase (BUTTON) More
   (BUTTON) Search
   [8]React Flow Pro (BUTTON)
   (BUTTON) Search
     * [9]Examples
     * [10]Feature Overview
     * (BUTTON) Nodes
          + [11]Custom Nodes
          + [12]Updating Nodes
          + [13]Stress Test
          + [14]Hidden
          + [15]Drag Handle
          + [16]Easy Connect
          + [17]Add Node On Edge Drop
          + [18]Proximity Connect
          + [19]Node Resizer
          + [20]Node Toolbar
          + [21]Rotatable Node
          + [22]Dynamic Grouping
          + [23]Intersections
          + [24]Shapes
          + [25]Connection Limit
          + [26]Delete Middle Node
     * (BUTTON) Edges
          + [27]Custom Edges
          + [28]Animating Edges
          + [29]Edge Types
          + [30]Editable Edge
          + [31]Reconnect Edge
          + [32]Connection Line
          + [33]Multi Connection Line
          + [34]Edge Markers
          + [35]Delete Edge on Drop
          + [36]Floating Edges
          + [37]Simple Floating Edges
          + [38]Edge Label Renderer
          + [39]Temporary Edges
     * (BUTTON) Layout
          + [40]Sub Flow
          + [41]Horizontal Flow
          + [42]Dagre Tree
          + [43]Entitree Flex Tree
          + [44]Elkjs Tree
          + [45]Elkjs Multiple Handles
          + [46]Auto Layout
          + [47]Force Layout
          + [48]Expand and Collapse
          + [49]Workflow Builder
     * (BUTTON) Interaction
          + [50]Interaction Props
          + [51]Drag and Drop
          + [52]Computing Flows
          + [53]Validation
          + [54]Connection Events
          + [55]Preventing Cycles
          + [56]Undo and Redo
          + [57]Copy and Paste
          + [58]Helper Lines
          + [59]Touch Device
          + [60]Save and Restore
          + [61]Zoom Transitions
          + [62]Collaborative
          + [63]Contextual Zoom
          + [64]Context Menu
     * (BUTTON) Styling
          + [65]Styled Components
          + [66]Tailwind
          + [67]Turbo Flow
          + [68]Base Style
          + [69]Dark Mode
     * (BUTTON) Misc
          + [70]Static Server Side Generation
          + [71]Download Image
          + [72]ReactFlowProvider
          + [73]useReactFlow

   [74]Examples[75]Edges
   Animating Edges

Animating Edges

   React Flow provides a simple built-in animation for the default edge
   type, but it is possible to create more advanced animations by using
   custom edges. Below are a collection of examples showing different ways
   an edge path might be used in

Animating SVG elements

   It is possible to animate an SVG element along a path using the
   <animateMotion /> element. This example creates a custom edge that
   animates a circle along the edge path.

   IFRAME:
   [76]https://example-apps.xyflow.com/react/examples/edges/animating-edge
   s-svg/index.html

   (BUTTON) Open in Stackblitz (BUTTON) Open in Codesandbox
   (BUTTON) AnimatedSVGEdge.tsx (BUTTON) App.tsx (BUTTON) index.css
   (BUTTON) index.tsx (BUTTON) xy-theme.css
import React from 'react';
import { BaseEdge, getSmoothStepPath, type EdgeProps } from '@xyflow/react';

export function AnimatedSVGEdge({
  id,
  sourceX,
  sourceY,
  targetX,
  targetY,
  sourcePosition,
  targetPosition,
}: EdgeProps) {
  const [edgePath] = getSmoothStepPath({
    sourceX,
    sourceY,
    sourcePosition,
    targetX,
    targetY,
    targetPosition,
  });

  return (
    <>
      <BaseEdge id={id} path={edgePath} />
      <circle r="10" fill="#ff0073">
        <animateMotion dur="2s" repeatCount="indefinite" path={edgePath} />
      </circle>
    </>
  );
}

   (BUTTON)

Animating other nodes

   If you want to animate more than SVG along an edge, you can do that
   with the Web Animations API. This example demonstrates how to animate
   another node in the flow along an edge path by using the offsetPath
   property and animating the offsetDistance property.

   IFRAME:
   [77]https://example-apps.xyflow.com/react/examples/edges/animating-edge
   s-node/index.html

   (BUTTON) Open in Stackblitz (BUTTON) Open in Codesandbox
   (BUTTON) AnimatedNodeEdge.tsx (BUTTON) App.tsx (BUTTON) index.css
   (BUTTON) index.tsx (BUTTON) xy-theme.css
import React, { useEffect, useMemo } from 'react';
import {
  BaseEdge,
  getBezierPath,
  useReactFlow,
  type Edge,
  type EdgeProps,
} from '@xyflow/react';

export type AnimatedNodeEdge = Edge<{ node: string }, 'animatedNode'>;

export function AnimatedNodeEdge({
  id,
  data = { node: '' },
  sourceX,
  sourceY,
  targetX,
  targetY,
  sourcePosition,
  targetPosition,
}: EdgeProps<AnimatedNodeEdge>) {
  const { getNode, updateNode } = useReactFlow();
  const [edgePath] = getBezierPath({
    sourceX,
    sourceY,
    sourcePosition,
    targetX,
    targetY,
    targetPosition,
  });
  const selector = useMemo(
    () => `.react-flow__node[data-id="${data.node}"]`,
    [data.node],
  );

  useEffect(() => {
    const node = document.querySelector(selector) as HTMLElement;

    if (!node) return;

    node.style.offsetPath = `path('${edgePath}')`;
    node.style.offsetRotate = '0deg';
    // This property is fairly new and not all versions of TypeScript have it
    // in the lib.dom.d.ts file. If you get an error here, you can either
    // ignore it or add the property to the CSSStyleDeclaration interface
    // yourself.
    //
    // @ts-expect-error
    node.style.offsetAnchor = 'center';

    let wasDraggable = getNode(data.node).draggable;

    updateNode(data.node, { draggable: false });

    return () => {
      node.style.offsetPath = 'none';
      updateNode(data.node, { draggable: wasDraggable });
    };
  }, [selector, edgePath]);

  useEffect(() => {
    const node = document.querySelector(selector) as HTMLElement;

    if (!node) return;

    const keyframes = [{ offsetDistance: '0%' }, { offsetDistance: '100%' }];
    const animation = node.animate(keyframes, {
      duration: 2000,
      direction: 'alternate',
      iterations: Infinity,
    });

    return () => {
      animation.cancel();
    };
  }, [selector]);

  return <BaseEdge id={id} path={edgePath} />;
}

   (BUTTON)

   There are some important details in this example to take note of:
     * The animated node has its [78]draggable property set to false while
       the animation is running. This prevents a user moving the node
       around and breaking the animation path.
     * The animation path and the animation itself are set up in separate
       useEffect hooks. This lets the animation continue playing smoothly
       even if the edge path is recalculated (for example when the source
       or target nodes are dragged.)

   [79]Feature Overview[80]Dark Mode

   A project by the xyflow team
   We are building and maintaining open source software for node-based UIs
   since 2019.

   Docs
   [81]Getting Started[82]API Reference[83]Examples[84]Showcase

   Social
   [85]Discord[86]Github[87]X / Twitter[88]Bluesky

   xyflow
   [89]Blog[90]Open Source[91]About[92]Contact[93]
   Careers hiring

   Legal
   [94]MIT License[95]Code of Conduct[96]Imprint

   [97]info@xyflow.com -- Copyright © 2024 [98]webkid GmbH. All rights
   reserved -- website design by [99]Facu Montanaro

