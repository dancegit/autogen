Page: reactflow.dev_files/reactflow.dev/examples/nodes/update-node.html
----------------------------------------
   [1]¥ We just released React Flow Components powered by shadcn CLI
   (BUTTON)
   [2]

   React Flow
   [3]Learn[4]Reference[5]Examples[6]Components[7]Showcase (BUTTON) More
   (BUTTON) Search
   [8]React Flow Pro (BUTTON)
   (BUTTON) Search
     * [9]Examples
     * [10]Feature Overview
     * (BUTTON) Nodes
          + [11]Custom Nodes
          + [12]Updating Nodes
          + [13]Stress Test
          + [14]Hidden
          + [15]Drag Handle
          + [16]Easy Connect
          + [17]Add Node On Edge Drop
          + [18]Proximity Connect
          + [19]Node Resizer
          + [20]Node Toolbar
          + [21]Rotatable Node
          + [22]Dynamic Grouping
          + [23]Intersections
          + [24]Shapes
          + [25]Connection Limit
          + [26]Delete Middle Node
     * (BUTTON) Edges
          + [27]Custom Edges
          + [28]Animating Edges
          + [29]Edge Types
          + [30]Editable Edge
          + [31]Reconnect Edge
          + [32]Connection Line
          + [33]Multi Connection Line
          + [34]Edge Markers
          + [35]Delete Edge on Drop
          + [36]Floating Edges
          + [37]Simple Floating Edges
          + [38]Edge Label Renderer
          + [39]Temporary Edges
     * (BUTTON) Layout
          + [40]Sub Flow
          + [41]Horizontal Flow
          + [42]Dagre Tree
          + [43]Entitree Flex Tree
          + [44]Elkjs Tree
          + [45]Elkjs Multiple Handles
          + [46]Auto Layout
          + [47]Force Layout
          + [48]Expand and Collapse
          + [49]Workflow Builder
     * (BUTTON) Interaction
          + [50]Interaction Props
          + [51]Drag and Drop
          + [52]Computing Flows
          + [53]Validation
          + [54]Connection Events
          + [55]Preventing Cycles
          + [56]Undo and Redo
          + [57]Copy and Paste
          + [58]Helper Lines
          + [59]Touch Device
          + [60]Save and Restore
          + [61]Zoom Transitions
          + [62]Collaborative
          + [63]Contextual Zoom
          + [64]Context Menu
     * (BUTTON) Styling
          + [65]Styled Components
          + [66]Tailwind
          + [67]Turbo Flow
          + [68]Base Style
          + [69]Dark Mode
     * (BUTTON) Misc
          + [70]Static Server Side Generation
          + [71]Download Image
          + [72]ReactFlowProvider
          + [73]useReactFlow

   [74]Examples[75]Nodes
   Updating Nodes

Updating Nodes

   You can update properties of nodes and edges freely as long as you pass
   a newly created nodes or edges array to ReactFlow.

   You have to create a new data object on a node to notify React Flow
   about data changes.

   IFRAME:
   [76]https://example-apps.xyflow.com/react/examples/nodes/update-node/in
   dex.html

   (BUTTON) Open in Stackblitz (BUTTON) Open in Codesandbox
   (BUTTON) App.jsx (BUTTON) index.css (BUTTON) xy-theme.css
import React, { useEffect, useState } from 'react';
import { ReactFlow, useNodesState, useEdgesState, Background } from '@xyflow/rea
ct';

import '@xyflow/react/dist/style.css';


const initialNodes = [
  { id: '1', data: { label: '-' }, position: { x: 100, y: 100 } },
  { id: '2', data: { label: 'Node 2' }, position: { x: 100, y: 200 } },
];

const initialEdges = [{ id: 'e1-2', source: '1', target: '2' }];
const defaultViewport = { x: 0, y: 0, zoom: 1.5 };

const UpdateNode = () => {
  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);
  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);

  const [nodeName, setNodeName] = useState('Node 1');
  const [nodeBg, setNodeBg] = useState('#dbdbdb');
  const [nodeHidden, setNodeHidden] = useState(false);

  useEffect(() => {
    setNodes((nds) =>
      nds.map((node) => {
        if (node.id === '1') {
          // it's important that you create a new node object
          // in order to notify react flow about the change
          return {
            ...node,
            data: {
              ...node.data,
              label: nodeName,
            },
          };
        }

        return node;
      }),
    );
  }, [nodeName, setNodes]);

  useEffect(() => {
    setNodes((nds) =>
      nds.map((node) => {
        if (node.id === '1') {
          // it's important that you create a new node object
          // in order to notify react flow about the change
          return {
            ...node,
            style: {
              ...node.style,
              backgroundColor: nodeBg,
            },
          };
        }

        return node;
      }),
    );
  }, [nodeBg, setNodes]);

  useEffect(() => {
    setNodes((nds) =>
      nds.map((node) => {
        if (node.id === '1') {
          // it's important that you create a new node object
          // in order to notify react flow about the change
          return {
            ...node,
            hidden: nodeHidden,
          };
        }

        return node;
      }),
    );
    setEdges((eds) =>
      eds.map((edge) => {
        if (edge.id === 'e1-2') {
          return {
            ...edge,
            hidden: nodeHidden,
          };
        }

        return edge;
      }),
    );
  }, [nodeHidden, setNodes, setEdges]);

  return (
    <ReactFlow
      nodes={nodes}
      edges={edges}
      onNodesChange={onNodesChange}
      onEdgesChange={onEdgesChange}
      defaultViewport={defaultViewport}
      minZoom={0.2}
      style={{ background: '#F7F9FB' }}
      maxZoom={4}
      attributionPosition="bottom-left"
      fitView
      fitViewOptions={{ padding: 0.5 }}
    >
      <div className="update-node__controls">
        <label>label:</label>
        <input
          value={nodeName}
          onChange={(evt) => setNodeName(evt.target.value)}
        />

        <label className="update-node__bg-label">background:</label>
        <input value={nodeBg} onChange={(evt) => setNodeBg(evt.target.  value)}
/>

        <div className="update-node__checkbox-wrapper">
          <label>hidden:</label>
          <input
            type="checkbox"
            checked={nodeHidden}
            onChange={(evt) => setNodeHidden(evt.target.checked)}
          />
        </div>
      </div>
      <Background  />
    </ReactFlow>
  );
};

export default UpdateNode;

   (BUTTON)
   [77]Feature Overview[78]Dark Mode

   A project by the xyflow team
   We are building and maintaining open source software for node-based UIs
   since 2019.

   Docs
   [79]Getting Started[80]API Reference[81]Examples[82]Showcase

   Social
   [83]Discord[84]Github[85]X / Twitter[86]Bluesky

   xyflow
   [87]Blog[88]Open Source[89]About[90]Contact[91]
   Careers hiring

   Legal
   [92]MIT License[93]Code of Conduct[94]Imprint

   [95]info@xyflow.com -- Copyright © 2024 [96]webkid GmbH. All rights
   reserved -- website design by [97]Facu Montanaro

